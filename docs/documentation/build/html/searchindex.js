Search.setIndex({"docnames": ["_autosummary/my_chess", "_autosummary/my_chess.learner", "_autosummary/my_chess.learner.algorithms", "_autosummary/my_chess.learner.algorithms.algorithm", "_autosummary/my_chess.learner.algorithms.algorithm.Algorithm", "_autosummary/my_chess.learner.algorithms.algorithm.AlgorithmConfig", "_autosummary/my_chess.learner.algorithms.autoencoder", "_autosummary/my_chess.learner.algorithms.autoencoder.AutoEncoder", "_autosummary/my_chess.learner.algorithms.autoencoder.AutoEncoderConfig", "_autosummary/my_chess.learner.algorithms.chessevaluation", "_autosummary/my_chess.learner.algorithms.chessevaluation.ChessEvaluation", "_autosummary/my_chess.learner.algorithms.chessevaluation.ChessEvaluationConfig", "_autosummary/my_chess.learner.algorithms.distill", "_autosummary/my_chess.learner.algorithms.distill.ModelDistill", "_autosummary/my_chess.learner.algorithms.distill.ModelDistillConfig", "_autosummary/my_chess.learner.algorithms.loss", "_autosummary/my_chess.learner.algorithms.loss.CrossEntropyLoss", "_autosummary/my_chess.learner.algorithms.ppo_cust", "_autosummary/my_chess.learner.algorithms.ppo_cust.PPO", "_autosummary/my_chess.learner.algorithms.ppo_cust.PPOConfig", "_autosummary/my_chess.learner.algorithms.trainable", "_autosummary/my_chess.learner.algorithms.trainable.SimpleCustomBatch", "_autosummary/my_chess.learner.algorithms.trainable.Trainable", "_autosummary/my_chess.learner.algorithms.trainable.TrainableConfig", "_autosummary/my_chess.learner.algorithms.trainable.collate_wrapper", "_autosummary/my_chess.learner.algorithms.util", "_autosummary/my_chess.learner.algorithms.util.average", "_autosummary/my_chess.learner.algorithms.util.determine_sum_dimensions", "_autosummary/my_chess.learner.algorithms.util.measure_accuracy", "_autosummary/my_chess.learner.algorithms.util.measure_precision", "_autosummary/my_chess.learner.algorithms.util.measure_recall", "_autosummary/my_chess.learner.callbacks", "_autosummary/my_chess.learner.callbacks.callbacks", "_autosummary/my_chess.learner.callbacks.callbacks.SelfPlayCallback", "_autosummary/my_chess.learner.datasets", "_autosummary/my_chess.learner.datasets.chess", "_autosummary/my_chess.learner.datasets.chess.ChessData", "_autosummary/my_chess.learner.datasets.chess.ChessDataWinLossPairs", "_autosummary/my_chess.learner.datasets.chess.PGNGamesItr", "_autosummary/my_chess.learner.datasets.chess.SystemSemaphore", "_autosummary/my_chess.learner.datasets.chess.env", "_autosummary/my_chess.learner.datasets.chess.raw_env", "_autosummary/my_chess.learner.datasets.dataset", "_autosummary/my_chess.learner.datasets.dataset.Dataset", "_autosummary/my_chess.learner.environments", "_autosummary/my_chess.learner.environments.chess", "_autosummary/my_chess.learner.environments.chess.Chess", "_autosummary/my_chess.learner.environments.chess.chess_env", "_autosummary/my_chess.learner.environments.environment", "_autosummary/my_chess.learner.environments.environment.AssertOutOfBoundsWrapper", "_autosummary/my_chess.learner.environments.environment.BaseWrapper", "_autosummary/my_chess.learner.environments.environment.ClipOutOfBoundsWrapper", "_autosummary/my_chess.learner.environments.environment.Environment", "_autosummary/my_chess.learner.environments.environment.OrderEnforcingWrapper", "_autosummary/my_chess.learner.environments.environment.PettingZooEnv", "_autosummary/my_chess.learner.environments.environment.TerminateIllegalWrapper", "_autosummary/my_chess.learner.environments.environment.env_creator", "_autosummary/my_chess.learner.models", "_autosummary/my_chess.learner.models.Qlearner", "_autosummary/my_chess.learner.models.Qlearner.QLearner", "_autosummary/my_chess.learner.models.Qlearner.QLearnerConfig", "_autosummary/my_chess.learner.models.deepchess", "_autosummary/my_chess.learner.models.deepchess.DeepChessAlphaBeta", "_autosummary/my_chess.learner.models.deepchess.DeepChessAlphaBetaConfig", "_autosummary/my_chess.learner.models.deepchess.DeepChessEvaluator", "_autosummary/my_chess.learner.models.deepchess.DeepChessEvaluatorConfig", "_autosummary/my_chess.learner.models.deepchess.DeepChessFE", "_autosummary/my_chess.learner.models.deepchess.DeepChessFEConfig", "_autosummary/my_chess.learner.models.deepchess.DeepChessRL", "_autosummary/my_chess.learner.models.deepchess.DeepChessRLConfig", "_autosummary/my_chess.learner.models.deepchess.NextPositions", "_autosummary/my_chess.learner.models.deepchess.NextPositionsGenerator", "_autosummary/my_chess.learner.models.model", "_autosummary/my_chess.learner.models.model.Model", "_autosummary/my_chess.learner.models.model.ModelAutoEncodable", "_autosummary/my_chess.learner.models.model.ModelConfig", "_autosummary/my_chess.learner.models.model.ModelRLLIB", "_autosummary/my_chess.learner.models.model.ModelRRLIBConfig", "_autosummary/my_chess.learner.models.tobenamed", "_autosummary/my_chess.learner.models.tobenamed.FeatureProjector", "_autosummary/my_chess.learner.models.tobenamed.PositionalEmbedder", "_autosummary/my_chess.learner.models.tobenamed.SwinFeatureExtractor", "_autosummary/my_chess.learner.models.tobenamed.ToBeNamed", "_autosummary/my_chess.learner.models.tobenamed.ToBeNamedConfig", "_autosummary/my_chess.learner.models.transformerchess", "_autosummary/my_chess.learner.models.transformerchess.TransformerChessFE", "_autosummary/my_chess.learner.models.transformerchess.TransformerChessFEConfig", "_autosummary/my_chess.learner.policies", "_autosummary/my_chess.learner.policies.policy", "_autosummary/my_chess.learner.policies.policy.Policy", "_autosummary/my_chess.learner.policies.policy.PolicyConfig", "_autosummary/my_chess.learner.policies.ppo_cust", "_autosummary/my_chess.learner.policies.ppo_cust.PPOPolicy", "_autosummary/my_chess.learner.policies.ppo_cust.PPOPolicyConfig", "_autosummary/my_chess.learner.policies.random", "_autosummary/my_chess.learner.policies.random.RandomPolicy", "_autosummary/my_chess.learner.policies.random.RandomPolicyConfig", "_autosummary/my_chess.scripts", "_autosummary/my_chess.scripts.scripts", "_autosummary/my_chess.scripts.scripts.ArgumentCollector", "_autosummary/my_chess.scripts.scripts.HumanVsBot", "_autosummary/my_chess.scripts.scripts.Script", "_autosummary/my_chess.scripts.scripts.ScriptChooser", "_autosummary/my_chess.scripts.scripts.Serve", "_autosummary/my_chess.scripts.scripts.Test", "_autosummary/my_chess.scripts.scripts.Train", "_autosummary/tests", "_autosummary/tests.conftest", "_autosummary/tests.conftest.all_draws_game_data", "_autosummary/tests.conftest.full_data", "_autosummary/tests.conftest.minimal_obs_game_data", "_autosummary/tests.conftest.short_game_data", "_autosummary/tests.test_algorithms", "_autosummary/tests.test_algorithms.test_measure_accuracy", "_autosummary/tests.test_algorithms.test_measure_precision", "_autosummary/tests.test_algorithms.test_measure_recall", "_autosummary/tests.test_datasets", "_autosummary/tests.test_datasets.TestChessData", "_autosummary/tests.test_models", "_autosummary/tests.test_models.TestDeepChessAlphaBeta", "_autosummary/tests.test_training", "_autosummary/tests.test_training.test_crossentropyloss", "index"], "filenames": ["_autosummary/my_chess.rst", "_autosummary/my_chess.learner.rst", "_autosummary/my_chess.learner.algorithms.rst", "_autosummary/my_chess.learner.algorithms.algorithm.rst", "_autosummary/my_chess.learner.algorithms.algorithm.Algorithm.rst", "_autosummary/my_chess.learner.algorithms.algorithm.AlgorithmConfig.rst", "_autosummary/my_chess.learner.algorithms.autoencoder.rst", "_autosummary/my_chess.learner.algorithms.autoencoder.AutoEncoder.rst", "_autosummary/my_chess.learner.algorithms.autoencoder.AutoEncoderConfig.rst", "_autosummary/my_chess.learner.algorithms.chessevaluation.rst", "_autosummary/my_chess.learner.algorithms.chessevaluation.ChessEvaluation.rst", "_autosummary/my_chess.learner.algorithms.chessevaluation.ChessEvaluationConfig.rst", "_autosummary/my_chess.learner.algorithms.distill.rst", "_autosummary/my_chess.learner.algorithms.distill.ModelDistill.rst", "_autosummary/my_chess.learner.algorithms.distill.ModelDistillConfig.rst", "_autosummary/my_chess.learner.algorithms.loss.rst", "_autosummary/my_chess.learner.algorithms.loss.CrossEntropyLoss.rst", "_autosummary/my_chess.learner.algorithms.ppo_cust.rst", "_autosummary/my_chess.learner.algorithms.ppo_cust.PPO.rst", "_autosummary/my_chess.learner.algorithms.ppo_cust.PPOConfig.rst", "_autosummary/my_chess.learner.algorithms.trainable.rst", "_autosummary/my_chess.learner.algorithms.trainable.SimpleCustomBatch.rst", "_autosummary/my_chess.learner.algorithms.trainable.Trainable.rst", "_autosummary/my_chess.learner.algorithms.trainable.TrainableConfig.rst", "_autosummary/my_chess.learner.algorithms.trainable.collate_wrapper.rst", "_autosummary/my_chess.learner.algorithms.util.rst", "_autosummary/my_chess.learner.algorithms.util.average.rst", "_autosummary/my_chess.learner.algorithms.util.determine_sum_dimensions.rst", "_autosummary/my_chess.learner.algorithms.util.measure_accuracy.rst", "_autosummary/my_chess.learner.algorithms.util.measure_precision.rst", "_autosummary/my_chess.learner.algorithms.util.measure_recall.rst", "_autosummary/my_chess.learner.callbacks.rst", "_autosummary/my_chess.learner.callbacks.callbacks.rst", "_autosummary/my_chess.learner.callbacks.callbacks.SelfPlayCallback.rst", "_autosummary/my_chess.learner.datasets.rst", "_autosummary/my_chess.learner.datasets.chess.rst", "_autosummary/my_chess.learner.datasets.chess.ChessData.rst", "_autosummary/my_chess.learner.datasets.chess.ChessDataWinLossPairs.rst", "_autosummary/my_chess.learner.datasets.chess.PGNGamesItr.rst", "_autosummary/my_chess.learner.datasets.chess.SystemSemaphore.rst", "_autosummary/my_chess.learner.datasets.chess.env.rst", "_autosummary/my_chess.learner.datasets.chess.raw_env.rst", "_autosummary/my_chess.learner.datasets.dataset.rst", "_autosummary/my_chess.learner.datasets.dataset.Dataset.rst", "_autosummary/my_chess.learner.environments.rst", "_autosummary/my_chess.learner.environments.chess.rst", "_autosummary/my_chess.learner.environments.chess.Chess.rst", "_autosummary/my_chess.learner.environments.chess.chess_env.rst", "_autosummary/my_chess.learner.environments.environment.rst", "_autosummary/my_chess.learner.environments.environment.AssertOutOfBoundsWrapper.rst", "_autosummary/my_chess.learner.environments.environment.BaseWrapper.rst", "_autosummary/my_chess.learner.environments.environment.ClipOutOfBoundsWrapper.rst", "_autosummary/my_chess.learner.environments.environment.Environment.rst", "_autosummary/my_chess.learner.environments.environment.OrderEnforcingWrapper.rst", "_autosummary/my_chess.learner.environments.environment.PettingZooEnv.rst", "_autosummary/my_chess.learner.environments.environment.TerminateIllegalWrapper.rst", "_autosummary/my_chess.learner.environments.environment.env_creator.rst", "_autosummary/my_chess.learner.models.rst", "_autosummary/my_chess.learner.models.Qlearner.rst", "_autosummary/my_chess.learner.models.Qlearner.QLearner.rst", "_autosummary/my_chess.learner.models.Qlearner.QLearnerConfig.rst", "_autosummary/my_chess.learner.models.deepchess.rst", "_autosummary/my_chess.learner.models.deepchess.DeepChessAlphaBeta.rst", "_autosummary/my_chess.learner.models.deepchess.DeepChessAlphaBetaConfig.rst", "_autosummary/my_chess.learner.models.deepchess.DeepChessEvaluator.rst", "_autosummary/my_chess.learner.models.deepchess.DeepChessEvaluatorConfig.rst", "_autosummary/my_chess.learner.models.deepchess.DeepChessFE.rst", "_autosummary/my_chess.learner.models.deepchess.DeepChessFEConfig.rst", "_autosummary/my_chess.learner.models.deepchess.DeepChessRL.rst", "_autosummary/my_chess.learner.models.deepchess.DeepChessRLConfig.rst", "_autosummary/my_chess.learner.models.deepchess.NextPositions.rst", "_autosummary/my_chess.learner.models.deepchess.NextPositionsGenerator.rst", "_autosummary/my_chess.learner.models.model.rst", "_autosummary/my_chess.learner.models.model.Model.rst", "_autosummary/my_chess.learner.models.model.ModelAutoEncodable.rst", "_autosummary/my_chess.learner.models.model.ModelConfig.rst", "_autosummary/my_chess.learner.models.model.ModelRLLIB.rst", "_autosummary/my_chess.learner.models.model.ModelRRLIBConfig.rst", "_autosummary/my_chess.learner.models.tobenamed.rst", "_autosummary/my_chess.learner.models.tobenamed.FeatureProjector.rst", "_autosummary/my_chess.learner.models.tobenamed.PositionalEmbedder.rst", "_autosummary/my_chess.learner.models.tobenamed.SwinFeatureExtractor.rst", "_autosummary/my_chess.learner.models.tobenamed.ToBeNamed.rst", "_autosummary/my_chess.learner.models.tobenamed.ToBeNamedConfig.rst", "_autosummary/my_chess.learner.models.transformerchess.rst", "_autosummary/my_chess.learner.models.transformerchess.TransformerChessFE.rst", "_autosummary/my_chess.learner.models.transformerchess.TransformerChessFEConfig.rst", "_autosummary/my_chess.learner.policies.rst", "_autosummary/my_chess.learner.policies.policy.rst", "_autosummary/my_chess.learner.policies.policy.Policy.rst", "_autosummary/my_chess.learner.policies.policy.PolicyConfig.rst", "_autosummary/my_chess.learner.policies.ppo_cust.rst", "_autosummary/my_chess.learner.policies.ppo_cust.PPOPolicy.rst", "_autosummary/my_chess.learner.policies.ppo_cust.PPOPolicyConfig.rst", "_autosummary/my_chess.learner.policies.random.rst", "_autosummary/my_chess.learner.policies.random.RandomPolicy.rst", "_autosummary/my_chess.learner.policies.random.RandomPolicyConfig.rst", "_autosummary/my_chess.scripts.rst", "_autosummary/my_chess.scripts.scripts.rst", "_autosummary/my_chess.scripts.scripts.ArgumentCollector.rst", "_autosummary/my_chess.scripts.scripts.HumanVsBot.rst", "_autosummary/my_chess.scripts.scripts.Script.rst", "_autosummary/my_chess.scripts.scripts.ScriptChooser.rst", "_autosummary/my_chess.scripts.scripts.Serve.rst", "_autosummary/my_chess.scripts.scripts.Test.rst", "_autosummary/my_chess.scripts.scripts.Train.rst", "_autosummary/tests.rst", "_autosummary/tests.conftest.rst", "_autosummary/tests.conftest.all_draws_game_data.rst", "_autosummary/tests.conftest.full_data.rst", "_autosummary/tests.conftest.minimal_obs_game_data.rst", "_autosummary/tests.conftest.short_game_data.rst", "_autosummary/tests.test_algorithms.rst", "_autosummary/tests.test_algorithms.test_measure_accuracy.rst", "_autosummary/tests.test_algorithms.test_measure_precision.rst", "_autosummary/tests.test_algorithms.test_measure_recall.rst", "_autosummary/tests.test_datasets.rst", "_autosummary/tests.test_datasets.TestChessData.rst", "_autosummary/tests.test_models.rst", "_autosummary/tests.test_models.TestDeepChessAlphaBeta.rst", "_autosummary/tests.test_training.rst", "_autosummary/tests.test_training.test_crossentropyloss.rst", "index.rst"], "titles": ["my_chess", "my_chess.learner", "my_chess.learner.algorithms", "my_chess.learner.algorithms.algorithm", "my_chess.learner.algorithms.algorithm.Algorithm", "my_chess.learner.algorithms.algorithm.AlgorithmConfig", "my_chess.learner.algorithms.autoencoder", "my_chess.learner.algorithms.autoencoder.AutoEncoder", "my_chess.learner.algorithms.autoencoder.AutoEncoderConfig", "my_chess.learner.algorithms.chessevaluation", "my_chess.learner.algorithms.chessevaluation.ChessEvaluation", "my_chess.learner.algorithms.chessevaluation.ChessEvaluationConfig", "my_chess.learner.algorithms.distill", "my_chess.learner.algorithms.distill.ModelDistill", "my_chess.learner.algorithms.distill.ModelDistillConfig", "my_chess.learner.algorithms.loss", "my_chess.learner.algorithms.loss.CrossEntropyLoss", "my_chess.learner.algorithms.ppo_cust", "my_chess.learner.algorithms.ppo_cust.PPO", "my_chess.learner.algorithms.ppo_cust.PPOConfig", "my_chess.learner.algorithms.trainable", "my_chess.learner.algorithms.trainable.SimpleCustomBatch", "my_chess.learner.algorithms.trainable.Trainable", "my_chess.learner.algorithms.trainable.TrainableConfig", "my_chess.learner.algorithms.trainable.collate_wrapper", "my_chess.learner.algorithms.util", "my_chess.learner.algorithms.util.average", "my_chess.learner.algorithms.util.determine_sum_dimensions", "my_chess.learner.algorithms.util.measure_accuracy", "my_chess.learner.algorithms.util.measure_precision", "my_chess.learner.algorithms.util.measure_recall", "my_chess.learner.callbacks", "my_chess.learner.callbacks.callbacks", "my_chess.learner.callbacks.callbacks.SelfPlayCallback", "my_chess.learner.datasets", "my_chess.learner.datasets.chess", "my_chess.learner.datasets.chess.ChessData", "my_chess.learner.datasets.chess.ChessDataWinLossPairs", "my_chess.learner.datasets.chess.PGNGamesItr", "my_chess.learner.datasets.chess.SystemSemaphore", "my_chess.learner.datasets.chess.env", "my_chess.learner.datasets.chess.raw_env", "my_chess.learner.datasets.dataset", "my_chess.learner.datasets.dataset.Dataset", "my_chess.learner.environments", "my_chess.learner.environments.chess", "my_chess.learner.environments.chess.Chess", "my_chess.learner.environments.chess.chess_env", "my_chess.learner.environments.environment", "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper", "my_chess.learner.environments.environment.BaseWrapper", "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper", "my_chess.learner.environments.environment.Environment", "my_chess.learner.environments.environment.OrderEnforcingWrapper", "my_chess.learner.environments.environment.PettingZooEnv", "my_chess.learner.environments.environment.TerminateIllegalWrapper", "my_chess.learner.environments.environment.env_creator", "my_chess.learner.models", "my_chess.learner.models.Qlearner", "my_chess.learner.models.Qlearner.QLearner", "my_chess.learner.models.Qlearner.QLearnerConfig", "my_chess.learner.models.deepchess", "my_chess.learner.models.deepchess.DeepChessAlphaBeta", "my_chess.learner.models.deepchess.DeepChessAlphaBetaConfig", "my_chess.learner.models.deepchess.DeepChessEvaluator", "my_chess.learner.models.deepchess.DeepChessEvaluatorConfig", "my_chess.learner.models.deepchess.DeepChessFE", "my_chess.learner.models.deepchess.DeepChessFEConfig", "my_chess.learner.models.deepchess.DeepChessRL", "my_chess.learner.models.deepchess.DeepChessRLConfig", "my_chess.learner.models.deepchess.NextPositions", "my_chess.learner.models.deepchess.NextPositionsGenerator", "my_chess.learner.models.model", "my_chess.learner.models.model.Model", "my_chess.learner.models.model.ModelAutoEncodable", "my_chess.learner.models.model.ModelConfig", "my_chess.learner.models.model.ModelRLLIB", "my_chess.learner.models.model.ModelRRLIBConfig", "my_chess.learner.models.tobenamed", "my_chess.learner.models.tobenamed.FeatureProjector", "my_chess.learner.models.tobenamed.PositionalEmbedder", "my_chess.learner.models.tobenamed.SwinFeatureExtractor", "my_chess.learner.models.tobenamed.ToBeNamed", "my_chess.learner.models.tobenamed.ToBeNamedConfig", "my_chess.learner.models.transformerchess", "my_chess.learner.models.transformerchess.TransformerChessFE", "my_chess.learner.models.transformerchess.TransformerChessFEConfig", "my_chess.learner.policies", "my_chess.learner.policies.policy", "my_chess.learner.policies.policy.Policy", "my_chess.learner.policies.policy.PolicyConfig", "my_chess.learner.policies.ppo_cust", "my_chess.learner.policies.ppo_cust.PPOPolicy", "my_chess.learner.policies.ppo_cust.PPOPolicyConfig", "my_chess.learner.policies.random", "my_chess.learner.policies.random.RandomPolicy", "my_chess.learner.policies.random.RandomPolicyConfig", "my_chess.scripts", "my_chess.scripts.scripts", "my_chess.scripts.scripts.ArgumentCollector", "my_chess.scripts.scripts.HumanVsBot", "my_chess.scripts.scripts.Script", "my_chess.scripts.scripts.ScriptChooser", "my_chess.scripts.scripts.Serve", "my_chess.scripts.scripts.Test", "my_chess.scripts.scripts.Train", "tests", "tests.conftest", "tests.conftest.all_draws_game_data", "tests.conftest.full_data", "tests.conftest.minimal_obs_game_data", "tests.conftest.short_game_data", "tests.test_algorithms", "tests.test_algorithms.test_measure_accuracy", "tests.test_algorithms.test_measure_precision", "tests.test_algorithms.test_measure_recall", "tests.test_datasets", "tests.test_datasets.TestChessData", "tests.test_models", "tests.test_models.TestDeepChessAlphaBeta", "tests.test_training", "tests.test_training.test_crossentropyloss", "Welcome to ChessBot\u2019s documentation!"], "terms": {"modul": [0, 1, 2, 4, 5, 16, 18, 19, 31, 34, 44, 57, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 83, 85, 87, 89, 92, 95, 97, 106, 119, 122], "chessbot": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "control": [2, 5, 19, 36, 37, 41, 49, 50, 51, 53, 55, 71, 87], "train": [2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 18, 19, 20, 22, 23, 32, 33, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "learnabl": 2, "portion": [2, 66], "polici": [2, 4, 5, 18, 19, 32, 33, 59, 68, 76, 82, 100, 104, 105], "base": [3, 4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 20, 21, 22, 23, 33, 36, 37, 38, 39, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 117, 119], "class": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 116, 117, 118, 119], "support": [3, 4, 5, 8, 11, 14, 18, 19, 20, 23, 36, 41, 46, 49, 50, 51, 52, 53, 54, 55, 66, 74, 85], "reinforc": [3, 44], "learn": [3, 5, 8, 11, 14, 19, 20, 22, 23, 34, 44, 57, 66, 89, 92, 95, 105], "agent": [3, 4, 5, 18, 19, 20, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 89, 92, 95], "config": [4, 5, 7, 10, 13, 18, 19, 22, 33, 46, 52, 54, 59, 62, 64, 66, 68, 82, 85, 89, 92, 95, 119], "algorithmconfig": [4, 18, 19, 105], "none": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 26, 33, 36, 37, 38, 39, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 104, 105, 119], "env": [4, 5, 16, 18, 19, 33, 46, 49, 50, 51, 52, 53, 54, 55, 56, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "logger_cr": [4, 5, 7, 10, 13, 18, 19, 22], "callabl": [4, 5, 7, 10, 11, 13, 14, 16, 18, 19, 22, 46, 52, 54, 59, 62, 64, 66, 68, 70, 71, 73, 74, 76, 79, 80, 81, 82, 83, 85, 89, 92, 95, 100, 119], "logger": [4, 5, 7, 10, 13, 18, 19, 22], "kwarg": [4, 5, 8, 11, 14, 16, 18, 19, 23, 33, 40, 47, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 102, 104, 105, 119], "__init__": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 21, 22, 23, 33, 36, 37, 38, 39, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 117, 119], "initi": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 119], "an": [4, 5, 8, 11, 14, 16, 18, 19, 23, 33, 36, 37, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 119], "instanc": [4, 5, 16, 18, 19, 33, 36, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "paramet": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 36, 37, 46, 52, 54, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 102, 104, 105, 119], "specif": [4, 5, 7, 10, 13, 18, 19, 22, 41, 49, 50, 51, 53, 55, 89, 92, 95], "configur": [4, 5, 7, 8, 10, 11, 13, 14, 18, 19, 22, 23, 100, 105], "object": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 21, 22, 23, 33, 38, 39, 46, 52, 54, 59, 62, 64, 66, 68, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 85, 89, 90, 92, 95, 99, 103, 117, 119], "creat": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 37, 43, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 105, 117, 119], "rai": [4, 5, 7, 10, 13, 18, 19, 22, 46, 52, 54, 59, 68, 76, 82, 89, 92, 95, 105], "tune": [4, 5, 7, 10, 13, 18, 19, 22, 105], "If": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "unspecifi": [4, 5, 7, 10, 13, 18, 19, 22], "default": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 119], "i": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 36, 37, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 105, 117, 119], "argument": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 99, 100, 101, 102, 104, 105, 119], "pass": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 102, 119], "trainabl": [4, 5, 7, 10, 13, 18, 19, 59, 68, 76, 82, 105], "method": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 21, 22, 23, 33, 36, 37, 38, 39, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 117, 119], "attribut": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 37, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 86, 99, 117, 119], "add_modul": [4, 16, 18, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "module_id": [4, 5, 18, 19], "str": [4, 5, 7, 10, 13, 14, 16, 18, 19, 22, 33, 36, 37, 38, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 76, 79, 80, 81, 82, 83, 85, 86, 89, 92, 95, 100, 104, 105, 119], "module_spec": [4, 18], "singleagentrlmodulespec": [4, 5, 18, 19], "module_st": [4, 18], "dict": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "new_agent_to_module_mapping_fn": [4, 18], "ani": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 104, 119], "singleagentepisod": [4, 18, 33], "multiagentepisod": [4, 18, 33], "new_should_module_be_upd": [4, 18], "sequenc": [4, 5, 18, 19, 59, 68, 76, 82, 89, 92, 95], "multiagentbatch": [4, 5, 18, 19], "bool": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 36, 37, 38, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 76, 79, 80, 81, 82, 83, 85, 86, 89, 92, 95, 105, 119], "evaluation_work": [4, 18, 33], "true": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 33, 36, 37, 38, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 76, 79, 80, 81, 82, 83, 85, 86, 89, 92, 95, 119], "add": [4, 5, 16, 18, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "new": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 119], "singl": [4, 5, 16, 18, 19, 22, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "rlmodul": [4, 5, 18, 19, 33, 89, 92, 95], "thi": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 36, 37, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 71, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 37, 43, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 117, 119], "marlmodul": [4, 18], "id": [4, 5, 7, 10, 13, 18, 19, 22, 33, 46, 52, 54, 89, 92, 95], "import": [4, 5, 7, 10, 13, 18, 19, 22, 46, 52, 54, 59, 68, 76, 82, 89, 92, 95], "must": [4, 5, 7, 10, 13, 16, 18, 19, 22, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 119], "contain": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 37, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "charact": [4, 18], "ar": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 37, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "also": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 37, 43, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "allow": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 37, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 101, 102, 104, 105, 119], "unix": [4, 7, 10, 13, 18, 22], "win": [4, 18], "filesystem": [4, 18], "dot": [4, 18], "space": [4, 5, 18, 19, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 68, 76, 82, 89, 92, 95], "backslash": [4, 18], "end": [4, 5, 16, 18, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "The": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 36, 37, 46, 52, 54, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "us": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 37, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 67, 68, 71, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 101, 102, 104, 105, 106, 119], "construct": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 95, 119], "option": [4, 5, 7, 10, 13, 16, 18, 19, 22, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 119], "state": [4, 5, 7, 10, 13, 16, 18, 19, 22, 32, 33, 41, 49, 50, 51, 53, 55, 57, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 87, 89, 92, 95, 119], "appli": [4, 5, 8, 11, 14, 16, 18, 19, 23, 33, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "right": [4, 18, 33, 41], "after": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 36, 37, 46, 52, 54, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "its": [4, 5, 6, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "updat": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 32, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "agentid": [4, 18, 49, 50, 51, 53, 55, 89, 92, 95], "moduleid": [4, 5, 18, 19], "map": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "function": [4, 5, 7, 10, 13, 16, 18, 19, 20, 22, 25, 33, 35, 36, 37, 41, 43, 45, 48, 49, 50, 51, 53, 55, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 83, 85, 89, 92, 95, 100, 107, 112, 119, 120], "from": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 36, 37, 43, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 101, 102, 104, 105, 119], "here": [4, 5, 7, 10, 13, 18, 19, 22, 33, 46, 50, 52, 54, 59, 68, 76, 82], "note": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 117, 119], "alreadi": [4, 5, 16, 18, 19, 33, 36, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "ongo": [4, 18], "episod": [4, 5, 18, 19, 33, 46, 52, 54, 89, 92, 95], "chang": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "old": [4, 5, 18, 19, 33], "till": [4, 18], "take": [4, 5, 16, 18, 19, 23, 32, 41, 46, 49, 50, 51, 52, 53, 54, 55, 62, 64, 73, 74, 79, 80, 81, 85, 89, 92, 95, 119], "samplebatchtyp": [4, 5, 18, 19], "return": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "whether": [4, 5, 8, 11, 14, 16, 18, 19, 23, 33, 36, 37, 46, 52, 54, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "should": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 36, 37, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "keep": [4, 5, 18, 19], "exist": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 37, 43, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 117, 119], "setup": [4, 5, 7, 10, 13, 18, 19, 22, 33], "place": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "whose": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "list": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 37, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 65, 66, 67, 68, 69, 73, 74, 76, 79, 80, 81, 82, 83, 85, 89, 92, 95, 100, 104, 119], "which": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 36, 37, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 105, 117, 119], "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 36, 37, 43, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 83, 85, 86, 105, 119], "evalu": [4, 5, 16, 18, 19, 32, 33, 59, 62, 63, 64, 66, 68, 70, 71, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "workerset": [4, 5, 18, 19, 33], "newli": [4, 5, 18, 19, 33], "ad": [4, 5, 8, 11, 14, 16, 18, 19, 23, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "copi": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 37, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "got": [4, 18], "local": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 119], "worker": [4, 5, 7, 10, 13, 18, 19, 22, 33], "add_polici": [4, 18], "policy_id": [4, 18, 33, 59, 68, 76, 82, 89, 92, 95], "policy_cl": [4, 5, 18, 19], "type": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 46, 52, 54, 59, 62, 63, 64, 65, 66, 68, 69, 73, 74, 76, 79, 80, 81, 82, 83, 85, 89, 92, 95, 100, 119], "observation_spac": [4, 5, 18, 19, 41, 49, 50, 51, 53, 55, 89, 92, 95], "action_spac": [4, 5, 18, 19, 41, 49, 50, 51, 53, 55, 59, 68, 76, 82, 89, 92, 95], "policy_st": [4, 18, 89, 92, 95], "arrai": [4, 5, 18, 19, 33, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 76, 82, 85, 89, 92, 95], "jnp": [4, 18, 59, 62, 64, 66, 68, 76, 82, 85, 89, 92, 95], "ndarrai": [4, 18, 36, 37, 41, 43, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 76, 82, 85, 89, 92, 95], "tf": [4, 5, 18, 19, 59, 62, 64, 66, 68, 76, 82, 85, 89, 92, 95, 105], "tensor": [4, 5, 16, 18, 19, 26, 28, 29, 30, 41, 59, 62, 64, 66, 68, 70, 73, 74, 76, 79, 80, 81, 82, 83, 85, 89, 92, 95, 119], "torch": [4, 5, 8, 11, 14, 16, 18, 19, 23, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 83, 85, 89, 92, 95, 105, 119], "tupl": [4, 5, 8, 11, 14, 16, 18, 19, 23, 33, 36, 37, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "policy_mapping_fn": [4, 5, 18, 19], "int": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 26, 27, 28, 29, 30, 33, 36, 37, 38, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 76, 79, 80, 81, 82, 83, 85, 86, 89, 92, 95, 105, 119], "policies_to_train": [4, 5, 18, 19], "samplebatch": [4, 5, 18, 19, 33, 89, 92, 95], "onli": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 37, 41, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "one": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 36, 37, 46, 52, 54, 62, 64, 73, 74, 79, 80, 81, 85, 89, 92, 95, 119], "provid": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 36, 37, 43, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 117, 119], "given": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "directli": [4, 5, 7, 10, 13, 18, 19, 22], "insert": [4, 7, 10, 13, 18, 22], "clone": [4, 18], "all": [4, 5, 7, 10, 13, 16, 18, 19, 22, 23, 33, 36, 37, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 117, 119], "remot": [4, 5, 7, 10, 13, 18, 19, 22, 33, 46, 52, 54], "well": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "observ": [4, 5, 18, 19, 33, 36, 37, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 68, 76, 82, 89, 92, 95, 117, 119], "try": [4, 5, 7, 10, 13, 18, 19, 22, 46, 52, 54], "infer": [4, 5, 18, 19, 46, 52, 54], "environ": [4, 5, 18, 19, 33, 36, 41, 57, 87, 100, 104, 105, 117, 119], "action": [4, 5, 18, 19, 32, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 57, 62, 87, 89, 92, 95, 105], "overrid": [4, 5, 7, 10, 13, 18, 19, 22, 33, 59, 68, 76, 82, 89, 92, 95], "policyid": [4, 5, 18, 19, 89, 92, 95], "In": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 37, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "api": [4, 5, 7, 10, 13, 18, 19, 22, 33, 89, 92, 95], "we": [4, 5, 16, 18, 19, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "need": [4, 5, 7, 10, 13, 16, 18, 19, 22, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "suppos": [4, 18], "know": [4, 5, 18, 19], "spec": [4, 5, 18, 19], "suffici": [4, 18], "wa": [4, 5, 7, 10, 13, 18, 19, 22, 89, 92, 95], "cleanup": [4, 7, 10, 13, 18, 22], "subclass": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 59, 62, 64, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "stop": [4, 7, 10, 13, 18, 22], "actor": [4, 5, 7, 10, 13, 18, 19, 22, 46, 52, 54, 89, 92, 95], "launch": [4, 7, 10, 13, 18, 22], "e": [4, 5, 7, 10, 13, 16, 18, 19, 22, 32, 33, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 119], "rllib": [4, 5, 7, 10, 13, 18, 19, 22, 33, 46, 52, 54, 59, 68, 76, 82, 89, 92, 95], "trainer": [4, 7, 10, 13, 18, 22], "sure": [4, 5, 7, 10, 13, 18, 19, 22], "kill": [4, 7, 10, 13, 18, 22], "process": [4, 5, 7, 8, 10, 11, 13, 14, 18, 19, 22, 23, 43, 89, 92, 95], "lightweight": [4, 7, 10, 13, 18, 22], "per": [4, 5, 7, 10, 13, 18, 19, 22, 36, 37, 89, 92, 95], "you": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "can": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "call": [4, 5, 7, 10, 13, 16, 18, 19, 22, 23, 33, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "remov": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "refer": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "wait": [4, 5, 7, 10, 13, 18, 19, 22, 46, 52, 54], "garbag": [4, 5, 7, 10, 13, 18, 19, 22], "collect": [4, 5, 7, 10, 13, 18, 19, 22, 89, 92, 95], "version": [4, 7, 10, 13, 16, 18, 22, 50, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "0": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 33, 36, 37, 41, 43, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 83, 85, 89, 92, 95, 105, 119], "8": [4, 7, 10, 13, 18, 22, 63, 83], "7": [4, 7, 10, 13, 18, 22], "compute_act": [4, 5, 18, 19, 89, 92, 95], "prev_act": [4, 18, 59, 68, 76, 82, 89, 92, 95], "prev_reward": [4, 18, 59, 68, 76, 82, 89, 92, 95], "info": [4, 5, 18, 19, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 68, 76, 82, 89, 92, 95], "default_polici": [4, 18, 33, 59, 68, 76, 82], "full_fetch": [4, 18], "explor": [4, 5, 18, 19, 89, 92, 95], "timestep": [4, 5, 18, 19, 89, 92, 95], "unsquash_act": [4, 18], "clip_act": [4, 5, 18, 19], "comput": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "specifi": [4, 5, 16, 18, 19, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "access": [4, 5, 16, 18, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "through": [4, 18, 33, 59, 68, 76, 82, 89, 92, 95], "self": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "get_polici": [4, 18], "rnn": [4, 18, 59, 68, 76, 82, 89, 92, 95], "hidden": [4, 18, 59, 67, 68, 76, 81, 82], "compute_single_act": [4, 18, 89, 92, 95], "logit": [4, 18], "dictionari": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "otherwis": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 37, 43, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "previou": [4, 5, 18, 19, 89, 92, 95], "valu": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 36, 37, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "reward": [4, 5, 18, 19, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 89, 92, 95], "queri": [4, 16, 18, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "multi": [4, 5, 16, 18, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "extra": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 119], "fetch": [4, 7, 10, 13, 18, 22, 89, 92, 95], "result": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 92, 119], "alwai": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "set": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 119], "pick": [4, 18, 89, 92, 95], "exploit": [4, 18, 89, 92, 95], "current": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 37, 41, 43, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 117, 119], "sampl": [4, 5, 18, 19, 33, 46, 52, 54, 66, 89, 92, 95], "time": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "step": [4, 5, 7, 10, 13, 18, 19, 22, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 89, 92, 95], "intern": [4, 5, 7, 10, 13, 16, 18, 19, 22, 46, 52, 54, 62, 64, 73, 74, 79, 80, 81, 85, 89, 92, 95], "mai": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "model": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 89, 92, 95, 100, 105, 119], "unsquash": [4, 5, 18, 19], "accord": [4, 5, 18, 19], "normalize_act": [4, 5, 18, 19, 89, 92, 95], "clip": [4, 5, 18, 19, 89, 92, 95], "keyword": [4, 16, 18, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "forward": [4, 5, 16, 18, 19, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "compat": [4, 5, 16, 18, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "placehold": [4, 18, 33, 59, 68, 76, 82, 89, 92, 95], "consist": [4, 5, 16, 18, 19, 37, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "full": [4, 5, 8, 11, 14, 18, 19, 23], "output": [4, 5, 7, 10, 13, 16, 18, 19, 22, 23, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "compute_actions_from_input_dict": [4, 18, 89, 92, 95], "have": [4, 5, 16, 18, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "float": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 36, 37, 41, 43, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 83, 85, 105, 119], "input_dict": [4, 18, 59, 68, 76, 82, 89, 92, 95], "unbatch": [4, 18, 66, 89, 92, 95], "hold": [4, 18, 59, 68, 76, 82, 89, 92, 95], "ob": [4, 5, 18, 19, 46, 52, 54, 59, 68, 76, 81, 82, 89, 92, 95], "plu": [4, 5, 18, 19], "mayb": [4, 18], "custom": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 37, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "defin": [4, 5, 7, 10, 13, 16, 18, 19, 22, 23, 33, 46, 52, 54, 59, 62, 64, 68, 73, 74, 76, 79, 80, 81, 82, 85, 92, 119], "view": [4, 16, 18, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "trajectori": [4, 5, 18, 19, 33, 89, 92, 95], "non": [4, 5, 16, 18, 19, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 92, 119], "rais": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "keyerror": [4, 5, 18, 19], "cannot": [4, 5, 18, 19, 36, 89, 92, 95], "found": [4, 7, 10, 13, 16, 18, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "classmethod": [4, 5, 7, 10, 13, 18, 19, 22, 41], "default_resource_request": [4, 5, 7, 10, 13, 18, 19, 22], "resourc": [4, 5, 7, 8, 10, 11, 13, 14, 18, 19, 22, 23, 41, 49, 50, 51, 53, 55], "placementgroupfactori": [4, 7, 10, 13, 18, 22], "static": [4, 5, 7, 10, 13, 18, 19, 22, 33, 36, 37, 43, 46, 89, 92, 95], "requir": [4, 5, 7, 10, 13, 16, 18, 19, 22, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "overridden": [4, 7, 10, 13, 16, 18, 22, 62, 64, 73, 74, 79, 80, 81, 85, 89, 92, 95, 119], "sub": [4, 5, 7, 10, 13, 18, 19, 22, 33, 46, 52, 54, 89, 92, 95], "correct": [4, 5, 7, 10, 13, 18, 22, 50], "trial": [4, 5, 7, 10, 13, 18, 19, 22], "alloc": [4, 5, 7, 10, 13, 18, 19, 22, 105], "so": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 117, 119], "user": [4, 5, 7, 10, 13, 16, 18, 19, 22, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "doe": [4, 5, 7, 10, 13, 18, 19, 22, 59, 68, 76, 82], "def": [4, 7, 10, 13, 16, 18, 22, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "cl": [4, 5, 7, 10, 13, 18, 19, 22], "cpu": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 105, 119], "1": [4, 5, 7, 10, 13, 16, 18, 19, 22, 26, 27, 28, 29, 30, 33, 36, 37, 39, 43, 46, 50, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 83, 85, 89, 92, 95, 105, 119], "A": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 43, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "consum": [4, 5, 7, 10, 13, 18, 19, 22], "queue": [4, 7, 10, 13, 18, 22], "duration_fn": [4, 18], "under": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 119], "evaluation_config": [4, 5, 18, 19], "run": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 101, 102, 104, 105, 119], "num": [4, 18, 46, 52, 54], "arg": [4, 5, 16, 18, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 101, 102, 104, 105, 119], "number": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 36, 37, 46, 52, 54, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 119], "left": [4, 18, 46, 52, 54], "It": [4, 5, 16, 18, 19, 33, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "find": [4, 5, 18, 19, 59, 68, 76, 82], "out": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "continu": [4, 5, 18, 19, 105], "export_model": [4, 7, 10, 13, 18, 22, 89, 92, 95], "export_format": [4, 7, 10, 13, 18, 22], "export_dir": [4, 7, 10, 13, 18, 22, 89, 92, 95], "export": [4, 7, 10, 13, 18, 22, 89, 92, 95], "_export_model": [4, 7, 10, 13, 18, 22], "actual": [4, 5, 7, 10, 13, 18, 19, 22, 33, 50], "directori": [4, 5, 7, 10, 13, 18, 19, 22, 36, 37, 38, 43, 89, 92, 95, 100, 104], "format": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "dir": [4, 5, 7, 10, 13, 18, 19, 22], "logdir": [4, 5, 7, 10, 13, 18, 19, 22], "exportformat": [4, 7, 10, 13, 18, 22], "successfulli": [4, 7, 10, 13, 18, 22], "export_policy_checkpoint": [4, 18], "checkpoint": [4, 5, 7, 10, 13, 18, 19, 22, 33, 89, 92, 95, 100, 104, 105], "air": [4, 18, 89, 92, 95], "writabl": [4, 18, 89, 92, 95], "store": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "inform": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "ppo": [4, 5, 19, 59, 68, 76, 82, 89, 92, 95], "ppoconfig": [4, 5, 18], "cartpol": [4, 5, 18, 19], "v1": [4, 5, 18, 19], "algo": [4, 5, 18, 19, 59, 68, 76, 82], "tmp": [4, 5, 7, 10, 13, 18, 19, 22, 59, 68, 76, 82, 89, 92, 95], "export_policy_model": [4, 18], "onnx": [4, 18, 89, 92, 95], "opset": [4, 18, 89, 92, 95], "dl": [4, 5, 18, 19], "framework": [4, 5, 18, 19, 22, 33, 89, 92, 95, 105], "from_checkpoint": [4, 18, 89, 92, 95], "remain": [4, 5, 18, 19, 89, 92, 95], "backward": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "2": [4, 5, 7, 10, 13, 16, 18, 19, 22, 46, 52, 54, 59, 60, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 83, 85, 86, 89, 92, 95, 119], "path": [4, 5, 7, 10, 13, 14, 16, 18, 19, 22, 36, 38, 43, 59, 62, 63, 64, 65, 66, 68, 69, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 104, 105, 119], "restor": [4, 5, 7, 10, 13, 18, 19, 22, 89, 92, 95, 105], "recov": [4, 5, 7, 10, 13, 18, 19, 22, 89, 92, 95], "subset": [4, 18, 36, 37, 38, 43], "origin": [4, 5, 18, 19, 89, 92, 95], "present": [4, 5, 18, 19, 33, 46, 52, 54], "instanti": [4, 5, 18, 19, 22, 89, 92, 95], "from_stat": [4, 18, 89, 92, 95], "retriev": [4, 5, 18, 19, 33, 43, 89, 92, 95], "get_stat": [4, 5, 18, 19, 89, 92, 95], "necessari": [4, 5, 18, 19, 36, 37, 43, 46, 52, 54, 89, 92, 95, 99], "scratch": [4, 18], "No": [4, 18, 89, 92, 95], "code": [4, 5, 18, 19, 33, 46, 52, 54, 89, 92, 95], "g": [4, 5, 7, 10, 13, 16, 18, 19, 22, 32, 33, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 119], "knowledg": [4, 18, 89, 92, 95], "etc": [4, 5, 16, 18, 19, 41, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "get_auto_filled_metr": [4, 7, 10, 13, 18, 22], "now": [4, 5, 7, 10, 13, 18, 19, 22], "datetim": [4, 7, 10, 13, 18, 22], "time_this_it": [4, 7, 10, 13, 18, 22], "timestamp": [4, 7, 10, 13, 18, 22], "debug_metrics_onli": [4, 7, 10, 13, 18, 22], "metric": [4, 5, 7, 8, 10, 11, 13, 14, 18, 19, 22, 23, 26, 33, 59, 68, 76, 82, 89, 92, 95], "auto": [4, 5, 7, 10, 13, 18, 19, 22], "fill": [4, 5, 7, 10, 13, 18, 19, 22], "don": [4, 5, 7, 10, 13, 18, 19, 22], "t": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "least": [4, 5, 7, 10, 13, 18, 19, 22], "iter": [4, 5, 7, 10, 13, 16, 18, 19, 22, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "debug_metr": [4, 7, 10, 13, 18, 22], "get_config": [4, 7, 10, 13, 18, 22], "get_default_policy_class": [4, 18], "case": [4, 5, 7, 10, 13, 18, 19, 22, 36, 37, 43, 89, 92, 95], "policyspec": [4, 5, 18, 19], "ignor": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "when": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "enabl": [4, 5, 18, 19, 89, 92, 95, 105], "get_modul": [4, 18], "model_id": [4, 18], "envrunn": [4, 5, 18, 19, 33], "singleagentrlmodul": [4, 5, 18, 19], "sit": [4, 18], "kei": [4, 5, 16, 18, 19, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "insid": [4, 5, 18, 19, 33, 89, 92, 95], "get_weight": [4, 18, 89, 92, 95], "weight": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "import_model": [4, 18], "import_fil": [4, 18, 89, 92, 95], "h5": [4, 18, 59, 68, 76, 82], "file": [4, 5, 7, 10, 13, 18, 19, 22, 36, 37, 43, 59, 68, 76, 82, 100, 101, 102, 104, 105, 117], "import_policy_model_from_h5": [4, 18, 59, 68, 76, 82], "properti": [4, 5, 7, 10, 13, 18, 19, 22, 33, 46, 52, 54, 89, 92, 95], "automat": [4, 5, 7, 10, 13, 18, 19, 22, 41, 49, 50, 51, 53, 55, 99], "increment": [4, 7, 10, 13, 18, 22], "everi": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "load_checkpoint": [4, 7, 10, 13, 18, 22, 33], "checkpoint_dir": [4, 7, 10, 13, 18, 22], "implement": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "do": [4, 5, 7, 10, 13, 18, 19, 22, 33, 89, 92, 95], "reli": [4, 5, 7, 10, 13, 18, 19, 22], "absolut": [4, 7, 10, 13, 18, 22], "save_checkpoint": [4, 7, 10, 13, 18, 22, 89, 92, 95], "prefix": [4, 7, 10, 13, 16, 18, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "string": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 37, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "becaus": [4, 5, 7, 10, 13, 18, 19, 22], "paus": [4, 7, 10, 13, 18, 22], "depend": [4, 5, 7, 10, 13, 18, 19, 22, 89, 92, 95], "temporari": [4, 7, 10, 13, 18, 22], "structur": [4, 5, 7, 10, 13, 18, 19, 22, 66], "preserv": [4, 7, 10, 13, 18, 22], "see": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 43, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "exampl": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 106, 119], "below": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "o": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 37, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "checkpoint_path": [4, 7, 10, 13, 18, 22], "my_checkpoint_path": [4, 7, 10, 13, 18, 22], "join": [4, 7, 10, 13, 18, 22], "my": [4, 7, 10, 13, 18, 22], "print": [4, 5, 7, 10, 13, 16, 18, 19, 22, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "checkpoint_result": [4, 7, 10, 13, 18, 22], "save": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 37, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 117, 119], "data": [4, 5, 6, 7, 8, 10, 11, 13, 14, 18, 19, 21, 22, 23, 33, 36, 37, 43, 59, 66, 68, 76, 82, 89, 92, 95, 117], "my_data": [4, 7, 10, 13, 18, 22], "checkpoint_dict": [4, 7, 10, 13, 18, 22], "log_result": [4, 7, 10, 13, 18, 22], "log": [4, 5, 7, 10, 13, 18, 19, 22, 33, 89, 92, 95], "done": [4, 5, 7, 10, 13, 18, 19, 22, 33, 36, 37, 46, 52, 54], "rather": [4, 7, 10, 13, 18, 22], "than": [4, 5, 7, 10, 13, 18, 19, 22, 36, 37], "driver": [4, 5, 7, 10, 13, 18, 19, 22, 89, 92, 95], "work": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "merge_algorithm_config": [4, 18], "config1": [4, 18], "config2": [4, 18], "_allow_unknown_config": [4, 18], "merg": [4, 18, 50, 81], "complet": [4, 5, 18, 19, 36, 105], "partial": [4, 5, 18, 19], "respect": [4, 5, 8, 11, 14, 16, 18, 19, 23, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "nest": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "within": [4, 5, 16, 18, 19, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 102, 119], "prioriti": [4, 18], "top": [4, 18], "final": [4, 5, 18, 19, 33, 46, 52, 54], "remove_polici": [4, 18], "reset": [4, 5, 7, 10, 13, 18, 19, 22, 33, 36, 37, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55, 89, 92, 95], "new_config": [4, 7, 10, 13, 18, 22], "storag": [4, 5, 7, 10, 13, 16, 18, 19, 22, 32, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "reset_config": [4, 7, 10, 13, 18, 22], "behavior": [4, 5, 7, 10, 13, 16, 18, 19, 22, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "without": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "restart": [4, 5, 7, 10, 13, 18, 19, 22, 33, 46, 52, 54], "speed": [4, 5, 7, 10, 13, 18, 19, 22, 36, 37, 43], "up": [4, 5, 7, 10, 13, 18, 19, 22, 36, 37, 46, 52, 54], "pbt": [4, 7, 10, 13, 18, 22], "perform": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "optim": [4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 57, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "experi": [4, 5, 7, 10, 13, 18, 19, 22, 89, 92, 95, 105], "reuse_actor": [4, 7, 10, 13, 18, 22], "hyperparamet": [4, 7, 10, 13, 18, 22], "success": [4, 7, 10, 13, 18, 22], "els": [4, 7, 10, 13, 18, 22, 33, 89, 92, 95], "resource_help": [4, 7, 10, 13, 18, 22], "help": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 37, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "_trainingresult": [4, 7, 10, 13, 18, 22], "These": [4, 5, 7, 10, 13, 18, 19, 22, 43], "instead": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "addit": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 119], "metadata": [4, 7, 10, 13, 18, 22, 89, 92, 95], "match": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "node": [4, 5, 7, 10, 13, 18, 19, 22], "extern": [4, 7, 10, 13, 18, 22, 46, 52, 54], "cloud": [4, 7, 10, 13, 18, 22], "avail": [4, 5, 7, 10, 13, 18, 19, 22, 33, 43, 46, 52, 54, 89, 92, 95], "checkpoint_node_ip": [4, 7, 10, 13, 18, 22], "doesn": [4, 5, 7, 10, 13, 18, 19, 22], "fallback_to_latest": [4, 7, 10, 13, 18, 22], "latest": [4, 5, 7, 10, 13, 18, 19, 22], "could": [4, 5, 7, 10, 13, 18, 19, 22, 89, 92, 95], "developerapi": [4, 7, 10, 13, 18, 22], "across": [4, 5, 7, 10, 13, 18, 19, 22, 89, 92, 95], "minor": [4, 7, 10, 13, 18, 22], "releas": [4, 7, 10, 13, 16, 18, 22, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "restore_work": [4, 18], "sync": [4, 18], "previous": [4, 18, 89, 92, 95], "fail": [4, 5, 18, 19, 33], "disabl": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "logic": [4, 5, 7, 10, 13, 18, 19, 22, 46, 52, 54], "includ": [4, 5, 16, 18, 19, 33, 36, 37, 59, 62, 64, 66, 68, 71, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 119], "mere": [4, 18], "what": [4, 5, 7, 10, 13, 18, 19, 22, 33], "happen": [4, 5, 18, 19, 33], "rollout": [4, 5, 18, 19, 33, 59, 68, 76, 82], "expect": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "follow": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "pol_1": [4, 18], "pkl": [4, 18], "pol_2": [4, 18], "learner_st": [4, 18], "json": [4, 5, 18, 19], "module_1": [4, 5, 18, 19], "optimizer_st": [4, 18], "optimizers_module_1": [4, 18], "rllib_checkpoint": [4, 18], "algorithm_st": [4, 18], "wrt": [4, 18, 89, 92, 95], "onward": [4, 18], "where": [4, 5, 7, 10, 13, 18, 19, 22, 23, 33, 36, 37, 41, 46, 49, 50, 51, 52, 53, 54, 55, 117], "set_weight": [4, 18, 89, 92, 95], "other": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "main": [4, 5, 18, 19, 89, 92, 95], "n": [4, 5, 16, 18, 19, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "attempt": [4, 5, 18, 19], "therebi": [4, 18], "catch": [4, 7, 10, 13, 18, 22], "rayerror": [4, 18], "failur": [4, 5, 18, 19, 33], "gracefulli": [4, 18], "your": [4, 5, 16, 18, 19, 33, 36, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "would": [4, 5, 16, 18, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "like": [4, 5, 16, 18, 19, 32, 33, 36, 37, 41, 43, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "handl": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "yourself": [4, 5, 18], "training_step": [4, 5, 18, 19], "core": [4, 5, 18, 19], "stat": [4, 5, 18, 19, 59, 68, 76, 82, 89, 92, 95], "procedur": [4, 7, 10, 13, 18, 22], "field": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "termin": [4, 5, 7, 10, 13, 18, 22, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 62, 100, 101, 102, 104, 105, 106], "time_this_iter_": [4, 7, 10, 13, 18, 22], "second": [4, 5, 7, 10, 13, 18, 19, 22], "took": [4, 7, 10, 13, 18, 22], "order": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 37, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "system": [4, 5, 7, 8, 10, 11, 13, 14, 18, 19, 22, 23], "differ": [4, 5, 7, 10, 13, 16, 18, 19, 22, 36, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "time_total_": [4, 7, 10, 13, 18, 22], "accumul": [4, 5, 7, 10, 13, 18, 19, 22], "entir": [4, 5, 7, 10, 13, 18, 19, 22, 33, 89, 92, 95], "training_iter": [4, 7, 10, 13, 18, 22], "index": [4, 5, 7, 10, 13, 18, 19, 22, 33, 36, 37, 43, 89, 92, 95, 122], "pid": [4, 7, 10, 13, 18, 22], "date": [4, 7, 10, 13, 18, 22], "hostnam": [4, 7, 10, 13, 18, 22], "machin": [4, 5, 7, 10, 13, 18, 19, 22, 23, 105], "host": [4, 7, 10, 13, 16, 18, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "node_ip": [4, 7, 10, 13, 18, 22], "ip": [4, 7, 10, 13, 18, 22], "describ": [4, 5, 7, 10, 13, 18, 19, 22, 50], "progress": [4, 7, 10, 13, 18, 22], "train_buff": [4, 7, 10, 13, 18, 22], "buffer_time_": [4, 7, 10, 13, 18, 22], "max_buffer_length": [4, 7, 10, 13, 18, 22], "1000": [4, 5, 7, 10, 13, 18, 19, 22, 81, 83], "multipl": [4, 5, 7, 10, 13, 18, 19, 22, 89, 92, 95], "combin": [4, 5, 7, 10, 13, 18, 19, 22, 89, 92, 95], "repeatedli": [4, 7, 10, 13, 18, 22, 89, 92, 95], "until": [4, 5, 7, 10, 13, 18, 19, 22, 50], "condit": [4, 5, 7, 10, 13, 18, 19, 22], "met": [4, 7, 10, 13, 18, 22], "maximum": [4, 5, 7, 10, 13, 18, 19, 22], "buffer": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "length": [4, 7, 10, 13, 18, 22, 59, 68, 76, 82, 89, 92, 95], "reach": [4, 5, 7, 10, 13, 18, 19, 22, 89, 92, 95], "3": [4, 5, 7, 10, 13, 16, 18, 19, 22, 46, 50, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "even": [4, 5, 7, 10, 13, 18, 19, 22], "block": [4, 7, 10, 13, 18, 22, 81], "receiv": [4, 5, 7, 10, 13, 16, 18, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "next": [4, 5, 7, 10, 13, 18, 19, 22, 41, 49, 50, 51, 53, 55, 71], "amount": [4, 5, 7, 10, 13, 18, 19, 22, 105], "ha": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 36, 46, 50, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "whole": [4, 7, 10, 13, 16, 18, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "same": [4, 5, 7, 10, 13, 16, 18, 19, 22, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "parallel": [4, 5, 18, 19], "concaten": [4, 5, 18, 19, 46, 52, 54], "batch": [4, 5, 8, 11, 14, 18, 19, 23, 24, 33, 37, 46, 52, 54, 59, 66, 67, 68, 76, 82, 89, 92, 95], "more": [4, 5, 16, 18, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "learn_on_batch": [4, 18, 33, 89, 92, 95], "simpl": [4, 5, 16, 18, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "OR": [4, 5, 18, 19], "load_batch_into_buff": [4, 18, 89, 92, 95], "learn_on_loaded_batch": [4, 18, 89, 92, 95], "gpu": [4, 5, 8, 11, 14, 16, 18, 19, 23, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 105, 119], "calcul": [4, 5, 18, 19, 89, 92, 95], "loss": [4, 5, 8, 11, 14, 18, 19, 23, 59, 68, 76, 82, 89, 92, 95], "execut": [4, 5, 7, 10, 13, 16, 18, 19, 22, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "trial_id": [4, 7, 10, 13, 18, 22], "correspond": [4, 7, 10, 13, 16, 18, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "trial_nam": [4, 7, 10, 13, 18, 22], "name": [4, 5, 7, 10, 13, 16, 18, 19, 22, 39, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 104, 105, 119], "trial_resourc": [4, 7, 10, 13, 18, 22], "assign": [4, 5, 7, 10, 13, 18, 19, 22], "validate_env": [4, 18, 33], "env_context": [4, 5, 18, 19, 33], "envcontext": [4, 5, 18, 19, 33], "valid": [4, 5, 8, 11, 14, 18, 19, 23, 33, 36, 37, 43], "child": [4, 16, 18, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "normal": [4, 5, 18, 19, 66, 67, 81, 89, 92, 95], "gym": [4, 5, 18, 19, 33], "vector": [4, 5, 18, 19, 33, 46, 52, 54], "except": [4, 18], "someth": [4, 16, 18, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "wrong": [4, 18], "algo_class": [5, 19], "build": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "use_copi": [5, 19], "thereof": [5, 19], "regist": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "random_env": [5, 19], "randomenv": [5, 19], "via": [5, 19, 33, 46, 52, 54], "deepcopi": [5, 19, 89, 92, 95], "recycl": [5, 19], "over": [5, 8, 11, 14, 16, 19, 23, 36, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "test": [5, 8, 11, 14, 19, 23, 100], "loop": [5, 19, 33, 41, 49, 50, 51, 53, 55], "build_learn": [5, 19], "mean": [5, 16, 19, 33, 89, 92, 95, 100], "envtyp": [5, 19], "extract": [5, 19, 89, 92, 95], "either": [5, 16, 19, 33, 36, 37, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 119], "spce": [5, 19], "built": [5, 19, 33, 59, 76], "build_learner_group": [5, 19], "rl_module_spec": [5, 19], "multiagentrlmodulespec": [5, 19], "learnergroup": [5, 19], "rlmodulespec": [5, 19], "callback": [5, 19, 105], "callbacks_class": [5, 19], "dure": [5, 19, 32, 46, 52, 54], "variou": [5, 19], "phase": [5, 19], "defaultcallback": [5, 19, 33, 105], "custom_metrics_and_callback": [5, 19], "py": [5, 19, 59, 68, 76, 82, 102, 106], "usag": [5, 19], "export_native_model_fil": [5, 19], "util": [5, 7, 10, 13, 16, 19, 22, 36, 37, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "from_config": [5, 19], "_notprovid": [5, 19], "checkpoint_trainable_policies_onli": [5, 19], "individu": [5, 16, 19, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "nativ": [5, 19], "just": [5, 19, 33, 36, 37, 43, 46, 52, 54], "nn": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 83, 85, 119], "w": [5, 19, 33], "gener": [5, 19, 33, 46, 52, 54, 71, 99], "is_trainable_polici": [5, 19], "copy_frozen": [5, 19], "deep": [5, 19], "un": [5, 19], "freez": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "frozen": [5, 19], "statu": [5, 19], "debug": [5, 19, 36, 105], "logger_config": [5, 19], "log_level": [5, 19], "log_sys_usag": [5, 19], "fake_sampl": [5, 19], "seed": [5, 8, 11, 14, 19, 23, 33, 36, 37, 38, 41, 43, 46, 49, 50, 51, 52, 53, 54, 55], "overwrit": [5, 19, 36, 37, 100], "level": [5, 19], "warn": [5, 19], "error": [5, 7, 10, 13, 16, 19, 22, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "period": [5, 19], "summari": [5, 19, 43], "relev": [5, 19], "dataflow": [5, 19], "onc": [5, 16, 19, 36, 37, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 105, 119], "startup": [5, 19], "command": [5, 19], "v": [5, 19, 36, 37, 43], "vv": [5, 19], "flag": [5, 19], "shorthand": [5, 19], "psutil": [5, 19], "instal": [5, 19], "sy": [5, 19], "gputil": [5, 19], "fake": [5, 19], "infinit": [5, 19], "sampler": [5, 19, 89, 92, 95], "For": [5, 16, 19, 41, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "conjunct": [5, 19], "worker_index": [5, 19], "random": [5, 8, 11, 14, 19, 23, 36, 37, 43, 46, 52, 54, 63, 70, 71], "each": [5, 16, 19, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 99, 119], "ident": [5, 19], "make": [5, 16, 19, 33, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 71, 73, 74, 76, 79, 80, 81, 82, 85, 119], "reproduc": [5, 6, 19, 36, 37], "gymnasium": [5, 19, 46, 52, 54], "env_config": [5, 19, 33], "env_task_fn": [5, 19], "render_env": [5, 19], "clip_reward": [5, 19], "disable_env_check": [5, 19], "is_atari": [5, 19], "auto_wrap_old_gym_env": [5, 19], "action_mask_kei": [5, 19], "rl": [5, 19, 89, 92, 95], "register_env": [5, 19], "lambda": [5, 19], "env_ctx": [5, 19], "latter": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "interpret": [5, 19], "farama": [5, 19, 50], "foundat": [5, 19, 50], "pybullet": [5, 19], "fulli": [5, 16, 19, 41, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "qualifi": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "classpath": [5, 19], "creator": [5, 19], "num_rollout_work": [5, 19], "vector_index": [5, 19], "last": [5, 19, 41, 49, 50, 51, 53, 55, 59, 68, 76, 82, 89, 92, 95], "context": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "task": [5, 19], "tasksettableenv": [5, 19], "curriculum_learn": [5, 19], "render": [5, 19, 36, 37, 41, 46, 49, 50, 51, 52, 53, 54, 55], "usual": [5, 19, 33, 89, 92, 95], "first": [5, 19, 36, 37, 59, 68, 76, 82, 89, 92, 95], "window": [5, 19, 41, 46, 49, 50, 51, 52, 53, 54, 55, 81], "itself": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "b": [5, 19, 89, 92, 95], "numpi": [5, 19, 33, 36, 37, 41, 43, 49, 50, 51, 53, 55, 59, 68, 76, 82], "uint8": [5, 19], "imag": [5, 19], "shape": [5, 19, 59, 68, 76, 82, 89, 92, 95], "height": [5, 19, 66], "x": [5, 19, 46, 52, 54], "width": [5, 19, 66], "rgb": [5, 19], "postprocess": [5, 19, 33, 89, 92, 95], "atari": [5, 19], "r": [5, 19], "sign": [5, 19], "fix": [5, 19, 50], "never": [5, 19, 33], "value1": [5, 19], "value2": [5, 19], "center": [5, 19], "small": [5, 19, 36, 37, 43], "stddev": [5, 19], "affect": [5, 8, 11, 14, 16, 19, 23, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "box": [5, 19], "compon": [5, 19, 22, 36, 37, 89, 92, 95], "bound": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "befor": [5, 7, 10, 13, 16, 19, 22, 33, 36, 37, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 101, 102, 104, 105, 119], "send": [5, 19], "back": [5, 19], "moduletoenv": [5, 19], "connector": [5, 19, 89, 92, 95], "them": [5, 16, 19, 62, 64, 73, 74, 79, 80, 81, 85, 119], "pre": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "check": [5, 16, 19, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "explicitli": [5, 19], "detect": [5, 19], "wrap": [5, 16, 19, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "24": [5, 19, 50], "wrapper": [5, 19, 33], "envcompat": [5, 19], "produc": [5, 19], "descript": [5, 19, 59, 66, 68, 76, 82], "upgrad": [5, 19], "switch": [5, 19, 41, 49, 50, 51, 53, 55], "mask": [5, 19, 26], "int8": [5, 19], "zero": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "ones": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "action_mask": [5, 19], "evaluation_interv": [5, 19], "evaluation_dur": [5, 19], "evaluation_duration_unit": [5, 19], "evaluation_sample_timeout_": [5, 19], "evaluation_parallel_to_train": [5, 19], "algorithm_config": [5, 19, 105], "off_policy_estimation_method": [5, 19], "ope_split_batch_by_episod": [5, 19], "evaluation_num_work": [5, 19], "custom_evaluation_funct": [5, 19], "custom_async_evaluation_funct": [5, 19], "always_attach_evaluation_result": [5, 19], "enable_async_evalu": [5, 19], "evaluation_num_episod": [5, 19], "report": [5, 19, 59, 68, 76, 82], "ap": [5, 19], "lowest": [5, 19], "epsilon": [5, 19], "durat": [5, 19], "unit": [5, 19], "load": [5, 19, 33, 36, 37, 89, 92, 95], "split": [5, 8, 11, 14, 19, 23, 89, 92, 95], "amongst": [5, 19], "Will": [5, 19, 37, 41, 100], "mani": [5, 19, 36], "fit": [5, 19], "count": [5, 8, 11, 14, 19, 23], "timeout": [5, 19], "get": [5, 19, 33, 59, 68, 76, 82, 89, 92, 95], "instruct": [5, 19], "how": [5, 8, 11, 14, 16, 19, 23, 36, 37, 43, 59, 62, 64, 66, 68, 71, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "issu": [5, 19, 43, 50], "increas": [5, 19], "thread": [5, 19], "experiment": [5, 19, 89, 92, 95], "possibl": [5, 16, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "pitfal": [5, 19], "race": [5, 19], "synch": [5, 19], "begin": [5, 19, 33, 66], "typic": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "determinist": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "gradient": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "abl": [5, 19], "stochast": [5, 19, 81], "along": [5, 19], "effect": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "read": [5, 19, 36, 37, 43], "offlin": [5, 19], "input": [5, 6, 16, 19, 23, 28, 29, 30, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 119], "ope_method_nam": [5, 19], "ope_typ": [5, 19], "op": [5, 19], "offpolicyestim": [5, 19], "estim": [5, 19, 59, 68, 76, 82], "importancesampl": [5, 19], "own": [5, 16, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "qreg_dr": [5, 19], "doublyrobust": [5, 19], "q_model_typ": [5, 19], "qreg": [5, 19], "k": [5, 19, 89, 92, 95], "5": [5, 19, 36, 37, 46, 52, 54], "split_by_episod": [5, 19], "bandit": [5, 19], "improv": [5, 19], "ok": [5, 19], "sinc": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "record": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "separ": [5, 19, 36], "signatur": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "eval_work": [5, 19], "guarante": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "eval": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "asynchron": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "weights_ref": [5, 19], "objectref": [5, 19], "weights_seq_no": [5, 19], "_evaluate_async_with_env_runn": [5, 19], "avoid": [5, 16, 19, 37, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "too": [5, 19], "often": [5, 19], "weigths_seq_no": [5, 19], "identifi": [5, 19], "again": [5, 19], "attach": [5, 19], "some": [5, 7, 10, 13, 16, 19, 22, 33, 36, 37, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 99, 119], "meta": [5, 19], "asyncrequestsmanag": [5, 19], "manag": [5, 19], "request": [5, 19, 89, 92, 95], "wai": [5, 19, 23], "becom": [5, 19, 46, 52, 54], "robust": [5, 19], "against": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "long": [5, 19, 89, 92, 95], "_enable_new_api_stack": [5, 19, 89, 92, 95], "_tf_policy_handles_more_than_one_loss": [5, 19], "_disable_preprocessor_api": [5, 19], "_disable_action_flatten": [5, 19], "_disable_initialize_loss_from_dummy_batch": [5, 19], "_disable_execution_plan_api": [5, 19], "stack": [5, 19, 33], "modelv2": [5, 19, 59, 68, 76, 82, 89, 92, 95], "capabl": [5, 19], "tfpolici": [5, 19, 89, 92, 95], "term": [5, 19], "loss_fn": [5, 19], "equal": [5, 19, 89, 92, 95], "optimizer_fn": [5, 19], "futur": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "preprocessor": [5, 19], "arriv": [5, 19], "thei": [5, 16, 19, 33, 59, 62, 64, 66, 68, 71, 73, 74, 76, 79, 80, 81, 82, 85, 119], "longer": [5, 19, 36, 37, 43], "flatten": [5, 19, 59, 66, 68, 76, 82], "samplecollector": [5, 19], "leav": [5, 19], "possibli": [5, 19, 89, 92, 95], "struct": [5, 19, 89, 92, 95], "part": [5, 16, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 119], "incl": [5, 19], "exploration_config": [5, 19], "iff": [5, 19], "fault_toler": [5, 19], "recreate_failed_work": [5, 19], "max_num_worker_restart": [5, 19], "delay_between_worker_restarts_": [5, 19], "restart_failed_sub_environ": [5, 19, 46, 52, 54], "num_consecutive_worker_failures_toler": [5, 19], "worker_health_probe_timeout_": [5, 19], "worker_restore_timeout_": [5, 19], "fault": [5, 19], "toler": [5, 19], "upon": [5, 7, 10, 13, 19, 22], "recreat": [5, 19, 33], "lost": [5, 19], "recreated_work": [5, 19], "ignore_worker_failur": [5, 19], "delai": [5, 19], "between": [5, 8, 11, 14, 16, 19, 23, 50, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "two": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "consecut": [5, 19], "throw": [5, 16, 19, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "faulti": [5, 19, 46, 52, 54], "disturb": [5, 19, 46, 52, 54], "still": [5, 19, 33, 36, 37, 43, 46, 52, 54], "intact": [5, 19, 46, 52, 54], "crash": [5, 19, 33], "NOT": [5, 19, 33], "won": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 117, 119], "flaw": [5, 19], "silent": [5, 16, 19, 62, 64, 73, 74, 79, 80, 81, 85, 119], "hood": [5, 19], "max": [5, 19, 89, 92, 95], "spend": [5, 19], "health": [5, 19], "probe": [5, 19], "finish": [5, 19, 33, 46, 52, 54], "ping": [5, 19], "veri": [5, 19, 36, 37, 43], "cheap": [5, 19], "minut": [5, 19], "30": [5, 19], "min": [5, 19], "eager_trac": [5, 19], "eager_max_retrac": [5, 19], "tf_session_arg": [5, 19], "local_tf_session_arg": [5, 19], "torch_compile_learn": [5, 19], "torch_compile_learner_what_to_compil": [5, 19], "torch_compile_learner_dynamo_mod": [5, 19], "torch_compile_learner_dynamo_backend": [5, 19], "torch_compile_work": [5, 19], "torch_compile_worker_dynamo_backend": [5, 19], "torch_compile_worker_dynamo_mod": [5, 19], "pytorch": [5, 19, 43, 81, 89, 92, 95], "tf2": [5, 19, 33], "tensorflow": [5, 19], "eager": [5, 19, 59, 68, 76, 82], "trace": [5, 19], "graph": [5, 19, 33, 59, 68, 76, 82], "mode": [5, 16, 19, 33, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 105, 119], "greatli": [5, 19], "speedup": [5, 19], "2x": [5, 19], "slightli": [5, 19], "harder": [5, 19], "python": [5, 19, 36], "re": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "runtim": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "prevent": [5, 19, 43], "unnot": [5, 19], "retrac": [5, 19], "_eager_trac": [5, 19], "slow": [5, 19, 36, 37, 43], "down": [5, 19], "factor": [5, 19], "4": [5, 19, 46, 52, 54, 81, 83], "notic": [5, 19], "root": [5, 19], "caus": [5, 19, 59, 68, 76, 82], "slowdown": [5, 19], "oper": [5, 8, 11, 14, 16, 19, 23, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 100, 119], "session": [5, 19, 89, 92, 95, 105], "forward_train": [5, 19, 89, 92, 95], "torchrlmodul": [5, 19], "compil": [5, 19], "torchcompilewhattocompil": [5, 19], "side": [5, 19], "detail": [5, 16, 19, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "advic": [5, 19], "dynamo": [5, 19], "backend": [5, 19], "expens": [5, 19], "anymor": [5, 19], "from_dict": [5, 19], "config_dict": [5, 19], "legaci": [5, 19], "ppo_config": [5, 19], "pendulum": [5, 19], "shim": [5, 19], "pretend": [5, 19], "get_config_for_modul": [5, 19], "might": [5, 19], "train_batch_s": [5, 19], "lr": [5, 8, 11, 14, 19, 23], "translat": [5, 19], "get_default_learner_class": [5, 19], "bc": [5, 19], "get_default_rl_module_spec": [5, 19], "get_evaluation_config_object": [5, 19], "get_marl_module_spec": [5, 19], "policy_dict": [5, 19], "single_agent_rl_module_spec": [5, 19], "multiagentrlmodul": [5, 19], "turn": [5, 19], "equival": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "determin": [5, 8, 11, 14, 19, 23, 36, 37, 89, 92, 95, 105], "obtrain": [5, 19], "sourc": [5, 19], "_rl_module_spec": [5, 19], "were": [5, 19, 33], "get_multi_agent_setup": [5, 19], "default_policy_class": [5, 19], "multiagentpolicyconfigdict": [5, 19], "unifi": [5, 19], "strictli": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "testcod": [5, 19], "multi_ag": [5, 19], "pol1": [5, 19], "pol2": [5, 19], "is_policy_to_train": [5, 19], "policy_class": [5, 19], "therefor": [5, 19], "valueerror": [5, 19], "get_rollout_fragment_length": [5, 19], "proper": [5, 19], "rollout_fragment_length": [5, 19, 89, 92, 95], "formula": [5, 19], "total_train_batch_s": [5, 19], "num_envs_per_work": [5, 19], "fraction": [5, 19, 36, 37, 43, 105], "AND": [5, 19], "those": [5, 19, 33, 36, 37, 59, 68, 76, 82, 89, 92, 95], "overal": [5, 19], "size": [5, 8, 11, 14, 16, 19, 23, 36, 37, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "exactli": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "get_torch_compile_worker_config": [5, 19], "torchcompileconfig": [5, 19], "is_multi_ag": [5, 19], "default_policy_id": [5, 19], "item": [5, 19], "learner_class": [5, 19], "unset": [5, 19], "figur": [5, 19], "algorithm_config_overrides_per_modul": [5, 19], "policy_map_capac": [5, 19], "oldepisod": [5, 19], "policy_states_are_swapp": [5, 19], "observation_fn": [5, 19], "count_steps_bi": [5, 19], "replay_mod": [5, 19], "policy_map_cach": [5, 19], "everyth": [5, 19], "properli": [5, 19], "convert": [5, 8, 11, 14, 16, 19, 23, 33, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "obs_spac": [5, 19, 46, 52, 54, 59, 68, 76, 82], "act_spac": [5, 19, 46, 52, 54], "certain": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "rate": [5, 8, 11, 14, 19, 23, 81], "particular": [5, 8, 11, 14, 16, 19, 23, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "0002": [5, 19], "lambda_": [5, 19], "75": [5, 8, 11, 14, 19], "policy_map": [5, 19], "write": [5, 19, 36, 37, 43, 89, 92, 95], "recent": [5, 19, 59, 68, 76, 82], "disk": [5, 19, 89, 92, 95], "s3": [5, 19], "agent_id": [5, 19, 33, 46, 52, 54, 59, 68, 76, 82], "indic": [5, 19, 46, 52, 54], "plai": [5, 19, 36], "oppon": [5, 19], "swap": [5, 19], "set_stat": [5, 19, 89, 92, 95], "significantli": [5, 19], "policymap": [5, 19], "cach": [5, 19], "lookup": [5, 19], "share": [5, 16, 19, 59, 62, 64, 68, 73, 74, 76, 79, 80, 81, 82, 85], "neural": [5, 19, 67], "network": [5, 16, 19, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "architectur": [5, 19], "memori": [5, 8, 11, 14, 16, 19, 23, 36, 37, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "simpli": [5, 19, 36], "most": [5, 19, 59, 68, 76, 82], "leagu": [5, 19], "100": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "swappabl": [5, 19], "enhanc": [5, 19], "observation_funct": [5, 19], "env_step": [5, 19], "matter": [5, 19, 89, 92, 95], "been": [5, 19, 33, 36, 50, 89, 92, 95], "agent_step": [5, 19], "offline_data": [5, 19], "input_": [5, 19], "input_config": [5, 19], "actions_in_input_norm": [5, 19], "input_evalu": [5, 19], "postprocess_input": [5, 19], "shuffle_buffer_s": [5, 19], "output_config": [5, 19], "output_compress_column": [5, 19], "output_max_file_s": [5, 19], "offline_sampl": [5, 19], "onlin": [5, 19], "simul": [5, 19, 46, 52, 54], "glob": [5, 19], "express": [5, 19], "uri": [5, 19], "bucket": [5, 19], "probabl": [5, 19], "expert": [5, 19], "iocontext": [5, 19], "inputread": [5, 19], "registri": [5, 19], "register_input": [5, 19], "configu": [5, 19], "env_nam": [5, 19], "dataset": [5, 8, 11, 14, 19, 23, 105], "anoth": [5, 19], "sac": [5, 19], "while": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "postprocess_trajectori": [5, 19, 89, 92, 95], "fragment": [5, 19], "undesir": [5, 19], "posit": [5, 16, 19, 36, 37, 59, 62, 64, 66, 68, 71, 73, 74, 76, 79, 80, 81, 82, 85, 117, 119], "shuffl": [5, 8, 11, 14, 19, 23], "slide": [5, 19], "enough": [5, 19], "bckt": [5, 19], "outputwrit": [5, 19], "column": [5, 19, 33, 89, 92, 95], "lz4": [5, 19], "compress": [5, 19], "byte": [5, 19], "roll": [5, 19], "limit": [5, 19, 36, 37, 39, 105, 117], "pair": [5, 19, 37, 89, 92, 95], "immedi": [5, 16, 19, 33, 36, 37, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "compar": [5, 19, 23], "yield": [5, 16, 19, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "anywher": [5, 19], "few": [5, 19], "pol0": [5, 19], "95": [5, 19], "being": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 105, 119], "taken": [5, 19, 81], "pop": [5, 19], "python_environ": [5, 19], "extra_python_environs_for_driv": [5, 19], "extra_python_environs_for_work": [5, 19], "var": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "omp_num_thread": [5, 19], "16": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 83, 85, 119], "keep_per_episode_custom_metr": [5, 19], "metrics_episode_collection_timeout_": [5, 19], "metrics_num_episodes_for_smooth": [5, 19], "min_time_s_per_iter": [5, 19], "min_train_timesteps_per_iter": [5, 19], "min_sample_timesteps_per_iter": [5, 19], "raw": [5, 19], "smooth": [5, 19], "start": [5, 19, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55], "fewer": [5, 19], "ll": [5, 19, 89, 92, 95], "smaller": [5, 19], "ever": [5, 19], "cut": [5, 19], "excess": [5, 19, 37, 89, 92, 95], "minimum": [5, 19], "num_gpu": [5, 19, 105], "_fake_gpu": [5, 19], "num_cpus_per_work": [5, 19], "num_gpus_per_work": [5, 19], "num_cpus_for_local_work": [5, 19], "num_learner_work": [5, 19], "num_cpus_per_learner_work": [5, 19], "num_gpus_per_learner_work": [5, 19], "local_gpu_idx": [5, 19], "custom_resources_per_work": [5, 19], "placement_strategi": [5, 19], "advantag": [5, 19], "impala": [5, 19], "dqn": [5, 19], "pg": [5, 19], "funciton": [5, 19], "tower": [5, 19, 89, 92, 95], "locat": [5, 19, 33, 100, 104], "intens": [5, 19], "video": [5, 19, 33], "game": [5, 19, 36, 37, 117], "unusu": [5, 19], "head": [5, 19, 81], "greater": [5, 19], "accordingli": [5, 19], "total": [5, 19], "pipelin": [5, 19], "program": [5, 19], "cuda": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "devic": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "cuda_visible_devic": [5, 19], "strategi": [5, 19], "placement": [5, 19], "group": [5, 19, 46, 52, 54], "factori": [5, 19], "placementgroup": [5, 19], "co": [5, 19], "bundl": [5, 19], "pack": [5, 19], "spread": [5, 19], "distinct": [5, 19], "strict_pack": [5, 19], "span": [5, 19], "strict_spread": [5, 19], "rl_modul": [5, 19, 33], "marl_modul": [5, 19], "_enable_rl_module_api": [5, 19], "catalog_class": [5, 19], "env_runner_cl": [5, 19], "create_env_on_local_work": [5, 19], "sample_collector": [5, 19], "collector": [5, 19], "enable_connector": [5, 19], "env_to_module_connector": [5, 19], "connectorv2": [5, 19], "module_to_env_connector": [5, 19], "add_default_connectors_to_env_to_module_pipelin": [5, 19], "add_default_connectors_to_module_to_env_pipelin": [5, 19], "episode_lookback_horizon": [5, 19], "use_worker_filter_stat": [5, 19], "update_worker_filter_stat": [5, 19], "batch_mod": [5, 19, 89, 92, 95], "remote_worker_env": [5, 19, 46, 52, 54], "remote_env_batch_wait_m": [5, 19, 46, 52, 54], "validate_workers_after_construct": [5, 19], "preprocessor_pref": [5, 19], "observation_filt": [5, 19], "compress_observ": [5, 19], "enable_tf1_exec_eagerli": [5, 19], "sampler_perf_stats_ema_coef": [5, 19], "synchronize_filt": [5, 19], "sample_async": [5, 19], "forc": [5, 19], "wise": [5, 19], "bottleneck": [5, 19], "workload": [5, 19], "local_work": [5, 19, 33], "idx": [5, 16, 19, 36, 37, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "remote_work": [5, 19], "worker_indic": [5, 19], "nor": [5, 19], "runner": [5, 19], "preprocess": [5, 19], "piec": [5, 19, 36, 37], "envtomodulepipelin": [5, 19], "convers": [5, 19], "moduletoenvpipelin": [5, 19], "rank": [5, 19], "applic": [5, 19, 36, 37, 46, 52, 54, 59, 68, 76, 82], "unmap": [5, 19], "preceed": [5, 19, 33], "chunk": [5, 19], "later": [5, 19, 89, 92, 95], "larger": [5, 19, 36, 37], "look": [5, 16, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "10": [5, 19, 36, 37, 59, 68, 76, 82], "central": [5, 19, 41, 49, 50, 51, 53, 55], "filter": [5, 19], "held": [5, 19], "discard": [5, 19, 89, 92, 95], "push": [5, 19], "divid": [5, 19], "epoch": [5, 8, 11, 14, 19, 22, 23], "sgd": [5, 19, 89, 92, 95], "multipli": [5, 19], "500": [5, 19], "vari": [5, 19, 46, 52, 54], "further": [5, 19, 36], "minibatch": [5, 19, 89, 92, 95], "exact": [5, 19, 33], "come": [5, 19, 33], "distribut": [5, 19, 89, 92, 95], "concat": [5, 19], "d": [5, 19], "form": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "thing": [5, 19], "adjust": [5, 19], "truncate_episod": [5, 19, 89, 92, 95], "num_env": [5, 19, 46, 52, 54], "truncat": [5, 19, 33, 41, 46, 49, 50, 51, 52, 53, 54, 55, 89, 92, 95], "meet": [5, 19], "evenli": [5, 19, 89, 92, 95], "varianc": [5, 19], "boundari": [5, 19], "complete_episod": [5, 19, 89, 92, 95], "henc": [5, 19], "signific": [5, 19], "off": [5, 19], "overhead": [5, 19], "sens": [5, 19], "much": [5, 19, 36, 37], "starcraft": [5, 19], "cautious": [5, 19], "poll": [5, 19, 46, 52, 54], "readi": [5, 19, 46, 52, 54], "reason": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "obtain": [5, 19, 89, 92, 95], "measur": [5, 19], "perf": [5, 19], "healthi": [5, 19], "deepmind": [5, 19], "complex": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "element": [5, 19], "nofilt": [5, 19], "meanstdfilt": [5, 19], "tell": [5, 19], "purpos": [5, 19, 41], "ema": [5, 19], "coeff": [5, 19], "point": [5, 7, 10, 13, 16, 19, 22, 36, 37, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "contribut": [5, 19], "averag": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "global": [5, 19, 41, 49, 50, 51, 53, 55, 89, 92, 95], "rule": [5, 19, 36], "ema_coef": [5, 19], "serial": [5, 7, 10, 13, 16, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "repres": [5, 19, 36, 37, 43], "written": [5, 19], "closur": [5, 19], "made": [5, 19], "dataclass": [5, 19], "to_dict": [5, 8, 11, 14, 19, 23], "algorithmconfigdict": [5, 19], "usabl": [5, 19], "tuner": [5, 19, 105], "gamma": 5, "grad_clip": [5, 19], "grad_clip_bi": 5, "train_batch_size_per_learn": [5, 19], "max_requests_in_flight_per_sampler_work": 5, "learner_connector": 5, "add_default_connectors_to_learner_pipelin": 5, "_enable_learner_api": 5, "relat": [5, 19], "discount": 5, "markov": 5, "decis": 5, "schedul": [5, 8, 11, 14, 19, 23], "intermediari": [5, 19], "linearli": 5, "interpol": [5, 19], "entri": [5, 16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "initial_valu": 5, "adam": 5, "c": 5, "piecewis": 5, "abov": [5, 16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "tor": 5, "configure_optimizer_for_modul": 5, "interv": 5, "norm": [5, 19], "l2": 5, "bia": [5, 16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "exce": 5, "sqrt": 5, "sum": [5, 46, 52, 54], "w0": 5, "w1": 5, "wn": 5, "global_norm": 5, "squar": 5, "v0": 5, "vm": 5, "j": [5, 16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "catalog": 5, "todo": [5, 43], "modelconfig": [5, 8, 11, 14, 23, 63, 65, 67, 69, 86, 100], "inflight": 5, "faulttolerantactormanag": 5, "experimen": 5, "larg": [5, 19], "risk": 5, "spill": 5, "inspect": 5, "headnod": 5, "dashboard": 5, "flight": 5, "learnerpipelin": 5, "pad": [5, 33], "update_from_dict": [5, 19], "modifi": [5, 16, 19, 33, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "deprec": [5, 7, 10, 13, 16, 19, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "random_polici": [5, 19], "randompolici": [5, 19], "style": [5, 19], "partialalgorithmconfigdict": [5, 19], "validate_train_batch_size_vs_rollout_fragment_length": [5, 19], "mismatch": [5, 19], "synchron": [5, 19], "product": [5, 19], "roughli": [5, 19], "ask": [5, 19], "ddppo": [5, 19], "reflect": 6, "storagecontext": [7, 10, 13, 22], "prefer": [7, 10, 13, 22], "By": [7, 10, 13, 22], "persist": [7, 10, 13, 16, 22, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "validate_save_restor": [7, 10, 13, 22], "mytrainableclass": [7, 10, 13, 22], "move": [7, 10, 13, 16, 22, 36, 37, 41, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 117, 119], "trainable1": [7, 10, 13, 22], "trainable2": [7, 10, 13, 22], "checkpoint_1": [7, 10, 13, 22], "checkpoint_2": [7, 10, 13, 22], "bad_exampl": [7, 10, 13, 22], "new_checkpoint_path": [7, 10, 13, 22], "my_checkpoint_fil": [7, 10, 13, 22], "autoencoderconfig": 7, "dataset_config": [8, 11, 14, 23], "optimizer_config": [8, 11, 14, 23], "criterion": [8, 11, 14, 23], "_loss": [8, 23], "criterion_config": [8, 11, 14, 23], "model_config": [8, 11, 14, 23, 59, 68, 76, 82, 100, 105], "batch_siz": [8, 11, 14, 23, 89, 92, 95], "128": [8, 11, 14, 65, 67, 69], "42": [8, 11, 14, 46, 52, 54], "data_split": [8, 11, 14, 23], "225": [8, 11, 14], "025": [8, 11, 14], "pin_memori": [8, 11, 14, 23], "learning_r": [8, 11, 14, 23], "0001": [8, 11, 14], "learning_rate_schedul": [8, 11, 14, 23], "_lrschedul": [8, 11, 14, 23], "learning_rate_scheduler_config": [8, 11, 14, 23], "trainableconfig": [8, 11, 14, 22, 105], "num_cpu": [8, 11, 14, 23, 105], "uniniti": [8, 11, 14, 23], "randomli": [8, 11, 14, 23, 36, 37], "three": [8, 11, 14, 23], "page": [8, 11, 14, 23, 122], "lock": [8, 11, 14, 23], "faster": [8, 11, 14, 23, 36, 37, 43], "transfer": [8, 11, 14, 23], "uniti": [8, 11, 14, 23], "revis": [8, 11, 14, 23], "chessevaluationconfig": 10, "modeldistillconfig": 13, "distill_criterion": 14, "distill_criterion_config": 14, "parent_model": 14, "parent_model_config": 14, "parent_model_param_dir": 14, "train_on_teacher_onli": 14, "size_averag": 16, "ignore_index": 16, "reduc": 16, "reduct": 16, "label_smooth": 16, "class_index": 16, "both": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "scriptmodul": [16, 62, 64, 73, 74, 79, 80, 81, 85], "fn": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "recurs": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "submodul": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "children": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "init": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "doc": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "no_grad": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "init_weight": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "m": [16, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "linear": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "fill_": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "net": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "sequenti": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "in_featur": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "out_featur": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "requires_grad": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "bfloat16": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "cast": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "datatyp": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "direct": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "member": [16, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "xdoctest": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "skip": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "undefin": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "buf": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "20l": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "1l": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "5l": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "associ": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "live": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "doubl": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "document": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "dropout": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "batchnorm": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "grad": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "comparison": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "sever": [16, 36, 37, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "similar": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "mechan": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "confus": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "extra_repr": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "represent": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "To": [16, 36, 37, 43, 50, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 102, 119], "line": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "accept": [16, 41, 49, 50, 51, 53, 55, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "target": [16, 19, 28, 29, 30, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "although": [16, 62, 64, 73, 74, 79, 80, 81, 85, 119], "recip": [16, 62, 64, 73, 74, 79, 80, 81, 85, 119], "afterward": [16, 62, 64, 73, 74, 79, 80, 81, 85, 119], "former": [16, 62, 64, 73, 74, 79, 80, 81, 85, 119], "care": [16, 62, 64, 73, 74, 79, 80, 81, 85, 119], "hook": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "get_buff": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "docstr": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "get_submodul": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "explan": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "correctli": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "referenc": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "attributeerror": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "invalid": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "resolv": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "get_extra_st": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "state_dict": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "set_extra_st": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "pickleabl": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "ensur": [16, 50, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "break": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "pickl": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "get_paramet": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "let": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "sai": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "net_b": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "net_c": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "conv": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "conv2d": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "33": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "kernel_s": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "stride": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "200": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "diagram": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "show": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "degre": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "named_modul": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "achiev": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "transit": [16, 50, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "half": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "ipu": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "load_state_dict": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "strict": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "descend": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "enforc": [16, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "missing_kei": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "miss": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "unexpected_kei": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "unexpect": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "namedtupl": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "runtimeerror": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "duplic": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "l": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "enumer": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "named_buff": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "prepend": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "running_var": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "named_children": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "conv4": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "conv5": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "memo": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "remove_dupl": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "named_paramet": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "param": [16, 19, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "register_backward_hook": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "removablehandl": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "favor": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "register_full_backward_hook": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "register_buff": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "consid": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "running_mean": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "alongsid": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "num_featur": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "register_forward_hook": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "inplac": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "register_forward_pre_hook": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "invok": [16, 32, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "unless": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "grad_input": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "grad_output": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "subsequ": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "technic": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "similarli": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "caller": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "register_load_state_dict_post_hook": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "post": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "incompatible_kei": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "modif": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "thrown": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "clearn": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "register_modul": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "alia": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "register_paramet": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "requires_grad_": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "autograd": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "finetun": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "gan": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "share_memori": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "share_memory_": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "destin": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "keep_var": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "shallow": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "howev": [16, 36, 37, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "pleas": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "design": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "ordereddict": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "compos": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "detach": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "dtype": [16, 36, 37, 43, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "non_block": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "memory_format": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "channels_last": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "Its": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "integr": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "unchang": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "tri": [16, 46, 52, 54, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "pin": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "desir": [16, 22, 36, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "4d": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "ignore_w": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "1913": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "3420": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "5113": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "2325": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "float64": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "torch_doctest_cuda1": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "gpu1": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "1914": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "5112": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "2324": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "float16": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "cdoubl": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "3741": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "2382": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "5593": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "4443": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "complex128": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "6122": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "1150": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "to_empti": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "dst_type": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "xpu": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "zero_grad": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 89, 92, 95, 119], "set_to_non": [16, 59, 62, 64, 66, 68, 73, 74, 76, 79, 80, 81, 82, 85, 119], "lr_schedul": 19, "use_crit": 19, "use_ga": 19, "use_kl_loss": 19, "kl_coeff": 19, "kl_target": 19, "mini_batch_size_per_learn": 19, "sgd_minibatch_s": 19, "num_sgd_it": 19, "shuffle_sequ": 19, "vf_loss_coeff": 19, "entropy_coeff": 19, "entropy_coeff_schedul": 19, "clip_param": 19, "vf_clip_param": 19, "vf_share_lay": 19, "critic": [19, 46, 52, 54], "baselin": 19, "gae": 19, "http": [19, 36, 37, 43, 46, 50, 52, 54], "arxiv": 19, "org": [19, 36, 37], "pdf": 19, "1506": 19, "02438": 19, "kl": 19, "coeffici": 19, "diverg": 19, "mini": 19, "elf": 19, "4000": 19, "400": 19, "travers": 19, "altogeth": 19, "50": 19, "10x5": 19, "outer": 19, "recommend": 19, "entropi": 19, "regular": 19, "decai": 19, "sensit": 19, "scale": 19, "supervis": [20, 22, 23, 34, 59, 68, 76, 82], "semant": [22, 23], "_config": 23, "govern": [23, 67], "label": [23, 36, 37, 43], "num_dim": [26, 27], "batch_idx": [26, 27, 28, 29, 30], "thereupon": 32, "activ": [32, 65, 66, 67, 69, 86, 105], "on_algorithm_init": 33, "algorithm": [33, 46, 52, 54, 59, 68, 76, 82, 89, 92, 95, 105], "on_checkpoint_load": 33, "on_create_polici": 33, "whenev": 33, "on_environment_cr": 33, "env_runn": 33, "specificallli": 33, "on_episode_cr": 33, "episodev2": 33, "base_env": 33, "baseenv": [33, 46, 52, 54], "env_index": 33, "yet": 33, "v2": [33, 89, 92, 95], "on_episode_start": 33, "commenc": 33, "On": 33, "about": [33, 117], "upcom": 33, "replac": 33, "underli": [33, 89, 92, 95], "get_sub_environ": 33, "on_episode_end": 33, "on_episode_step": 33, "on_evaluate_end": 33, "evaluation_metr": 33, "mutat": [33, 89, 92, 95], "on_evaluate_start": 33, "on_learn_on_batch": 33, "train_batch": [33, 89, 92, 95], "pad_batch_to_sequences_of_same_s": 33, "tf1": [33, 89, 92, 95], "due": 33, "fact": 33, "mistak": 33, "though": 33, "on_postprocess_trajectori": 33, "postprocessed_batch": [33, 89, 92, 95], "original_batch": 33, "postprocess_fn": 33, "unpostprocess": 33, "on_sample_end": 33, "on_sub_environment_cr": 33, "sub_environ": 33, "constructor": [33, 105], "on_train_result": 33, "on_workers_recr": 33, "worker_set": 33, "worker_id": 33, "is_evalu": 33, "question": 33, "snippet": 33, "mycallback": 33, "func": [33, 89, 92, 95], "arbitrari": [33, 36, 37, 43], "_custom_property_for_evalu": 33, "_custom_property_for_train": 33, "foreach_work": 33, "remote_worker_id": 33, "resid": [33, 89, 92], "dataset_dir": [36, 37, 43], "apply_deepchess_rul": [36, 37], "render_mod": [36, 37, 41, 46, 49, 50, 51, 52, 53, 55, 56], "liter": [36, 46, 63, 70, 71, 105], "human": [36, 41, 46, 49, 50, 51, 53, 55], "ansi": [36, 41, 46, 49, 50, 51, 53, 55], "rgb_arrai": [36, 41, 46, 49, 50, 51, 53, 55], "max_games_per_fil": [36, 37], "14000": [36, 37], "states_per_gam": [36, 37], "databas": [36, 37, 43, 46, 52, 54, 117], "board": [36, 37, 62, 66, 70], "portabl": 36, "notat": 36, "pgn": [36, 37, 43, 117], "pars": 36, "quickli": 36, "reprocess": [36, 37], "That": 36, "dictat": 36, "pettingzoo": [36, 50, 117], "deem": 36, "therein": [36, 37], "exclud": [36, 37], "drew": [36, 37], "captur": [36, 37, 41], "research": [36, 37], "paper": [36, 37, 81], "deepchess": [36, 37], "broken": [36, 37], "ram": [36, 37], "select": [36, 37, 50], "magnitud": [36, 37], "dest_dir": [36, 37, 43], "hard": [36, 37, 43], "drive": [36, 37, 43], "bottl": [36, 37, 43], "neck": [36, 37, 43], "better": [36, 37, 43], "creation": [36, 37, 43], "68b": [36, 37, 43], "5hour": [36, 37, 43], "create_databas": [36, 37, 43], "parser": [36, 37, 99, 100, 101, 102, 104, 105], "computerchess": [36, 37], "uk": [36, 37], "ccrl": [36, 37], "404": [36, 37], "html": [36, 37], "suggest": [36, 37], "draw": [36, 37], "mem_safe_val_and_offset_to_str": [36, 37, 43], "file_idx": [36, 37, 43], "beyond": [36, 37, 43], "rare": [36, 37, 43], "impact": [36, 37, 43], "percent": [36, 37, 43], "suppli": [36, 37, 43, 66, 100], "bandaid": [36, 37, 43], "multiprocess": [36, 37, 43], "partit": [36, 37, 43], "pack_sequ": [36, 37, 43], "seq": [36, 37, 43], "sequence_to_str": [36, 37, 43], "string_to_sequ": [36, 37, 43], "int32": [36, 37, 43], "strings_to_mem_safe_val_and_offset": [36, 37, 43], "unpack_sequ": [36, 37, 43], "offset": [36, 37, 43, 89, 92, 95], "static_partn": 37, "chessdata": [37, 117], "get_dynamic_random_idx_partn": 37, "loader": 37, "reload": 37, "get_static_random_idx_partn": 37, "drop_draw": 38, "screen_height": 41, "800": 41, "agent_it": [41, 49, 50, 51, 53, 55], "max_it": [41, 49, 50, 51, 53, 55], "9223372036854775808": [41, 49, 50, 51, 53, 55], "aeciter": [41, 49, 50, 51, 55], "agent_select": [41, 49, 50, 51, 53, 55], "close": [41, 46, 49, 50, 51, 52, 53, 54, 55], "subprocess": [41, 49, 50, 51, 53, 55], "connect": [41, 46, 49, 50, 51, 52, 53, 54, 55, 66, 67], "obstyp": [41, 46, 49, 50, 51, 52, 53, 54, 55], "cumul": [41, 49, 50, 51, 53, 55], "observation_to_fen": 41, "board_stat": 41, "visual": [41, 100, 104], "castl": 41, "displai": [41, 49, 50, 51, 53, 55], "outsid": [41, 49, 50, 51, 53, 55], "classic": [41, 49, 50, 51, 53, 55], "appropri": [41, 49, 50, 51, 53, 55, 66], "decentr": [41, 49, 50, 51, 53, 55], "qmix": [41, 49, 50, 51, 53, 55], "max_labels_per_fil": 43, "800000": 43, "basi": 43, "serv": [43, 89, 92, 95], "problem": 43, "github": [43, 50], "com": [43, 50], "13246": 43, "issuecom": 43, "617140519": 43, "lieu": 43, "905703662": 43, "With": 43, "incorpor": [43, 59, 68, 76, 82], "action_space_contain": [46, 52, 54], "action_space_sampl": [46, 52, 54], "potenti": [46, 52, 54], "empti": [46, 52, 54, 89, 92, 95], "clean": [46, 52, 54], "get_agent_id": [46, 52, 54], "mirror_board_view": 46, "pet": [46, 119], "zoo": [46, 119], "np_random": [46, 52, 54], "_np_random": [46, 52, 54], "initialis": [46, 52, 54], "np": [46, 49, 50, 51, 52, 53, 54, 55, 59, 68, 76, 82], "observation_space_contain": [46, 52, 54], "observation_space_sampl": [46, 52, 54], "multi_agent_env": [46, 52, 54], "multiagentenv": [46, 52, 54], "mymultiagentenv": [46, 52, 54], "car_0": [46, 52, 54], "6": [46, 52, 54, 83], "car_1": [46, 52, 54], "traffic_light_1": [46, 52, 54], "special": [46, 52, 54], "__all__": [46, 52, 54], "action_dict": [46, 52, 54], "to_base_env": [46, 52, 54], "make_env": [46, 52, 54], "remote_env": [46, 52, 54], "async": [46, 52, 54], "send_act": [46, 52, 54], "thu": [46, 52, 54, 59, 68, 76, 82, 89, 92, 95], "unwrap": [46, 52, 54], "acttyp": [46, 52, 54], "with_agent_group": [46, 52, 54], "conveni": [46, 52, 54], "togeth": [46, 52, 54], "act": [46, 52, 54], "expos": [46, 52, 54], "individual_reward": [46, 52, 54], "leverag": [46, 52, 54], "q": [46, 52, 54], "mix": [46, 52, 54], "ungroup": [46, 52, 54], "grouped_env": [46, 52, 54], "group1": [46, 52, 54], "agent1": [46, 52, 54], "agent2": [46, 52, 54], "agent3": [46, 52, 54], "group2": [46, 52, 54], "agent4": [46, 52, 54], "agent5": [46, 52, 54], "aecenv": [49, 50, 51, 53, 54, 55], "actiontyp": [49, 50, 53, 55], "basewrapp": [49, 51, 53, 55], "bug": 50, "1176": 50, "patch": [50, 81], "suffic": 50, "player": 50, "pettingzooenv": 52, "aecorderenforcingiter": 53, "illegal_reward": 55, "num_output": [59, 68, 76, 82], "qlearnerconfig": 59, "modelrllib": [59, 68, 82, 105], "torchmodelv2": [59, 68, 76, 82, 89, 95], "mymodelclass": [59, 68, 76, 82], "_hidden_lay": [59, 68, 76, 82], "_logit": [59, 68, 76, 82], "_value_branch": [59, 68, 76, 82], "abstractcontextmanag": [59, 68, 76, 82], "contextmanag": [59, 68, 76, 82], "custom_loss": [59, 68, 76, 82], "policy_loss": [59, 68, 76, 82], "loss_input": [59, 68, 76, 82], "variabl": [59, 68, 76, 82, 89, 92, 95], "layer": [59, 66, 67, 68, 76, 81, 82], "runnabl": [59, 68, 76, 82], "scalar": [59, 68, 76, 82], "seq_len": [59, 68, 76, 82, 89, 92, 95], "union": [59, 76], "forwardref": [59, 76], "unpack": [59, 68, 76, 82], "__call__": [59, 68, 76, 82], "obs_flat": [59, 68, 76, 82], "eagerli": [59, 68, 76, 82], "symbol": [59, 68, 76, 82], "is_train": [59, 68, 76, 82], "eps_id": [59, 68, 76, 82], "get_initial_st": [59, 68, 76, 82, 89, 92, 95], "dimens": [59, 68, 76, 81, 82, 89, 92, 95], "1d": [59, 68, 76, 82], "mymodel": [59, 68, 76, 82], "model_out": [59, 68, 76, 82], "_value_out": [59, 68, 76, 82], "base_model": [59, 68, 76, 82], "recurr": [59, 68, 76, 82, 89, 92, 95], "cell_siz": [59, 68, 76, 82], "float32": [59, 68, 76, 82], "import_from_h5": [59, 68, 76, 82], "h5_file": [59, 68, 76, 82], "_": [59, 68, 76, 82], "rang": [59, 68, 76, 82], "is_time_major": [59, 68, 76, 82], "major": [59, 68, 76, 82], "txbx": [59, 68, 76, 82], "last_output": [59, 68, 76, 82], "key1": [59, 68, 76, 82], "metric1": [59, 68, 76, 82], "trainable_vari": [59, 68, 76, 82], "as_dict": [59, 68, 76, 82], "value_funct": [59, 68, 76, 82], "anyth": [59, 68, 76, 82], "num_lay": 60, "hidden_dim": [60, 65, 67, 69, 79, 80, 83, 86], "256": [60, 67, 79, 80, 83, 86], "modelrrlibconfig": [60, 83, 105], "input_sampl": [62, 64, 66, 85, 119], "deepchessalphabetaconfig": 62, "max_valu": 62, "alpha": 62, "beta": 62, "depth": [62, 81], "max_play": 62, "min_play": 62, "integ": 62, "min_valu": 62, "board_evalu": 63, "board_evaluator_config": 63, "board_evaluator_param_dir": 63, "max_depth": 63, "iterate_depth": 63, "move_sort": [63, 70, 71], "deepchessevaluatorconfig": 64, "feature_extractor": [65, 69], "feature_extractor_config": [65, 69], "feature_extractor_param_dir": [65, 69], "512": [65, 69], "252": [65, 69], "relu": [65, 67, 69, 83, 86], "batch_norm": [65, 67, 86], "deepchessfeconfig": 66, "modelautoencod": [66, 85], "featur": [66, 67, 89, 92, 95], "extractor": [66, 67], "matrix": 66, "chess": [66, 117, 119], "channel": 66, "Then": 66, "propag": 66, "aim": 66, "distil": 66, "dynam": [66, 100, 101, 102, 104, 105], "configr": 66, "decod": [66, 74, 85], "mirror": [66, 74, 85], "autoencod": [66, 74, 85], "intend": [66, 74, 85], "4096": 67, "1024": 67, "infrastructur": 67, "geatur": 67, "deepchessf": 67, "inner": 67, "deepchessrlconfig": 68, "latest_observ": 70, "turn_play": 70, "perspective_play": 70, "maxim": [70, 89, 92, 95], "minimax": 71, "search": [71, 122], "sort": 71, "hash": 71, "tabl": 71, "dummy_feature_map": [79, 80], "feature_map": [79, 80], "input_channel": 81, "patch_siz": 81, "embed_dim": 81, "num_head": 81, "window_s": 81, "mlp_ratio": 81, "attention_dropout": 81, "stochastic_depth_prob": 81, "num_class": 81, "norm_lay": 81, "downsample_lay": 81, "torchvis": [81, 83], "swin_transform": [81, 83], "patchmergingv2": [81, 83], "swin": 81, "transform": 81, "hierarch": 81, "vision": 81, "shift": 81, "embed": 81, "attent": 81, "ratio": 81, "mlp": 81, "dim": 81, "classif": 81, "swintransform": 81, "downsampl": 81, "patchmerg": 81, "tobenamedconfig": 82, "swin_input_channel": 83, "111": 83, "swin_patch_s": 83, "swin_embed_dim": 83, "32": 83, "swin_depth": 83, "swin_num_head": 83, "swin_window_s": 83, "swin_mlp_ratio": 83, "swin_dropout": 83, "swin_attention_dropout": 83, "swin_stochastic_depth_prob": 83, "swin_num_class": 83, "swin_norm_lay": 83, "swin_block": 83, "swintransformerblockv2": 83, "swin_downsample_lay": 83, "encoder_nhead": 83, "encoder_dim_feedforward": 83, "2048": 83, "encoder_dropout": 83, "encoder_activ": 83, "encoder_layer_norm_ep": 83, "1e": 83, "05": 83, "encoder_batch_first": 83, "encoder_norm_first": 83, "encoder_num_lay": 83, "encoder_norm": 83, "encoder_enable_nested_tensor": 83, "encoder_mask_check": 83, "embedding_dim": 83, "transformerchessfeconfig": 85, "num_encoder_lay": 86, "num_decoder_lay": 86, "nhead": 86, "pad_featur": 86, "max_seq_len": [89, 92, 95], "20": 89, "torchpolicyv2": [89, 92, 95], "torchpolici": [89, 92, 95], "lstm": [89, 92, 95], "action_distribution_fn": [89, 92, 95], "obs_batch": [89, 92, 95], "state_batch": [89, 92, 95], "actiondistribut": [89, 92, 95], "action_sampler_fn": [89, 92, 95], "likelihood": [89, 92, 95], "actorhandl": [89, 92, 95], "apply_gradi": [89, 92, 95], "compute_gradi": [89, 92, 95], "prev_action_batch": [89, 92, 95], "prev_reward_batch": [89, 92, 95], "info_batch": [89, 92, 95], "action_shap": [89, 92, 95], "state_out": [89, 92, 95], "tensortyp": [89, 92, 95], "state_s": [89, 92, 95], "f1": [89, 92, 95], "f2": [89, 92, 95], "pattern": [89, 92, 95], "abid": [89, 92, 95], "grad_info": [89, 92, 95], "compute_log_likelihood": [89, 92, 95], "prob": [89, 92, 95], "dist_class": [89, 92, 95], "actions_norm": [89, 92, 95], "in_train": [89, 92, 95], "forward_explor": [89, 92, 95], "altern": [89, 92, 95], "prev": [89, 92, 95], "export_checkpoint": [89, 92, 95], "filename_prefix": [89, 92, 95], "checkpoint_format": [89, 92, 95], "cloudpickl": [89, 92, 95], "policyst": [89, 92, 95], "msgpack": [89, 92, 95], "ppotorchpolici": [89, 92, 95], "torchscript": [89, 92, 95], "filenam": [89, 92, 95], "extra_action_out": [89, 92, 95], "action_dist": [89, 92, 95], "torchdistributionwrapp": [89, 92, 95], "dist": [89, 95], "3rd": [89, 95], "extra_compute_grad_fetch": [89, 92, 95], "extra_grad_process": [89, 92, 95], "_optim": [89, 92, 95], "eagertfpolicyv2": [89, 92, 95], "synamictfpolicyv2": [89, 92, 95], "get_batch_divisibility_req": [89, 92, 95], "divis": [89, 92, 95], "get_connector_metr": [89, 92, 95], "get_exploration_st": [89, 92, 95], "serializ": [89, 92, 95], "get_host": [89, 92, 95], "get_num_samples_loaded_into_buff": [89, 92, 95], "buffer_index": [89, 92, 95], "multigputowerstack": [89, 92, 95], "num_multi_gpu_tower_stack": [89, 92, 95], "get_sess": [89, 92, 95], "Not": [89, 92, 95], "get_tower_stat": [89, 92, 95], "stats_nam": [89, 92, 95], "tower_stat": [89, 92, 95], "assertionerror": [89, 92, 95], "import_model_from_h5": [89, 92, 95], "init_view_requir": [89, 92, 95], "is_recurr": [89, 92, 95], "sample_batch": [89, 92, 95], "learn_on_batch_from_replay_buff": [89, 92, 95], "replay_actor": [89, 92, 95], "replai": [89, 92, 95], "slice": [89, 92, 95], "preload": [89, 92, 95], "subsampl": [89, 92, 95], "extra_op": [89, 92, 95], "bulk": [89, 92, 95], "distr": [89, 92, 95], "make_model": [89, 92, 95], "make_model_and_action_dist": [89, 92, 95], "make_rl_modul": [89, 92, 95], "maybe_add_time_dimens": [89, 92, 95], "maybe_remove_time_dimens": [89, 92, 95], "num_state_tensor": [89, 92, 95], "kept": [89, 92, 95], "on_global_var_upd": [89, 92, 95], "global_var": [89, 92, 95], "broadcast": [89, 92, 95], "other_agent_batch": [89, 92, 95], "alter": [89, 92, 95], "reset_connector": [89, 92, 95], "env_id": [89, 92, 95], "restore_connector": [89, 92, 95], "stats_fn": [89, 92, 95], "statist": [89, 92, 95], "local_optim": 92, "proxim": 92, "policyconfig": [93, 96, 105], "hand": 95, "collectarg": 99, "abstract": 99, "extra_model_environment_context": 100, "complete_run": [100, 101, 102, 104, 105], "namespac": [101, 102], "abc": 101, "setup_fil": 105, "local_mod": 105, "training_on": 105, "policy_config": 105, "run_config": 105, "runconfig": 105, "boolean": 105, "wether": 105, "preset": 105, "server": 105, "shutdown": 105, "pytest": 106, "test_algorithm": 106, "test_measure_accuraci": 106, "tmpdir_factori": [108, 109, 110, 111], "pytestconfig": [108, 109, 110, 111], "inp": [113, 114, 115], "tgt": [113, 114, 115], "b_i": [113, 114, 115], "acc": 113, "prec": [114, 115], "test_full_observation_record": 117, "minimal_obs_game_data": 117, "remind": 117, "overrul": 117, "necessarili": 117, "ultim": 117, "drawn": 117, "53": 117, "dummyevalu": 119, "test_simulate_observation_0": 119, "confirm": 119, "align": 119}, "objects": {"": [[0, 0, 0, "-", "my_chess"], [106, 0, 0, "-", "tests"]], "my_chess": [[1, 0, 0, "-", "learner"], [97, 0, 0, "-", "scripts"]], "my_chess.learner": [[2, 0, 0, "-", "algorithms"], [31, 0, 0, "-", "callbacks"], [34, 0, 0, "-", "datasets"], [44, 0, 0, "-", "environments"], [57, 0, 0, "-", "models"], [87, 0, 0, "-", "policies"]], "my_chess.learner.algorithms": [[3, 0, 0, "-", "algorithm"], [6, 0, 0, "-", "autoencoder"], [9, 0, 0, "-", "chessevaluation"], [12, 0, 0, "-", "distill"], [15, 0, 0, "-", "loss"], [17, 0, 0, "-", "ppo_cust"], [20, 0, 0, "-", "trainable"], [25, 0, 0, "-", "util"]], "my_chess.learner.algorithms.algorithm": [[4, 1, 1, "", "Algorithm"], [5, 1, 1, "", "AlgorithmConfig"]], "my_chess.learner.algorithms.algorithm.Algorithm": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "add_module"], [4, 2, 1, "", "add_policy"], [4, 2, 1, "", "cleanup"], [4, 2, 1, "", "compute_actions"], [4, 2, 1, "", "compute_single_action"], [4, 2, 1, "", "default_resource_request"], [4, 2, 1, "", "evaluate"], [4, 2, 1, "", "export_model"], [4, 2, 1, "", "export_policy_checkpoint"], [4, 2, 1, "", "export_policy_model"], [4, 2, 1, "", "from_checkpoint"], [4, 2, 1, "", "from_state"], [4, 2, 1, "", "get_auto_filled_metrics"], [4, 2, 1, "", "get_config"], [4, 2, 1, "", "get_default_policy_class"], [4, 2, 1, "", "get_module"], [4, 2, 1, "", "get_policy"], [4, 2, 1, "", "get_weights"], [4, 2, 1, "", "import_model"], [4, 2, 1, "", "import_policy_model_from_h5"], [4, 3, 1, "", "iteration"], [4, 2, 1, "", "load_checkpoint"], [4, 2, 1, "", "log_result"], [4, 3, 1, "", "logdir"], [4, 2, 1, "", "merge_algorithm_configs"], [4, 2, 1, "", "remove_policy"], [4, 2, 1, "", "reset"], [4, 2, 1, "", "reset_config"], [4, 2, 1, "", "resource_help"], [4, 2, 1, "", "restore"], [4, 2, 1, "", "restore_workers"], [4, 2, 1, "", "save"], [4, 2, 1, "", "save_checkpoint"], [4, 2, 1, "", "set_weights"], [4, 2, 1, "", "setup"], [4, 2, 1, "", "step"], [4, 2, 1, "", "stop"], [4, 2, 1, "", "train"], [4, 2, 1, "", "train_buffered"], [4, 3, 1, "", "training_iteration"], [4, 2, 1, "", "training_step"], [4, 3, 1, "", "trial_id"], [4, 3, 1, "", "trial_name"], [4, 3, 1, "", "trial_resources"], [4, 2, 1, "", "validate_env"]], "my_chess.learner.algorithms.algorithm.AlgorithmConfig": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "build"], [5, 2, 1, "", "build_learner"], [5, 2, 1, "", "build_learner_group"], [5, 2, 1, "", "callbacks"], [5, 2, 1, "", "checkpointing"], [5, 2, 1, "", "copy"], [5, 2, 1, "", "debugging"], [5, 2, 1, "", "environment"], [5, 2, 1, "", "evaluation"], [5, 2, 1, "", "experimental"], [5, 2, 1, "", "exploration"], [5, 2, 1, "", "fault_tolerance"], [5, 2, 1, "", "framework"], [5, 2, 1, "", "freeze"], [5, 2, 1, "", "from_dict"], [5, 2, 1, "", "get"], [5, 2, 1, "", "get_config_for_module"], [5, 2, 1, "", "get_default_learner_class"], [5, 2, 1, "", "get_default_rl_module_spec"], [5, 2, 1, "", "get_evaluation_config_object"], [5, 2, 1, "", "get_marl_module_spec"], [5, 2, 1, "", "get_multi_agent_setup"], [5, 2, 1, "", "get_rollout_fragment_length"], [5, 2, 1, "", "get_torch_compile_worker_config"], [5, 3, 1, "", "is_atari"], [5, 2, 1, "", "is_multi_agent"], [5, 2, 1, "", "items"], [5, 2, 1, "", "keys"], [5, 3, 1, "", "learner_class"], [5, 2, 1, "", "multi_agent"], [5, 2, 1, "", "offline_data"], [5, 2, 1, "", "overrides"], [5, 2, 1, "", "pop"], [5, 2, 1, "", "python_environment"], [5, 2, 1, "", "reporting"], [5, 2, 1, "", "resources"], [5, 2, 1, "", "rl_module"], [5, 2, 1, "", "rollouts"], [5, 2, 1, "", "serialize"], [5, 2, 1, "", "to_dict"], [5, 2, 1, "", "training"], [5, 2, 1, "", "update_from_dict"], [5, 2, 1, "", "validate"], [5, 2, 1, "", "validate_train_batch_size_vs_rollout_fragment_length"], [5, 2, 1, "", "values"]], "my_chess.learner.algorithms.autoencoder": [[7, 1, 1, "", "AutoEncoder"], [8, 1, 1, "", "AutoEncoderConfig"]], "my_chess.learner.algorithms.autoencoder.AutoEncoder": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "cleanup"], [7, 2, 1, "", "default_resource_request"], [7, 2, 1, "", "export_model"], [7, 2, 1, "", "get_auto_filled_metrics"], [7, 2, 1, "", "get_config"], [7, 3, 1, "", "iteration"], [7, 2, 1, "", "load_checkpoint"], [7, 2, 1, "", "log_result"], [7, 3, 1, "", "logdir"], [7, 2, 1, "", "reset"], [7, 2, 1, "", "reset_config"], [7, 2, 1, "", "resource_help"], [7, 2, 1, "", "restore"], [7, 2, 1, "", "save"], [7, 2, 1, "", "save_checkpoint"], [7, 2, 1, "", "setup"], [7, 2, 1, "", "step"], [7, 2, 1, "", "stop"], [7, 2, 1, "", "train"], [7, 2, 1, "", "train_buffered"], [7, 3, 1, "", "training_iteration"], [7, 3, 1, "", "trial_id"], [7, 3, 1, "", "trial_name"], [7, 3, 1, "", "trial_resources"]], "my_chess.learner.algorithms.autoencoder.AutoEncoderConfig": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "to_dict"], [8, 2, 1, "", "update"]], "my_chess.learner.algorithms.chessevaluation": [[10, 1, 1, "", "ChessEvaluation"], [11, 1, 1, "", "ChessEvaluationConfig"]], "my_chess.learner.algorithms.chessevaluation.ChessEvaluation": [[10, 2, 1, "", "__init__"], [10, 2, 1, "", "cleanup"], [10, 2, 1, "", "default_resource_request"], [10, 2, 1, "", "export_model"], [10, 2, 1, "", "get_auto_filled_metrics"], [10, 2, 1, "", "get_config"], [10, 3, 1, "", "iteration"], [10, 2, 1, "", "load_checkpoint"], [10, 2, 1, "", "log_result"], [10, 3, 1, "", "logdir"], [10, 2, 1, "", "reset"], [10, 2, 1, "", "reset_config"], [10, 2, 1, "", "resource_help"], [10, 2, 1, "", "restore"], [10, 2, 1, "", "save"], [10, 2, 1, "", "save_checkpoint"], [10, 2, 1, "", "setup"], [10, 2, 1, "", "step"], [10, 2, 1, "", "stop"], [10, 2, 1, "", "train"], [10, 2, 1, "", "train_buffered"], [10, 3, 1, "", "training_iteration"], [10, 3, 1, "", "trial_id"], [10, 3, 1, "", "trial_name"], [10, 3, 1, "", "trial_resources"]], "my_chess.learner.algorithms.chessevaluation.ChessEvaluationConfig": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "to_dict"], [11, 2, 1, "", "update"]], "my_chess.learner.algorithms.distill": [[13, 1, 1, "", "ModelDistill"], [14, 1, 1, "", "ModelDistillConfig"]], "my_chess.learner.algorithms.distill.ModelDistill": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "cleanup"], [13, 2, 1, "", "default_resource_request"], [13, 2, 1, "", "export_model"], [13, 2, 1, "", "get_auto_filled_metrics"], [13, 2, 1, "", "get_config"], [13, 3, 1, "", "iteration"], [13, 2, 1, "", "load_checkpoint"], [13, 2, 1, "", "log_result"], [13, 3, 1, "", "logdir"], [13, 2, 1, "", "reset"], [13, 2, 1, "", "reset_config"], [13, 2, 1, "", "resource_help"], [13, 2, 1, "", "restore"], [13, 2, 1, "", "save"], [13, 2, 1, "", "save_checkpoint"], [13, 2, 1, "", "setup"], [13, 2, 1, "", "step"], [13, 2, 1, "", "stop"], [13, 2, 1, "", "train"], [13, 2, 1, "", "train_buffered"], [13, 3, 1, "", "training_iteration"], [13, 3, 1, "", "trial_id"], [13, 3, 1, "", "trial_name"], [13, 3, 1, "", "trial_resources"]], "my_chess.learner.algorithms.distill.ModelDistillConfig": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "to_dict"], [14, 2, 1, "", "update"]], "my_chess.learner.algorithms.loss": [[16, 1, 1, "", "CrossEntropyLoss"]], "my_chess.learner.algorithms.loss.CrossEntropyLoss": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "add_module"], [16, 2, 1, "", "apply"], [16, 2, 1, "", "bfloat16"], [16, 2, 1, "", "buffers"], [16, 2, 1, "", "children"], [16, 2, 1, "", "cpu"], [16, 2, 1, "", "cuda"], [16, 2, 1, "", "double"], [16, 2, 1, "", "eval"], [16, 2, 1, "", "extra_repr"], [16, 2, 1, "", "float"], [16, 2, 1, "", "forward"], [16, 2, 1, "", "get_buffer"], [16, 2, 1, "", "get_extra_state"], [16, 2, 1, "", "get_parameter"], [16, 2, 1, "", "get_submodule"], [16, 2, 1, "", "half"], [16, 2, 1, "", "ipu"], [16, 2, 1, "", "load_state_dict"], [16, 2, 1, "", "modules"], [16, 2, 1, "", "named_buffers"], [16, 2, 1, "", "named_children"], [16, 2, 1, "", "named_modules"], [16, 2, 1, "", "named_parameters"], [16, 2, 1, "", "parameters"], [16, 2, 1, "", "register_backward_hook"], [16, 2, 1, "", "register_buffer"], [16, 2, 1, "", "register_forward_hook"], [16, 2, 1, "", "register_forward_pre_hook"], [16, 2, 1, "", "register_full_backward_hook"], [16, 2, 1, "", "register_load_state_dict_post_hook"], [16, 2, 1, "", "register_module"], [16, 2, 1, "", "register_parameter"], [16, 2, 1, "", "requires_grad_"], [16, 2, 1, "", "set_extra_state"], [16, 2, 1, "", "share_memory"], [16, 2, 1, "", "state_dict"], [16, 2, 1, "", "to"], [16, 2, 1, "", "to_empty"], [16, 2, 1, "", "train"], [16, 2, 1, "", "type"], [16, 2, 1, "", "xpu"], [16, 2, 1, "", "zero_grad"]], "my_chess.learner.algorithms.ppo_cust": [[18, 1, 1, "", "PPO"], [19, 1, 1, "", "PPOConfig"]], "my_chess.learner.algorithms.ppo_cust.PPO": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "add_module"], [18, 2, 1, "", "add_policy"], [18, 2, 1, "", "cleanup"], [18, 2, 1, "", "compute_actions"], [18, 2, 1, "", "compute_single_action"], [18, 2, 1, "", "default_resource_request"], [18, 2, 1, "", "evaluate"], [18, 2, 1, "", "export_model"], [18, 2, 1, "", "export_policy_checkpoint"], [18, 2, 1, "", "export_policy_model"], [18, 2, 1, "", "from_checkpoint"], [18, 2, 1, "", "from_state"], [18, 2, 1, "", "get_auto_filled_metrics"], [18, 2, 1, "", "get_config"], [18, 2, 1, "", "get_default_policy_class"], [18, 2, 1, "", "get_module"], [18, 2, 1, "", "get_policy"], [18, 2, 1, "", "get_weights"], [18, 2, 1, "", "import_model"], [18, 2, 1, "", "import_policy_model_from_h5"], [18, 3, 1, "", "iteration"], [18, 2, 1, "", "load_checkpoint"], [18, 2, 1, "", "log_result"], [18, 3, 1, "", "logdir"], [18, 2, 1, "", "merge_algorithm_configs"], [18, 2, 1, "", "remove_policy"], [18, 2, 1, "", "reset"], [18, 2, 1, "", "reset_config"], [18, 2, 1, "", "resource_help"], [18, 2, 1, "", "restore"], [18, 2, 1, "", "restore_workers"], [18, 2, 1, "", "save"], [18, 2, 1, "", "save_checkpoint"], [18, 2, 1, "", "set_weights"], [18, 2, 1, "", "setup"], [18, 2, 1, "", "step"], [18, 2, 1, "", "stop"], [18, 2, 1, "", "train"], [18, 2, 1, "", "train_buffered"], [18, 3, 1, "", "training_iteration"], [18, 2, 1, "", "training_step"], [18, 3, 1, "", "trial_id"], [18, 3, 1, "", "trial_name"], [18, 3, 1, "", "trial_resources"], [18, 2, 1, "", "validate_env"]], "my_chess.learner.algorithms.ppo_cust.PPOConfig": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "build"], [19, 2, 1, "", "build_learner"], [19, 2, 1, "", "build_learner_group"], [19, 2, 1, "", "callbacks"], [19, 2, 1, "", "checkpointing"], [19, 2, 1, "", "copy"], [19, 2, 1, "", "debugging"], [19, 2, 1, "", "environment"], [19, 2, 1, "", "evaluation"], [19, 2, 1, "", "experimental"], [19, 2, 1, "", "exploration"], [19, 2, 1, "", "fault_tolerance"], [19, 2, 1, "", "framework"], [19, 2, 1, "", "freeze"], [19, 2, 1, "", "from_dict"], [19, 2, 1, "", "get"], [19, 2, 1, "", "get_config_for_module"], [19, 2, 1, "", "get_default_learner_class"], [19, 2, 1, "", "get_default_rl_module_spec"], [19, 2, 1, "", "get_evaluation_config_object"], [19, 2, 1, "", "get_marl_module_spec"], [19, 2, 1, "", "get_multi_agent_setup"], [19, 2, 1, "", "get_rollout_fragment_length"], [19, 2, 1, "", "get_torch_compile_worker_config"], [19, 3, 1, "", "is_atari"], [19, 2, 1, "", "is_multi_agent"], [19, 2, 1, "", "items"], [19, 2, 1, "", "keys"], [19, 3, 1, "", "learner_class"], [19, 2, 1, "", "multi_agent"], [19, 2, 1, "", "offline_data"], [19, 2, 1, "", "overrides"], [19, 2, 1, "", "pop"], [19, 2, 1, "", "python_environment"], [19, 2, 1, "", "reporting"], [19, 2, 1, "", "resources"], [19, 2, 1, "", "rl_module"], [19, 2, 1, "", "rollouts"], [19, 2, 1, "", "serialize"], [19, 2, 1, "", "to_dict"], [19, 2, 1, "", "training"], [19, 2, 1, "", "update_from_dict"], [19, 2, 1, "", "validate"], [19, 2, 1, "", "validate_train_batch_size_vs_rollout_fragment_length"], [19, 2, 1, "", "values"]], "my_chess.learner.algorithms.trainable": [[21, 1, 1, "", "SimpleCustomBatch"], [22, 1, 1, "", "Trainable"], [23, 1, 1, "", "TrainableConfig"], [24, 4, 1, "", "collate_wrapper"]], "my_chess.learner.algorithms.trainable.SimpleCustomBatch": [[21, 2, 1, "", "__init__"]], "my_chess.learner.algorithms.trainable.Trainable": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "cleanup"], [22, 2, 1, "", "default_resource_request"], [22, 2, 1, "", "export_model"], [22, 2, 1, "", "get_auto_filled_metrics"], [22, 2, 1, "", "get_config"], [22, 3, 1, "", "iteration"], [22, 2, 1, "", "load_checkpoint"], [22, 2, 1, "", "log_result"], [22, 3, 1, "", "logdir"], [22, 2, 1, "", "reset"], [22, 2, 1, "", "reset_config"], [22, 2, 1, "", "resource_help"], [22, 2, 1, "", "restore"], [22, 2, 1, "", "save"], [22, 2, 1, "", "save_checkpoint"], [22, 2, 1, "", "setup"], [22, 2, 1, "", "step"], [22, 2, 1, "", "stop"], [22, 2, 1, "", "train"], [22, 2, 1, "", "train_buffered"], [22, 3, 1, "", "training_iteration"], [22, 3, 1, "", "trial_id"], [22, 3, 1, "", "trial_name"], [22, 3, 1, "", "trial_resources"]], "my_chess.learner.algorithms.trainable.TrainableConfig": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "to_dict"], [23, 2, 1, "", "update"]], "my_chess.learner.algorithms.util": [[26, 4, 1, "", "average"], [27, 4, 1, "", "determine_sum_dimensions"], [28, 4, 1, "", "measure_accuracy"], [29, 4, 1, "", "measure_precision"], [30, 4, 1, "", "measure_recall"]], "my_chess.learner.callbacks": [[32, 0, 0, "-", "callbacks"]], "my_chess.learner.callbacks.callbacks": [[33, 1, 1, "", "SelfPlayCallback"]], "my_chess.learner.callbacks.callbacks.SelfPlayCallback": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "on_algorithm_init"], [33, 2, 1, "", "on_checkpoint_loaded"], [33, 2, 1, "", "on_create_policy"], [33, 2, 1, "", "on_environment_created"], [33, 2, 1, "", "on_episode_created"], [33, 2, 1, "", "on_episode_end"], [33, 2, 1, "", "on_episode_start"], [33, 2, 1, "", "on_episode_step"], [33, 2, 1, "", "on_evaluate_end"], [33, 2, 1, "", "on_evaluate_start"], [33, 2, 1, "", "on_learn_on_batch"], [33, 2, 1, "", "on_postprocess_trajectory"], [33, 2, 1, "", "on_sample_end"], [33, 2, 1, "", "on_sub_environment_created"], [33, 2, 1, "", "on_train_result"], [33, 2, 1, "", "on_workers_recreated"]], "my_chess.learner.datasets": [[35, 0, 0, "-", "chess"], [42, 0, 0, "-", "dataset"]], "my_chess.learner.datasets.chess": [[36, 1, 1, "", "ChessData"], [37, 1, 1, "", "ChessDataWinLossPairs"], [38, 1, 1, "", "PGNGamesItr"], [39, 1, 1, "", "SystemSemaphore"], [40, 4, 1, "", "env"], [41, 1, 1, "", "raw_env"]], "my_chess.learner.datasets.chess.ChessData": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "copy"], [36, 2, 1, "", "create_database"], [36, 2, 1, "", "mem_safe_val_and_offset_to_string"], [36, 2, 1, "", "pack_sequences"], [36, 2, 1, "", "sequence_to_string"], [36, 2, 1, "", "string_to_sequence"], [36, 2, 1, "", "strings_to_mem_safe_val_and_offset"], [36, 2, 1, "", "unpack_sequence"]], "my_chess.learner.datasets.chess.ChessDataWinLossPairs": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "copy"], [37, 2, 1, "", "create_database"], [37, 2, 1, "", "get_dynamic_random_idx_partners"], [37, 2, 1, "", "get_static_random_idx_partners"], [37, 2, 1, "", "mem_safe_val_and_offset_to_string"], [37, 2, 1, "", "pack_sequences"], [37, 2, 1, "", "sequence_to_string"], [37, 2, 1, "", "string_to_sequence"], [37, 2, 1, "", "strings_to_mem_safe_val_and_offset"], [37, 2, 1, "", "unpack_sequence"]], "my_chess.learner.datasets.chess.PGNGamesItr": [[38, 2, 1, "", "__init__"]], "my_chess.learner.datasets.chess.SystemSemaphore": [[39, 2, 1, "", "__init__"]], "my_chess.learner.datasets.chess.raw_env": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "action_space"], [41, 2, 1, "", "agent_iter"], [41, 2, 1, "", "close"], [41, 2, 1, "", "last"], [41, 2, 1, "", "observation_space"], [41, 2, 1, "", "observation_to_fen"], [41, 2, 1, "", "observe"], [41, 2, 1, "", "render"], [41, 2, 1, "", "reset"], [41, 2, 1, "", "state"], [41, 2, 1, "", "step"]], "my_chess.learner.datasets.dataset": [[43, 1, 1, "", "Dataset"]], "my_chess.learner.datasets.dataset.Dataset": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "copy"], [43, 2, 1, "", "create_database"], [43, 2, 1, "", "mem_safe_val_and_offset_to_string"], [43, 2, 1, "", "pack_sequences"], [43, 2, 1, "", "sequence_to_string"], [43, 2, 1, "", "string_to_sequence"], [43, 2, 1, "", "strings_to_mem_safe_val_and_offset"], [43, 2, 1, "", "unpack_sequence"]], "my_chess.learner.environments": [[45, 0, 0, "-", "chess"], [48, 0, 0, "-", "environment"]], "my_chess.learner.environments.chess": [[46, 1, 1, "", "Chess"], [47, 4, 1, "", "chess_env"]], "my_chess.learner.environments.chess.Chess": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "action_space_contains"], [46, 2, 1, "", "action_space_sample"], [46, 2, 1, "", "close"], [46, 2, 1, "", "get_agent_ids"], [46, 2, 1, "", "mirror_board_view"], [46, 3, 1, "", "np_random"], [46, 2, 1, "", "observation_space_contains"], [46, 2, 1, "", "observation_space_sample"], [46, 2, 1, "", "render"], [46, 2, 1, "", "reset"], [46, 2, 1, "", "step"], [46, 2, 1, "", "to_base_env"], [46, 3, 1, "", "unwrapped"], [46, 2, 1, "", "with_agent_groups"]], "my_chess.learner.environments.environment": [[49, 1, 1, "", "AssertOutOfBoundsWrapper"], [50, 1, 1, "", "BaseWrapper"], [51, 1, 1, "", "ClipOutOfBoundsWrapper"], [52, 1, 1, "", "Environment"], [53, 1, 1, "", "OrderEnforcingWrapper"], [54, 1, 1, "", "PettingZooEnv"], [55, 1, 1, "", "TerminateIllegalWrapper"], [56, 4, 1, "", "env_creator"]], "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "action_space"], [49, 2, 1, "", "agent_iter"], [49, 2, 1, "", "close"], [49, 2, 1, "", "last"], [49, 2, 1, "", "observation_space"], [49, 2, 1, "", "observe"], [49, 2, 1, "", "render"], [49, 2, 1, "", "reset"], [49, 2, 1, "", "state"], [49, 2, 1, "", "step"]], "my_chess.learner.environments.environment.BaseWrapper": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "action_space"], [50, 2, 1, "", "agent_iter"], [50, 2, 1, "", "close"], [50, 2, 1, "", "last"], [50, 2, 1, "", "observation_space"], [50, 2, 1, "", "observe"], [50, 2, 1, "", "render"], [50, 2, 1, "", "reset"], [50, 2, 1, "", "state"], [50, 2, 1, "", "step"]], "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "action_space"], [51, 2, 1, "", "agent_iter"], [51, 2, 1, "", "close"], [51, 2, 1, "", "last"], [51, 2, 1, "", "observation_space"], [51, 2, 1, "", "observe"], [51, 2, 1, "", "render"], [51, 2, 1, "", "reset"], [51, 2, 1, "", "state"], [51, 2, 1, "", "step"]], "my_chess.learner.environments.environment.Environment": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "action_space_contains"], [52, 2, 1, "", "action_space_sample"], [52, 2, 1, "", "close"], [52, 2, 1, "", "get_agent_ids"], [52, 3, 1, "", "np_random"], [52, 2, 1, "", "observation_space_contains"], [52, 2, 1, "", "observation_space_sample"], [52, 2, 1, "", "render"], [52, 2, 1, "", "reset"], [52, 2, 1, "", "step"], [52, 2, 1, "", "to_base_env"], [52, 3, 1, "", "unwrapped"], [52, 2, 1, "", "with_agent_groups"]], "my_chess.learner.environments.environment.OrderEnforcingWrapper": [[53, 2, 1, "", "__init__"], [53, 2, 1, "", "action_space"], [53, 2, 1, "", "agent_iter"], [53, 2, 1, "", "close"], [53, 2, 1, "", "last"], [53, 2, 1, "", "observation_space"], [53, 2, 1, "", "observe"], [53, 2, 1, "", "render"], [53, 2, 1, "", "reset"], [53, 2, 1, "", "state"], [53, 2, 1, "", "step"]], "my_chess.learner.environments.environment.PettingZooEnv": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "action_space_contains"], [54, 2, 1, "", "action_space_sample"], [54, 2, 1, "", "close"], [54, 2, 1, "", "get_agent_ids"], [54, 3, 1, "", "np_random"], [54, 2, 1, "", "observation_space_contains"], [54, 2, 1, "", "observation_space_sample"], [54, 2, 1, "", "render"], [54, 2, 1, "", "reset"], [54, 2, 1, "", "step"], [54, 2, 1, "", "to_base_env"], [54, 3, 1, "", "unwrapped"], [54, 2, 1, "", "with_agent_groups"]], "my_chess.learner.environments.environment.TerminateIllegalWrapper": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "action_space"], [55, 2, 1, "", "agent_iter"], [55, 2, 1, "", "close"], [55, 2, 1, "", "last"], [55, 2, 1, "", "observation_space"], [55, 2, 1, "", "observe"], [55, 2, 1, "", "render"], [55, 2, 1, "", "reset"], [55, 2, 1, "", "state"], [55, 2, 1, "", "step"]], "my_chess.learner.models": [[58, 0, 0, "-", "Qlearner"], [61, 0, 0, "-", "deepchess"], [72, 0, 0, "-", "model"], [78, 0, 0, "-", "tobenamed"], [84, 0, 0, "-", "transformerchess"]], "my_chess.learner.models.Qlearner": [[59, 1, 1, "", "QLearner"], [60, 1, 1, "", "QLearnerConfig"]], "my_chess.learner.models.Qlearner.QLearner": [[59, 2, 1, "", "__init__"], [59, 2, 1, "", "add_module"], [59, 2, 1, "", "apply"], [59, 2, 1, "", "bfloat16"], [59, 2, 1, "", "buffers"], [59, 2, 1, "", "children"], [59, 2, 1, "", "context"], [59, 2, 1, "", "cpu"], [59, 2, 1, "", "cuda"], [59, 2, 1, "", "custom_loss"], [59, 2, 1, "", "double"], [59, 2, 1, "", "eval"], [59, 2, 1, "", "extra_repr"], [59, 2, 1, "", "float"], [59, 2, 1, "", "forward"], [59, 2, 1, "", "get_buffer"], [59, 2, 1, "", "get_extra_state"], [59, 2, 1, "", "get_initial_state"], [59, 2, 1, "", "get_parameter"], [59, 2, 1, "", "get_submodule"], [59, 2, 1, "", "half"], [59, 2, 1, "", "import_from_h5"], [59, 2, 1, "", "ipu"], [59, 2, 1, "", "is_time_major"], [59, 2, 1, "", "last_output"], [59, 2, 1, "", "load_state_dict"], [59, 2, 1, "", "metrics"], [59, 2, 1, "", "modules"], [59, 2, 1, "", "named_buffers"], [59, 2, 1, "", "named_children"], [59, 2, 1, "", "named_modules"], [59, 2, 1, "", "named_parameters"], [59, 2, 1, "", "parameters"], [59, 2, 1, "", "register_backward_hook"], [59, 2, 1, "", "register_buffer"], [59, 2, 1, "", "register_forward_hook"], [59, 2, 1, "", "register_forward_pre_hook"], [59, 2, 1, "", "register_full_backward_hook"], [59, 2, 1, "", "register_load_state_dict_post_hook"], [59, 2, 1, "", "register_module"], [59, 2, 1, "", "register_parameter"], [59, 2, 1, "", "requires_grad_"], [59, 2, 1, "", "set_extra_state"], [59, 2, 1, "", "share_memory"], [59, 2, 1, "", "state_dict"], [59, 2, 1, "", "to"], [59, 2, 1, "", "to_empty"], [59, 2, 1, "", "train"], [59, 2, 1, "", "trainable_variables"], [59, 2, 1, "", "type"], [59, 2, 1, "", "value_function"], [59, 2, 1, "", "variables"], [59, 2, 1, "", "xpu"], [59, 2, 1, "", "zero_grad"]], "my_chess.learner.models.Qlearner.QLearnerConfig": [[60, 2, 1, "", "__init__"]], "my_chess.learner.models.deepchess": [[62, 1, 1, "", "DeepChessAlphaBeta"], [63, 1, 1, "", "DeepChessAlphaBetaConfig"], [64, 1, 1, "", "DeepChessEvaluator"], [65, 1, 1, "", "DeepChessEvaluatorConfig"], [66, 1, 1, "", "DeepChessFE"], [67, 1, 1, "", "DeepChessFEConfig"], [68, 1, 1, "", "DeepChessRL"], [69, 1, 1, "", "DeepChessRLConfig"], [70, 1, 1, "", "NextPositions"], [71, 1, 1, "", "NextPositionsGenerator"]], "my_chess.learner.models.deepchess.DeepChessAlphaBeta": [[62, 2, 1, "", "__init__"], [62, 2, 1, "", "add_module"], [62, 2, 1, "", "apply"], [62, 2, 1, "", "bfloat16"], [62, 2, 1, "", "buffers"], [62, 2, 1, "", "children"], [62, 2, 1, "", "cpu"], [62, 2, 1, "", "cuda"], [62, 2, 1, "", "double"], [62, 2, 1, "", "eval"], [62, 2, 1, "", "extra_repr"], [62, 2, 1, "", "float"], [62, 2, 1, "", "forward"], [62, 2, 1, "", "get_buffer"], [62, 2, 1, "", "get_extra_state"], [62, 2, 1, "", "get_parameter"], [62, 2, 1, "", "get_submodule"], [62, 2, 1, "", "half"], [62, 2, 1, "", "ipu"], [62, 2, 1, "", "load_state_dict"], [62, 2, 1, "", "max_value"], [62, 2, 1, "", "min_value"], [62, 2, 1, "", "modules"], [62, 2, 1, "", "named_buffers"], [62, 2, 1, "", "named_children"], [62, 2, 1, "", "named_modules"], [62, 2, 1, "", "named_parameters"], [62, 2, 1, "", "parameters"], [62, 2, 1, "", "register_backward_hook"], [62, 2, 1, "", "register_buffer"], [62, 2, 1, "", "register_forward_hook"], [62, 2, 1, "", "register_forward_pre_hook"], [62, 2, 1, "", "register_full_backward_hook"], [62, 2, 1, "", "register_load_state_dict_post_hook"], [62, 2, 1, "", "register_module"], [62, 2, 1, "", "register_parameter"], [62, 2, 1, "", "requires_grad_"], [62, 2, 1, "", "set_extra_state"], [62, 2, 1, "", "share_memory"], [62, 2, 1, "", "state_dict"], [62, 2, 1, "", "to"], [62, 2, 1, "", "to_empty"], [62, 2, 1, "", "train"], [62, 2, 1, "", "type"], [62, 2, 1, "", "xpu"], [62, 2, 1, "", "zero_grad"]], "my_chess.learner.models.deepchess.DeepChessAlphaBetaConfig": [[63, 2, 1, "", "__init__"]], "my_chess.learner.models.deepchess.DeepChessEvaluator": [[64, 2, 1, "", "__init__"], [64, 2, 1, "", "add_module"], [64, 2, 1, "", "apply"], [64, 2, 1, "", "bfloat16"], [64, 2, 1, "", "buffers"], [64, 2, 1, "", "children"], [64, 2, 1, "", "cpu"], [64, 2, 1, "", "cuda"], [64, 2, 1, "", "double"], [64, 2, 1, "", "eval"], [64, 2, 1, "", "extra_repr"], [64, 2, 1, "", "float"], [64, 2, 1, "", "forward"], [64, 2, 1, "", "get_buffer"], [64, 2, 1, "", "get_extra_state"], [64, 2, 1, "", "get_parameter"], [64, 2, 1, "", "get_submodule"], [64, 2, 1, "", "half"], [64, 2, 1, "", "ipu"], [64, 2, 1, "", "load_state_dict"], [64, 2, 1, "", "modules"], [64, 2, 1, "", "named_buffers"], [64, 2, 1, "", "named_children"], [64, 2, 1, "", "named_modules"], [64, 2, 1, "", "named_parameters"], [64, 2, 1, "", "parameters"], [64, 2, 1, "", "register_backward_hook"], [64, 2, 1, "", "register_buffer"], [64, 2, 1, "", "register_forward_hook"], [64, 2, 1, "", "register_forward_pre_hook"], [64, 2, 1, "", "register_full_backward_hook"], [64, 2, 1, "", "register_load_state_dict_post_hook"], [64, 2, 1, "", "register_module"], [64, 2, 1, "", "register_parameter"], [64, 2, 1, "", "requires_grad_"], [64, 2, 1, "", "set_extra_state"], [64, 2, 1, "", "share_memory"], [64, 2, 1, "", "state_dict"], [64, 2, 1, "", "to"], [64, 2, 1, "", "to_empty"], [64, 2, 1, "", "train"], [64, 2, 1, "", "type"], [64, 2, 1, "", "xpu"], [64, 2, 1, "", "zero_grad"]], "my_chess.learner.models.deepchess.DeepChessEvaluatorConfig": [[65, 2, 1, "", "__init__"]], "my_chess.learner.models.deepchess.DeepChessFE": [[66, 2, 1, "", "__init__"], [66, 2, 1, "", "add_module"], [66, 2, 1, "", "apply"], [66, 2, 1, "", "bfloat16"], [66, 2, 1, "", "buffers"], [66, 2, 1, "", "children"], [66, 2, 1, "", "cpu"], [66, 2, 1, "", "cuda"], [66, 2, 1, "", "decoder"], [66, 2, 1, "", "double"], [66, 2, 1, "", "eval"], [66, 2, 1, "", "extra_repr"], [66, 2, 1, "", "float"], [66, 2, 1, "", "forward"], [66, 2, 1, "", "get_buffer"], [66, 2, 1, "", "get_extra_state"], [66, 2, 1, "", "get_parameter"], [66, 2, 1, "", "get_submodule"], [66, 2, 1, "", "half"], [66, 2, 1, "", "ipu"], [66, 2, 1, "", "load_state_dict"], [66, 2, 1, "", "modules"], [66, 2, 1, "", "named_buffers"], [66, 2, 1, "", "named_children"], [66, 2, 1, "", "named_modules"], [66, 2, 1, "", "named_parameters"], [66, 2, 1, "", "parameters"], [66, 2, 1, "", "register_backward_hook"], [66, 2, 1, "", "register_buffer"], [66, 2, 1, "", "register_forward_hook"], [66, 2, 1, "", "register_forward_pre_hook"], [66, 2, 1, "", "register_full_backward_hook"], [66, 2, 1, "", "register_load_state_dict_post_hook"], [66, 2, 1, "", "register_module"], [66, 2, 1, "", "register_parameter"], [66, 2, 1, "", "requires_grad_"], [66, 2, 1, "", "set_extra_state"], [66, 2, 1, "", "share_memory"], [66, 2, 1, "", "state_dict"], [66, 2, 1, "", "to"], [66, 2, 1, "", "to_empty"], [66, 2, 1, "", "train"], [66, 2, 1, "", "type"], [66, 2, 1, "", "xpu"], [66, 2, 1, "", "zero_grad"]], "my_chess.learner.models.deepchess.DeepChessFEConfig": [[67, 2, 1, "", "__init__"]], "my_chess.learner.models.deepchess.DeepChessRL": [[68, 2, 1, "", "__init__"], [68, 2, 1, "", "add_module"], [68, 2, 1, "", "apply"], [68, 2, 1, "", "bfloat16"], [68, 2, 1, "", "buffers"], [68, 2, 1, "", "children"], [68, 2, 1, "", "context"], [68, 2, 1, "", "cpu"], [68, 2, 1, "", "cuda"], [68, 2, 1, "", "custom_loss"], [68, 2, 1, "", "double"], [68, 2, 1, "", "eval"], [68, 2, 1, "", "extra_repr"], [68, 2, 1, "", "float"], [68, 2, 1, "", "forward"], [68, 2, 1, "", "get_buffer"], [68, 2, 1, "", "get_extra_state"], [68, 2, 1, "", "get_initial_state"], [68, 2, 1, "", "get_parameter"], [68, 2, 1, "", "get_submodule"], [68, 2, 1, "", "half"], [68, 2, 1, "", "import_from_h5"], [68, 2, 1, "", "ipu"], [68, 2, 1, "", "is_time_major"], [68, 2, 1, "", "last_output"], [68, 2, 1, "", "load_state_dict"], [68, 2, 1, "", "metrics"], [68, 2, 1, "", "modules"], [68, 2, 1, "", "named_buffers"], [68, 2, 1, "", "named_children"], [68, 2, 1, "", "named_modules"], [68, 2, 1, "", "named_parameters"], [68, 2, 1, "", "parameters"], [68, 2, 1, "", "register_backward_hook"], [68, 2, 1, "", "register_buffer"], [68, 2, 1, "", "register_forward_hook"], [68, 2, 1, "", "register_forward_pre_hook"], [68, 2, 1, "", "register_full_backward_hook"], [68, 2, 1, "", "register_load_state_dict_post_hook"], [68, 2, 1, "", "register_module"], [68, 2, 1, "", "register_parameter"], [68, 2, 1, "", "requires_grad_"], [68, 2, 1, "", "set_extra_state"], [68, 2, 1, "", "share_memory"], [68, 2, 1, "", "state_dict"], [68, 2, 1, "", "to"], [68, 2, 1, "", "to_empty"], [68, 2, 1, "", "train"], [68, 2, 1, "", "trainable_variables"], [68, 2, 1, "", "type"], [68, 2, 1, "", "value_function"], [68, 2, 1, "", "variables"], [68, 2, 1, "", "xpu"], [68, 2, 1, "", "zero_grad"]], "my_chess.learner.models.deepchess.DeepChessRLConfig": [[69, 2, 1, "", "__init__"]], "my_chess.learner.models.deepchess.NextPositions": [[70, 2, 1, "", "__init__"]], "my_chess.learner.models.deepchess.NextPositionsGenerator": [[71, 2, 1, "", "__init__"]], "my_chess.learner.models.model": [[73, 1, 1, "", "Model"], [74, 1, 1, "", "ModelAutoEncodable"], [75, 1, 1, "", "ModelConfig"], [76, 1, 1, "", "ModelRLLIB"], [77, 1, 1, "", "ModelRRLIBConfig"]], "my_chess.learner.models.model.Model": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "add_module"], [73, 2, 1, "", "apply"], [73, 2, 1, "", "bfloat16"], [73, 2, 1, "", "buffers"], [73, 2, 1, "", "children"], [73, 2, 1, "", "cpu"], [73, 2, 1, "", "cuda"], [73, 2, 1, "", "double"], [73, 2, 1, "", "eval"], [73, 2, 1, "", "extra_repr"], [73, 2, 1, "", "float"], [73, 2, 1, "", "forward"], [73, 2, 1, "", "get_buffer"], [73, 2, 1, "", "get_extra_state"], [73, 2, 1, "", "get_parameter"], [73, 2, 1, "", "get_submodule"], [73, 2, 1, "", "half"], [73, 2, 1, "", "ipu"], [73, 2, 1, "", "load_state_dict"], [73, 2, 1, "", "modules"], [73, 2, 1, "", "named_buffers"], [73, 2, 1, "", "named_children"], [73, 2, 1, "", "named_modules"], [73, 2, 1, "", "named_parameters"], [73, 2, 1, "", "parameters"], [73, 2, 1, "", "register_backward_hook"], [73, 2, 1, "", "register_buffer"], [73, 2, 1, "", "register_forward_hook"], [73, 2, 1, "", "register_forward_pre_hook"], [73, 2, 1, "", "register_full_backward_hook"], [73, 2, 1, "", "register_load_state_dict_post_hook"], [73, 2, 1, "", "register_module"], [73, 2, 1, "", "register_parameter"], [73, 2, 1, "", "requires_grad_"], [73, 2, 1, "", "set_extra_state"], [73, 2, 1, "", "share_memory"], [73, 2, 1, "", "state_dict"], [73, 2, 1, "", "to"], [73, 2, 1, "", "to_empty"], [73, 2, 1, "", "train"], [73, 2, 1, "", "type"], [73, 2, 1, "", "xpu"], [73, 2, 1, "", "zero_grad"]], "my_chess.learner.models.model.ModelAutoEncodable": [[74, 2, 1, "", "__init__"], [74, 2, 1, "", "add_module"], [74, 2, 1, "", "apply"], [74, 2, 1, "", "bfloat16"], [74, 2, 1, "", "buffers"], [74, 2, 1, "", "children"], [74, 2, 1, "", "cpu"], [74, 2, 1, "", "cuda"], [74, 2, 1, "", "decoder"], [74, 2, 1, "", "double"], [74, 2, 1, "", "eval"], [74, 2, 1, "", "extra_repr"], [74, 2, 1, "", "float"], [74, 2, 1, "", "forward"], [74, 2, 1, "", "get_buffer"], [74, 2, 1, "", "get_extra_state"], [74, 2, 1, "", "get_parameter"], [74, 2, 1, "", "get_submodule"], [74, 2, 1, "", "half"], [74, 2, 1, "", "ipu"], [74, 2, 1, "", "load_state_dict"], [74, 2, 1, "", "modules"], [74, 2, 1, "", "named_buffers"], [74, 2, 1, "", "named_children"], [74, 2, 1, "", "named_modules"], [74, 2, 1, "", "named_parameters"], [74, 2, 1, "", "parameters"], [74, 2, 1, "", "register_backward_hook"], [74, 2, 1, "", "register_buffer"], [74, 2, 1, "", "register_forward_hook"], [74, 2, 1, "", "register_forward_pre_hook"], [74, 2, 1, "", "register_full_backward_hook"], [74, 2, 1, "", "register_load_state_dict_post_hook"], [74, 2, 1, "", "register_module"], [74, 2, 1, "", "register_parameter"], [74, 2, 1, "", "requires_grad_"], [74, 2, 1, "", "set_extra_state"], [74, 2, 1, "", "share_memory"], [74, 2, 1, "", "state_dict"], [74, 2, 1, "", "to"], [74, 2, 1, "", "to_empty"], [74, 2, 1, "", "train"], [74, 2, 1, "", "type"], [74, 2, 1, "", "xpu"], [74, 2, 1, "", "zero_grad"]], "my_chess.learner.models.model.ModelConfig": [[75, 2, 1, "", "__init__"]], "my_chess.learner.models.model.ModelRLLIB": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "add_module"], [76, 2, 1, "", "apply"], [76, 2, 1, "", "bfloat16"], [76, 2, 1, "", "buffers"], [76, 2, 1, "", "children"], [76, 2, 1, "", "context"], [76, 2, 1, "", "cpu"], [76, 2, 1, "", "cuda"], [76, 2, 1, "", "custom_loss"], [76, 2, 1, "", "double"], [76, 2, 1, "", "eval"], [76, 2, 1, "", "extra_repr"], [76, 2, 1, "", "float"], [76, 2, 1, "", "forward"], [76, 2, 1, "", "get_buffer"], [76, 2, 1, "", "get_extra_state"], [76, 2, 1, "", "get_initial_state"], [76, 2, 1, "", "get_parameter"], [76, 2, 1, "", "get_submodule"], [76, 2, 1, "", "half"], [76, 2, 1, "", "import_from_h5"], [76, 2, 1, "", "ipu"], [76, 2, 1, "", "is_time_major"], [76, 2, 1, "", "last_output"], [76, 2, 1, "", "load_state_dict"], [76, 2, 1, "", "metrics"], [76, 2, 1, "", "modules"], [76, 2, 1, "", "named_buffers"], [76, 2, 1, "", "named_children"], [76, 2, 1, "", "named_modules"], [76, 2, 1, "", "named_parameters"], [76, 2, 1, "", "parameters"], [76, 2, 1, "", "register_backward_hook"], [76, 2, 1, "", "register_buffer"], [76, 2, 1, "", "register_forward_hook"], [76, 2, 1, "", "register_forward_pre_hook"], [76, 2, 1, "", "register_full_backward_hook"], [76, 2, 1, "", "register_load_state_dict_post_hook"], [76, 2, 1, "", "register_module"], [76, 2, 1, "", "register_parameter"], [76, 2, 1, "", "requires_grad_"], [76, 2, 1, "", "set_extra_state"], [76, 2, 1, "", "share_memory"], [76, 2, 1, "", "state_dict"], [76, 2, 1, "", "to"], [76, 2, 1, "", "to_empty"], [76, 2, 1, "", "train"], [76, 2, 1, "", "trainable_variables"], [76, 2, 1, "", "type"], [76, 2, 1, "", "value_function"], [76, 2, 1, "", "variables"], [76, 2, 1, "", "xpu"], [76, 2, 1, "", "zero_grad"]], "my_chess.learner.models.model.ModelRRLIBConfig": [[77, 2, 1, "", "__init__"]], "my_chess.learner.models.tobenamed": [[79, 1, 1, "", "FeatureProjector"], [80, 1, 1, "", "PositionalEmbedder"], [81, 1, 1, "", "SwinFeatureExtractor"], [82, 1, 1, "", "ToBeNamed"], [83, 1, 1, "", "ToBeNamedConfig"]], "my_chess.learner.models.tobenamed.FeatureProjector": [[79, 2, 1, "", "__init__"], [79, 2, 1, "", "add_module"], [79, 2, 1, "", "apply"], [79, 2, 1, "", "bfloat16"], [79, 2, 1, "", "buffers"], [79, 2, 1, "", "children"], [79, 2, 1, "", "cpu"], [79, 2, 1, "", "cuda"], [79, 2, 1, "", "double"], [79, 2, 1, "", "eval"], [79, 2, 1, "", "extra_repr"], [79, 2, 1, "", "float"], [79, 2, 1, "", "forward"], [79, 2, 1, "", "get_buffer"], [79, 2, 1, "", "get_extra_state"], [79, 2, 1, "", "get_parameter"], [79, 2, 1, "", "get_submodule"], [79, 2, 1, "", "half"], [79, 2, 1, "", "ipu"], [79, 2, 1, "", "load_state_dict"], [79, 2, 1, "", "modules"], [79, 2, 1, "", "named_buffers"], [79, 2, 1, "", "named_children"], [79, 2, 1, "", "named_modules"], [79, 2, 1, "", "named_parameters"], [79, 2, 1, "", "parameters"], [79, 2, 1, "", "register_backward_hook"], [79, 2, 1, "", "register_buffer"], [79, 2, 1, "", "register_forward_hook"], [79, 2, 1, "", "register_forward_pre_hook"], [79, 2, 1, "", "register_full_backward_hook"], [79, 2, 1, "", "register_load_state_dict_post_hook"], [79, 2, 1, "", "register_module"], [79, 2, 1, "", "register_parameter"], [79, 2, 1, "", "requires_grad_"], [79, 2, 1, "", "set_extra_state"], [79, 2, 1, "", "share_memory"], [79, 2, 1, "", "state_dict"], [79, 2, 1, "", "to"], [79, 2, 1, "", "to_empty"], [79, 2, 1, "", "train"], [79, 2, 1, "", "type"], [79, 2, 1, "", "xpu"], [79, 2, 1, "", "zero_grad"]], "my_chess.learner.models.tobenamed.PositionalEmbedder": [[80, 2, 1, "", "__init__"], [80, 2, 1, "", "add_module"], [80, 2, 1, "", "apply"], [80, 2, 1, "", "bfloat16"], [80, 2, 1, "", "buffers"], [80, 2, 1, "", "children"], [80, 2, 1, "", "cpu"], [80, 2, 1, "", "cuda"], [80, 2, 1, "", "double"], [80, 2, 1, "", "eval"], [80, 2, 1, "", "extra_repr"], [80, 2, 1, "", "float"], [80, 2, 1, "", "forward"], [80, 2, 1, "", "get_buffer"], [80, 2, 1, "", "get_extra_state"], [80, 2, 1, "", "get_parameter"], [80, 2, 1, "", "get_submodule"], [80, 2, 1, "", "half"], [80, 2, 1, "", "ipu"], [80, 2, 1, "", "load_state_dict"], [80, 2, 1, "", "modules"], [80, 2, 1, "", "named_buffers"], [80, 2, 1, "", "named_children"], [80, 2, 1, "", "named_modules"], [80, 2, 1, "", "named_parameters"], [80, 2, 1, "", "parameters"], [80, 2, 1, "", "register_backward_hook"], [80, 2, 1, "", "register_buffer"], [80, 2, 1, "", "register_forward_hook"], [80, 2, 1, "", "register_forward_pre_hook"], [80, 2, 1, "", "register_full_backward_hook"], [80, 2, 1, "", "register_load_state_dict_post_hook"], [80, 2, 1, "", "register_module"], [80, 2, 1, "", "register_parameter"], [80, 2, 1, "", "requires_grad_"], [80, 2, 1, "", "set_extra_state"], [80, 2, 1, "", "share_memory"], [80, 2, 1, "", "state_dict"], [80, 2, 1, "", "to"], [80, 2, 1, "", "to_empty"], [80, 2, 1, "", "train"], [80, 2, 1, "", "type"], [80, 2, 1, "", "xpu"], [80, 2, 1, "", "zero_grad"]], "my_chess.learner.models.tobenamed.SwinFeatureExtractor": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "add_module"], [81, 2, 1, "", "apply"], [81, 2, 1, "", "bfloat16"], [81, 2, 1, "", "buffers"], [81, 2, 1, "", "children"], [81, 2, 1, "", "cpu"], [81, 2, 1, "", "cuda"], [81, 2, 1, "", "double"], [81, 2, 1, "", "eval"], [81, 2, 1, "", "extra_repr"], [81, 2, 1, "", "float"], [81, 2, 1, "", "forward"], [81, 2, 1, "", "get_buffer"], [81, 2, 1, "", "get_extra_state"], [81, 2, 1, "", "get_parameter"], [81, 2, 1, "", "get_submodule"], [81, 2, 1, "", "half"], [81, 2, 1, "", "ipu"], [81, 2, 1, "", "load_state_dict"], [81, 2, 1, "", "modules"], [81, 2, 1, "", "named_buffers"], [81, 2, 1, "", "named_children"], [81, 2, 1, "", "named_modules"], [81, 2, 1, "", "named_parameters"], [81, 2, 1, "", "parameters"], [81, 2, 1, "", "register_backward_hook"], [81, 2, 1, "", "register_buffer"], [81, 2, 1, "", "register_forward_hook"], [81, 2, 1, "", "register_forward_pre_hook"], [81, 2, 1, "", "register_full_backward_hook"], [81, 2, 1, "", "register_load_state_dict_post_hook"], [81, 2, 1, "", "register_module"], [81, 2, 1, "", "register_parameter"], [81, 2, 1, "", "requires_grad_"], [81, 2, 1, "", "set_extra_state"], [81, 2, 1, "", "share_memory"], [81, 2, 1, "", "state_dict"], [81, 2, 1, "", "to"], [81, 2, 1, "", "to_empty"], [81, 2, 1, "", "train"], [81, 2, 1, "", "type"], [81, 2, 1, "", "xpu"], [81, 2, 1, "", "zero_grad"]], "my_chess.learner.models.tobenamed.ToBeNamed": [[82, 2, 1, "", "__init__"], [82, 2, 1, "", "add_module"], [82, 2, 1, "", "apply"], [82, 2, 1, "", "bfloat16"], [82, 2, 1, "", "buffers"], [82, 2, 1, "", "children"], [82, 2, 1, "", "context"], [82, 2, 1, "", "cpu"], [82, 2, 1, "", "cuda"], [82, 2, 1, "", "custom_loss"], [82, 2, 1, "", "double"], [82, 2, 1, "", "eval"], [82, 2, 1, "", "extra_repr"], [82, 2, 1, "", "float"], [82, 2, 1, "", "forward"], [82, 2, 1, "", "get_buffer"], [82, 2, 1, "", "get_extra_state"], [82, 2, 1, "", "get_initial_state"], [82, 2, 1, "", "get_parameter"], [82, 2, 1, "", "get_submodule"], [82, 2, 1, "", "half"], [82, 2, 1, "", "import_from_h5"], [82, 2, 1, "", "ipu"], [82, 2, 1, "", "is_time_major"], [82, 2, 1, "", "last_output"], [82, 2, 1, "", "load_state_dict"], [82, 2, 1, "", "metrics"], [82, 2, 1, "", "modules"], [82, 2, 1, "", "named_buffers"], [82, 2, 1, "", "named_children"], [82, 2, 1, "", "named_modules"], [82, 2, 1, "", "named_parameters"], [82, 2, 1, "", "parameters"], [82, 2, 1, "", "register_backward_hook"], [82, 2, 1, "", "register_buffer"], [82, 2, 1, "", "register_forward_hook"], [82, 2, 1, "", "register_forward_pre_hook"], [82, 2, 1, "", "register_full_backward_hook"], [82, 2, 1, "", "register_load_state_dict_post_hook"], [82, 2, 1, "", "register_module"], [82, 2, 1, "", "register_parameter"], [82, 2, 1, "", "requires_grad_"], [82, 2, 1, "", "set_extra_state"], [82, 2, 1, "", "share_memory"], [82, 2, 1, "", "state_dict"], [82, 2, 1, "", "to"], [82, 2, 1, "", "to_empty"], [82, 2, 1, "", "train"], [82, 2, 1, "", "trainable_variables"], [82, 2, 1, "", "type"], [82, 2, 1, "", "value_function"], [82, 2, 1, "", "variables"], [82, 2, 1, "", "xpu"], [82, 2, 1, "", "zero_grad"]], "my_chess.learner.models.tobenamed.ToBeNamedConfig": [[83, 2, 1, "", "__init__"]], "my_chess.learner.models.transformerchess": [[85, 1, 1, "", "TransformerChessFE"], [86, 1, 1, "", "TransformerChessFEConfig"]], "my_chess.learner.models.transformerchess.TransformerChessFE": [[85, 2, 1, "", "__init__"], [85, 2, 1, "", "add_module"], [85, 2, 1, "", "apply"], [85, 2, 1, "", "bfloat16"], [85, 2, 1, "", "buffers"], [85, 2, 1, "", "children"], [85, 2, 1, "", "cpu"], [85, 2, 1, "", "cuda"], [85, 2, 1, "", "decoder"], [85, 2, 1, "", "double"], [85, 2, 1, "", "eval"], [85, 2, 1, "", "extra_repr"], [85, 2, 1, "", "float"], [85, 2, 1, "", "forward"], [85, 2, 1, "", "get_buffer"], [85, 2, 1, "", "get_extra_state"], [85, 2, 1, "", "get_parameter"], [85, 2, 1, "", "get_submodule"], [85, 2, 1, "", "half"], [85, 2, 1, "", "ipu"], [85, 2, 1, "", "load_state_dict"], [85, 2, 1, "", "modules"], [85, 2, 1, "", "named_buffers"], [85, 2, 1, "", "named_children"], [85, 2, 1, "", "named_modules"], [85, 2, 1, "", "named_parameters"], [85, 2, 1, "", "parameters"], [85, 2, 1, "", "register_backward_hook"], [85, 2, 1, "", "register_buffer"], [85, 2, 1, "", "register_forward_hook"], [85, 2, 1, "", "register_forward_pre_hook"], [85, 2, 1, "", "register_full_backward_hook"], [85, 2, 1, "", "register_load_state_dict_post_hook"], [85, 2, 1, "", "register_module"], [85, 2, 1, "", "register_parameter"], [85, 2, 1, "", "requires_grad_"], [85, 2, 1, "", "set_extra_state"], [85, 2, 1, "", "share_memory"], [85, 2, 1, "", "state_dict"], [85, 2, 1, "", "to"], [85, 2, 1, "", "to_empty"], [85, 2, 1, "", "train"], [85, 2, 1, "", "type"], [85, 2, 1, "", "xpu"], [85, 2, 1, "", "zero_grad"]], "my_chess.learner.models.transformerchess.TransformerChessFEConfig": [[86, 2, 1, "", "__init__"]], "my_chess.learner.policies": [[88, 0, 0, "-", "policy"], [91, 0, 0, "-", "ppo_cust"], [94, 0, 0, "-", "random"]], "my_chess.learner.policies.policy": [[89, 1, 1, "", "Policy"], [90, 1, 1, "", "PolicyConfig"]], "my_chess.learner.policies.policy.Policy": [[89, 2, 1, "", "__init__"], [89, 2, 1, "", "action_distribution_fn"], [89, 2, 1, "", "action_sampler_fn"], [89, 2, 1, "", "apply"], [89, 2, 1, "", "apply_gradients"], [89, 2, 1, "", "compute_actions"], [89, 2, 1, "", "compute_actions_from_input_dict"], [89, 2, 1, "", "compute_gradients"], [89, 2, 1, "", "compute_log_likelihoods"], [89, 2, 1, "", "compute_single_action"], [89, 2, 1, "", "export_checkpoint"], [89, 2, 1, "", "export_model"], [89, 2, 1, "", "extra_action_out"], [89, 2, 1, "", "extra_compute_grad_fetches"], [89, 2, 1, "", "extra_grad_process"], [89, 2, 1, "", "from_checkpoint"], [89, 2, 1, "", "from_state"], [89, 2, 1, "", "get_batch_divisibility_req"], [89, 2, 1, "", "get_connector_metrics"], [89, 2, 1, "", "get_exploration_state"], [89, 2, 1, "", "get_host"], [89, 2, 1, "", "get_initial_state"], [89, 2, 1, "", "get_num_samples_loaded_into_buffer"], [89, 2, 1, "", "get_session"], [89, 2, 1, "", "get_state"], [89, 2, 1, "", "get_tower_stats"], [89, 2, 1, "", "get_weights"], [89, 2, 1, "", "import_model_from_h5"], [89, 2, 1, "", "init_view_requirements"], [89, 2, 1, "", "is_recurrent"], [89, 2, 1, "", "learn_on_batch"], [89, 2, 1, "", "learn_on_batch_from_replay_buffer"], [89, 2, 1, "", "learn_on_loaded_batch"], [89, 2, 1, "", "load_batch_into_buffer"], [89, 2, 1, "", "loss"], [89, 2, 1, "", "make_model"], [89, 2, 1, "", "make_model_and_action_dist"], [89, 2, 1, "", "make_rl_module"], [89, 2, 1, "", "maybe_add_time_dimension"], [89, 2, 1, "", "maybe_remove_time_dimension"], [89, 2, 1, "", "num_state_tensors"], [89, 2, 1, "", "on_global_var_update"], [89, 2, 1, "", "optimizer"], [89, 2, 1, "", "postprocess_trajectory"], [89, 2, 1, "", "reset_connectors"], [89, 2, 1, "", "restore_connectors"], [89, 2, 1, "", "set_state"], [89, 2, 1, "", "set_weights"], [89, 2, 1, "", "stats_fn"]], "my_chess.learner.policies.policy.PolicyConfig": [[90, 2, 1, "", "__init__"]], "my_chess.learner.policies.ppo_cust": [[92, 1, 1, "", "PPOPolicy"], [93, 1, 1, "", "PPOPolicyConfig"]], "my_chess.learner.policies.ppo_cust.PPOPolicy": [[92, 2, 1, "", "__init__"], [92, 2, 1, "", "action_distribution_fn"], [92, 2, 1, "", "action_sampler_fn"], [92, 2, 1, "", "apply"], [92, 2, 1, "", "apply_gradients"], [92, 2, 1, "", "compute_actions"], [92, 2, 1, "", "compute_actions_from_input_dict"], [92, 2, 1, "", "compute_gradients"], [92, 2, 1, "", "compute_log_likelihoods"], [92, 2, 1, "", "compute_single_action"], [92, 2, 1, "", "export_checkpoint"], [92, 2, 1, "", "export_model"], [92, 2, 1, "", "extra_action_out"], [92, 2, 1, "", "extra_compute_grad_fetches"], [92, 2, 1, "", "extra_grad_process"], [92, 2, 1, "", "from_checkpoint"], [92, 2, 1, "", "from_state"], [92, 2, 1, "", "get_batch_divisibility_req"], [92, 2, 1, "", "get_connector_metrics"], [92, 2, 1, "", "get_exploration_state"], [92, 2, 1, "", "get_host"], [92, 2, 1, "", "get_initial_state"], [92, 2, 1, "", "get_num_samples_loaded_into_buffer"], [92, 2, 1, "", "get_session"], [92, 2, 1, "", "get_state"], [92, 2, 1, "", "get_tower_stats"], [92, 2, 1, "", "get_weights"], [92, 2, 1, "", "import_model_from_h5"], [92, 2, 1, "", "init_view_requirements"], [92, 2, 1, "", "is_recurrent"], [92, 2, 1, "", "learn_on_batch"], [92, 2, 1, "", "learn_on_batch_from_replay_buffer"], [92, 2, 1, "", "learn_on_loaded_batch"], [92, 2, 1, "", "load_batch_into_buffer"], [92, 2, 1, "", "loss"], [92, 2, 1, "", "make_model"], [92, 2, 1, "", "make_model_and_action_dist"], [92, 2, 1, "", "make_rl_module"], [92, 2, 1, "", "maybe_add_time_dimension"], [92, 2, 1, "", "maybe_remove_time_dimension"], [92, 2, 1, "", "num_state_tensors"], [92, 2, 1, "", "on_global_var_update"], [92, 2, 1, "", "optimizer"], [92, 2, 1, "", "postprocess_trajectory"], [92, 2, 1, "", "reset_connectors"], [92, 2, 1, "", "restore_connectors"], [92, 2, 1, "", "set_state"], [92, 2, 1, "", "set_weights"], [92, 2, 1, "", "stats_fn"]], "my_chess.learner.policies.ppo_cust.PPOPolicyConfig": [[93, 2, 1, "", "__init__"]], "my_chess.learner.policies.random": [[95, 1, 1, "", "RandomPolicy"], [96, 1, 1, "", "RandomPolicyConfig"]], "my_chess.learner.policies.random.RandomPolicy": [[95, 2, 1, "", "__init__"], [95, 2, 1, "", "action_distribution_fn"], [95, 2, 1, "", "action_sampler_fn"], [95, 2, 1, "", "apply"], [95, 2, 1, "", "apply_gradients"], [95, 2, 1, "", "compute_actions"], [95, 2, 1, "", "compute_actions_from_input_dict"], [95, 2, 1, "", "compute_gradients"], [95, 2, 1, "", "compute_log_likelihoods"], [95, 2, 1, "", "compute_single_action"], [95, 2, 1, "", "export_checkpoint"], [95, 2, 1, "", "export_model"], [95, 2, 1, "", "extra_action_out"], [95, 2, 1, "", "extra_compute_grad_fetches"], [95, 2, 1, "", "extra_grad_process"], [95, 2, 1, "", "from_checkpoint"], [95, 2, 1, "", "from_state"], [95, 2, 1, "", "get_batch_divisibility_req"], [95, 2, 1, "", "get_connector_metrics"], [95, 2, 1, "", "get_exploration_state"], [95, 2, 1, "", "get_host"], [95, 2, 1, "", "get_initial_state"], [95, 2, 1, "", "get_num_samples_loaded_into_buffer"], [95, 2, 1, "", "get_session"], [95, 2, 1, "", "get_state"], [95, 2, 1, "", "get_tower_stats"], [95, 2, 1, "", "get_weights"], [95, 2, 1, "", "import_model_from_h5"], [95, 2, 1, "", "init_view_requirements"], [95, 2, 1, "", "is_recurrent"], [95, 2, 1, "", "learn_on_batch"], [95, 2, 1, "", "learn_on_batch_from_replay_buffer"], [95, 2, 1, "", "learn_on_loaded_batch"], [95, 2, 1, "", "load_batch_into_buffer"], [95, 2, 1, "", "loss"], [95, 2, 1, "", "make_model"], [95, 2, 1, "", "make_model_and_action_dist"], [95, 2, 1, "", "make_rl_module"], [95, 2, 1, "", "maybe_add_time_dimension"], [95, 2, 1, "", "maybe_remove_time_dimension"], [95, 2, 1, "", "num_state_tensors"], [95, 2, 1, "", "on_global_var_update"], [95, 2, 1, "", "optimizer"], [95, 2, 1, "", "postprocess_trajectory"], [95, 2, 1, "", "reset_connectors"], [95, 2, 1, "", "restore_connectors"], [95, 2, 1, "", "set_state"], [95, 2, 1, "", "set_weights"], [95, 2, 1, "", "stats_fn"]], "my_chess.learner.policies.random.RandomPolicyConfig": [[96, 2, 1, "", "__init__"]], "my_chess.scripts": [[98, 0, 0, "-", "scripts"]], "my_chess.scripts.scripts": [[99, 1, 1, "", "ArgumentCollector"], [100, 1, 1, "", "HumanVsBot"], [101, 1, 1, "", "Script"], [102, 1, 1, "", "ScriptChooser"], [103, 1, 1, "", "Serve"], [104, 1, 1, "", "Test"], [105, 1, 1, "", "Train"]], "my_chess.scripts.scripts.ArgumentCollector": [[99, 2, 1, "", "__init__"], [99, 2, 1, "", "collectArgs"]], "my_chess.scripts.scripts.HumanVsBot": [[100, 2, 1, "", "__init__"], [100, 2, 1, "", "complete_run"], [100, 2, 1, "", "run"]], "my_chess.scripts.scripts.Script": [[101, 2, 1, "", "__init__"], [101, 2, 1, "", "complete_run"]], "my_chess.scripts.scripts.ScriptChooser": [[102, 2, 1, "", "__init__"], [102, 2, 1, "", "complete_run"], [102, 2, 1, "", "run"]], "my_chess.scripts.scripts.Serve": [[103, 2, 1, "", "__init__"]], "my_chess.scripts.scripts.Test": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "complete_run"], [104, 2, 1, "", "run"]], "my_chess.scripts.scripts.Train": [[105, 2, 1, "", "__init__"], [105, 2, 1, "", "complete_run"], [105, 2, 1, "", "run"]], "tests": [[107, 0, 0, "-", "conftest"], [112, 0, 0, "-", "test_algorithms"], [116, 0, 0, "-", "test_datasets"], [118, 0, 0, "-", "test_models"], [120, 0, 0, "-", "test_training"]], "tests.conftest": [[108, 4, 1, "", "all_draws_game_data"], [109, 4, 1, "", "full_data"], [110, 4, 1, "", "minimal_obs_game_data"], [111, 4, 1, "", "short_game_data"]], "tests.test_algorithms": [[113, 4, 1, "", "test_measure_accuracy"], [114, 4, 1, "", "test_measure_precision"], [115, 4, 1, "", "test_measure_recall"]], "tests.test_datasets": [[117, 1, 1, "", "TestChessData"]], "tests.test_datasets.TestChessData": [[117, 2, 1, "", "__init__"], [117, 2, 1, "", "test_full_observation_record"]], "tests.test_models": [[119, 1, 1, "", "TestDeepChessAlphaBeta"]], "tests.test_models.TestDeepChessAlphaBeta": [[119, 1, 1, "", "DummyEvaluator"], [119, 2, 1, "", "__init__"], [119, 2, 1, "", "test_simulate_observation_0"]], "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator": [[119, 2, 1, "", "add_module"], [119, 2, 1, "", "apply"], [119, 2, 1, "", "bfloat16"], [119, 2, 1, "", "buffers"], [119, 2, 1, "", "children"], [119, 2, 1, "", "cpu"], [119, 2, 1, "", "cuda"], [119, 2, 1, "", "double"], [119, 2, 1, "", "eval"], [119, 2, 1, "", "extra_repr"], [119, 2, 1, "", "float"], [119, 2, 1, "", "forward"], [119, 2, 1, "", "get_buffer"], [119, 2, 1, "", "get_extra_state"], [119, 2, 1, "", "get_parameter"], [119, 2, 1, "", "get_submodule"], [119, 2, 1, "", "half"], [119, 2, 1, "", "ipu"], [119, 2, 1, "", "load_state_dict"], [119, 2, 1, "", "modules"], [119, 2, 1, "", "named_buffers"], [119, 2, 1, "", "named_children"], [119, 2, 1, "", "named_modules"], [119, 2, 1, "", "named_parameters"], [119, 2, 1, "", "parameters"], [119, 2, 1, "", "register_backward_hook"], [119, 2, 1, "", "register_buffer"], [119, 2, 1, "", "register_forward_hook"], [119, 2, 1, "", "register_forward_pre_hook"], [119, 2, 1, "", "register_full_backward_hook"], [119, 2, 1, "", "register_load_state_dict_post_hook"], [119, 2, 1, "", "register_module"], [119, 2, 1, "", "register_parameter"], [119, 2, 1, "", "requires_grad_"], [119, 2, 1, "", "set_extra_state"], [119, 2, 1, "", "share_memory"], [119, 2, 1, "", "state_dict"], [119, 2, 1, "", "to"], [119, 2, 1, "", "to_empty"], [119, 2, 1, "", "train"], [119, 2, 1, "", "type"], [119, 2, 1, "", "xpu"], [119, 2, 1, "", "zero_grad"]], "tests.test_training": [[121, 4, 1, "", "test_crossentropyloss"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"my_chess": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "learner": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "algorithm": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "algorithmconfig": 5, "autoencod": [6, 7, 8], "autoencoderconfig": 8, "chessevalu": [9, 10, 11], "chessevaluationconfig": 11, "distil": [12, 13, 14], "modeldistil": 13, "modeldistillconfig": 14, "loss": [15, 16], "crossentropyloss": 16, "ppo_cust": [17, 18, 19, 91, 92, 93], "ppo": 18, "ppoconfig": 19, "trainabl": [20, 21, 22, 23, 24], "simplecustombatch": 21, "trainableconfig": 23, "collate_wrapp": 24, "util": [25, 26, 27, 28, 29, 30], "averag": 26, "determine_sum_dimens": 27, "measure_accuraci": 28, "measure_precis": 29, "measure_recal": 30, "callback": [31, 32, 33], "selfplaycallback": 33, "dataset": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "chess": [35, 36, 37, 38, 39, 40, 41, 45, 46, 47], "chessdata": 36, "chessdatawinlosspair": 37, "pgngamesitr": 38, "systemsemaphor": 39, "env": 40, "raw_env": 41, "environ": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "chess_env": 47, "assertoutofboundswrapp": 49, "basewrapp": 50, "clipoutofboundswrapp": 51, "orderenforcingwrapp": 53, "pettingzooenv": 54, "terminateillegalwrapp": 55, "env_creat": 56, "model": [57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "qlearner": [58, 59, 60], "qlearnerconfig": 60, "deepchess": [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "deepchessalphabeta": 62, "deepchessalphabetaconfig": 63, "deepchessevalu": 64, "deepchessevaluatorconfig": 65, "deepchessf": 66, "deepchessfeconfig": 67, "deepchessrl": 68, "deepchessrlconfig": 69, "nextposit": 70, "nextpositionsgener": 71, "modelautoencod": 74, "modelconfig": 75, "modelrllib": 76, "modelrrlibconfig": 77, "tobenam": [78, 79, 80, 81, 82, 83], "featureprojector": 79, "positionalembedd": 80, "swinfeatureextractor": 81, "tobenamedconfig": 83, "transformerchess": [84, 85, 86], "transformerchessf": 85, "transformerchessfeconfig": 86, "polici": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "policyconfig": 90, "ppopolici": 92, "ppopolicyconfig": 93, "random": [94, 95, 96], "randompolici": 95, "randompolicyconfig": 96, "script": [97, 98, 99, 100, 101, 102, 103, 104, 105], "argumentcollector": 99, "humanvsbot": 100, "scriptchoos": 102, "serv": 103, "test": [104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "train": 105, "conftest": [107, 108, 109, 110, 111], "all_draws_game_data": 108, "full_data": 109, "minimal_obs_game_data": 110, "short_game_data": 111, "test_algorithm": [112, 113, 114, 115], "test_measure_accuraci": 113, "test_measure_precis": 114, "test_measure_recal": 115, "test_dataset": [116, 117], "testchessdata": 117, "test_model": [118, 119], "testdeepchessalphabeta": 119, "test_train": [120, 121], "test_crossentropyloss": 121, "welcom": 122, "chessbot": 122, "": 122, "document": 122, "indic": 122, "tabl": 122}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"my_chess": [[0, "module-my_chess"]], "my_chess.learner": [[1, "module-my_chess.learner"]], "my_chess.learner.algorithms": [[2, "module-my_chess.learner.algorithms"]], "my_chess.learner.algorithms.algorithm": [[3, "module-my_chess.learner.algorithms.algorithm"]], "my_chess.learner.algorithms.algorithm.Algorithm": [[4, "my-chess-learner-algorithms-algorithm-algorithm"]], "my_chess.learner.algorithms.algorithm.AlgorithmConfig": [[5, "my-chess-learner-algorithms-algorithm-algorithmconfig"]], "my_chess.learner.algorithms.autoencoder": [[6, "module-my_chess.learner.algorithms.autoencoder"]], "my_chess.learner.algorithms.autoencoder.AutoEncoder": [[7, "my-chess-learner-algorithms-autoencoder-autoencoder"]], "my_chess.learner.algorithms.autoencoder.AutoEncoderConfig": [[8, "my-chess-learner-algorithms-autoencoder-autoencoderconfig"]], "my_chess.learner.algorithms.chessevaluation": [[9, "module-my_chess.learner.algorithms.chessevaluation"]], "my_chess.learner.algorithms.chessevaluation.ChessEvaluation": [[10, "my-chess-learner-algorithms-chessevaluation-chessevaluation"]], "my_chess.learner.algorithms.chessevaluation.ChessEvaluationConfig": [[11, "my-chess-learner-algorithms-chessevaluation-chessevaluationconfig"]], "my_chess.learner.algorithms.distill": [[12, "module-my_chess.learner.algorithms.distill"]], "my_chess.learner.algorithms.distill.ModelDistill": [[13, "my-chess-learner-algorithms-distill-modeldistill"]], "my_chess.learner.algorithms.distill.ModelDistillConfig": [[14, "my-chess-learner-algorithms-distill-modeldistillconfig"]], "my_chess.learner.algorithms.loss": [[15, "module-my_chess.learner.algorithms.loss"]], "my_chess.learner.algorithms.loss.CrossEntropyLoss": [[16, "my-chess-learner-algorithms-loss-crossentropyloss"]], "my_chess.learner.algorithms.ppo_cust": [[17, "module-my_chess.learner.algorithms.ppo_cust"]], "my_chess.learner.algorithms.ppo_cust.PPO": [[18, "my-chess-learner-algorithms-ppo-cust-ppo"]], "my_chess.learner.algorithms.ppo_cust.PPOConfig": [[19, "my-chess-learner-algorithms-ppo-cust-ppoconfig"]], "my_chess.learner.algorithms.trainable": [[20, "module-my_chess.learner.algorithms.trainable"]], "my_chess.learner.algorithms.trainable.SimpleCustomBatch": [[21, "my-chess-learner-algorithms-trainable-simplecustombatch"]], "my_chess.learner.algorithms.trainable.Trainable": [[22, "my-chess-learner-algorithms-trainable-trainable"]], "my_chess.learner.algorithms.trainable.TrainableConfig": [[23, "my-chess-learner-algorithms-trainable-trainableconfig"]], "my_chess.learner.algorithms.trainable.collate_wrapper": [[24, "my-chess-learner-algorithms-trainable-collate-wrapper"]], "my_chess.learner.algorithms.util": [[25, "module-my_chess.learner.algorithms.util"]], "my_chess.learner.algorithms.util.average": [[26, "my-chess-learner-algorithms-util-average"]], "my_chess.learner.algorithms.util.determine_sum_dimensions": [[27, "my-chess-learner-algorithms-util-determine-sum-dimensions"]], "my_chess.learner.algorithms.util.measure_accuracy": [[28, "my-chess-learner-algorithms-util-measure-accuracy"]], "my_chess.learner.algorithms.util.measure_precision": [[29, "my-chess-learner-algorithms-util-measure-precision"]], "my_chess.learner.algorithms.util.measure_recall": [[30, "my-chess-learner-algorithms-util-measure-recall"]], "my_chess.learner.callbacks": [[31, "module-my_chess.learner.callbacks"]], "my_chess.learner.callbacks.callbacks": [[32, "module-my_chess.learner.callbacks.callbacks"]], "my_chess.learner.callbacks.callbacks.SelfPlayCallback": [[33, "my-chess-learner-callbacks-callbacks-selfplaycallback"]], "my_chess.learner.datasets": [[34, "module-my_chess.learner.datasets"]], "my_chess.learner.datasets.chess": [[35, "module-my_chess.learner.datasets.chess"]], "my_chess.learner.datasets.chess.ChessData": [[36, "my-chess-learner-datasets-chess-chessdata"]], "my_chess.learner.datasets.chess.ChessDataWinLossPairs": [[37, "my-chess-learner-datasets-chess-chessdatawinlosspairs"]], "my_chess.learner.datasets.chess.PGNGamesItr": [[38, "my-chess-learner-datasets-chess-pgngamesitr"]], "my_chess.learner.datasets.chess.SystemSemaphore": [[39, "my-chess-learner-datasets-chess-systemsemaphore"]], "my_chess.learner.datasets.chess.env": [[40, "my-chess-learner-datasets-chess-env"]], "my_chess.learner.datasets.chess.raw_env": [[41, "my-chess-learner-datasets-chess-raw-env"]], "my_chess.learner.datasets.dataset": [[42, "module-my_chess.learner.datasets.dataset"]], "my_chess.learner.datasets.dataset.Dataset": [[43, "my-chess-learner-datasets-dataset-dataset"]], "my_chess.learner.environments": [[44, "module-my_chess.learner.environments"]], "my_chess.learner.environments.chess": [[45, "module-my_chess.learner.environments.chess"]], "my_chess.learner.environments.chess.Chess": [[46, "my-chess-learner-environments-chess-chess"]], "my_chess.learner.environments.chess.chess_env": [[47, "my-chess-learner-environments-chess-chess-env"]], "my_chess.learner.environments.environment": [[48, "module-my_chess.learner.environments.environment"]], "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper": [[49, "my-chess-learner-environments-environment-assertoutofboundswrapper"]], "my_chess.learner.environments.environment.BaseWrapper": [[50, "my-chess-learner-environments-environment-basewrapper"]], "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper": [[51, "my-chess-learner-environments-environment-clipoutofboundswrapper"]], "my_chess.learner.environments.environment.Environment": [[52, "my-chess-learner-environments-environment-environment"]], "my_chess.learner.environments.environment.OrderEnforcingWrapper": [[53, "my-chess-learner-environments-environment-orderenforcingwrapper"]], "my_chess.learner.environments.environment.PettingZooEnv": [[54, "my-chess-learner-environments-environment-pettingzooenv"]], "my_chess.learner.environments.environment.TerminateIllegalWrapper": [[55, "my-chess-learner-environments-environment-terminateillegalwrapper"]], "my_chess.learner.environments.environment.env_creator": [[56, "my-chess-learner-environments-environment-env-creator"]], "my_chess.learner.models": [[57, "module-my_chess.learner.models"]], "my_chess.learner.models.Qlearner": [[58, "module-my_chess.learner.models.Qlearner"]], "my_chess.learner.models.Qlearner.QLearner": [[59, "my-chess-learner-models-qlearner-qlearner"]], "my_chess.learner.models.Qlearner.QLearnerConfig": [[60, "my-chess-learner-models-qlearner-qlearnerconfig"]], "my_chess.learner.models.deepchess": [[61, "module-my_chess.learner.models.deepchess"]], "my_chess.learner.models.deepchess.DeepChessAlphaBeta": [[62, "my-chess-learner-models-deepchess-deepchessalphabeta"]], "my_chess.learner.models.deepchess.DeepChessAlphaBetaConfig": [[63, "my-chess-learner-models-deepchess-deepchessalphabetaconfig"]], "my_chess.learner.models.deepchess.DeepChessEvaluator": [[64, "my-chess-learner-models-deepchess-deepchessevaluator"]], "my_chess.learner.models.deepchess.DeepChessEvaluatorConfig": [[65, "my-chess-learner-models-deepchess-deepchessevaluatorconfig"]], "my_chess.learner.models.deepchess.DeepChessFE": [[66, "my-chess-learner-models-deepchess-deepchessfe"]], "my_chess.learner.models.deepchess.DeepChessFEConfig": [[67, "my-chess-learner-models-deepchess-deepchessfeconfig"]], "my_chess.learner.models.deepchess.DeepChessRL": [[68, "my-chess-learner-models-deepchess-deepchessrl"]], "my_chess.learner.models.deepchess.DeepChessRLConfig": [[69, "my-chess-learner-models-deepchess-deepchessrlconfig"]], "my_chess.learner.models.deepchess.NextPositions": [[70, "my-chess-learner-models-deepchess-nextpositions"]], "my_chess.learner.models.deepchess.NextPositionsGenerator": [[71, "my-chess-learner-models-deepchess-nextpositionsgenerator"]], "my_chess.learner.models.model": [[72, "module-my_chess.learner.models.model"]], "my_chess.learner.models.model.Model": [[73, "my-chess-learner-models-model-model"]], "my_chess.learner.models.model.ModelAutoEncodable": [[74, "my-chess-learner-models-model-modelautoencodable"]], "my_chess.learner.models.model.ModelConfig": [[75, "my-chess-learner-models-model-modelconfig"]], "my_chess.learner.models.model.ModelRLLIB": [[76, "my-chess-learner-models-model-modelrllib"]], "my_chess.learner.models.model.ModelRRLIBConfig": [[77, "my-chess-learner-models-model-modelrrlibconfig"]], "my_chess.learner.models.tobenamed": [[78, "module-my_chess.learner.models.tobenamed"]], "my_chess.learner.models.tobenamed.FeatureProjector": [[79, "my-chess-learner-models-tobenamed-featureprojector"]], "my_chess.learner.models.tobenamed.PositionalEmbedder": [[80, "my-chess-learner-models-tobenamed-positionalembedder"]], "my_chess.learner.models.tobenamed.SwinFeatureExtractor": [[81, "my-chess-learner-models-tobenamed-swinfeatureextractor"]], "my_chess.learner.models.tobenamed.ToBeNamed": [[82, "my-chess-learner-models-tobenamed-tobenamed"]], "my_chess.learner.models.tobenamed.ToBeNamedConfig": [[83, "my-chess-learner-models-tobenamed-tobenamedconfig"]], "my_chess.learner.models.transformerchess": [[84, "module-my_chess.learner.models.transformerchess"]], "my_chess.learner.models.transformerchess.TransformerChessFE": [[85, "my-chess-learner-models-transformerchess-transformerchessfe"]], "my_chess.learner.models.transformerchess.TransformerChessFEConfig": [[86, "my-chess-learner-models-transformerchess-transformerchessfeconfig"]], "my_chess.learner.policies": [[87, "module-my_chess.learner.policies"]], "my_chess.learner.policies.policy": [[88, "module-my_chess.learner.policies.policy"]], "my_chess.learner.policies.policy.Policy": [[89, "my-chess-learner-policies-policy-policy"]], "my_chess.learner.policies.policy.PolicyConfig": [[90, "my-chess-learner-policies-policy-policyconfig"]], "my_chess.learner.policies.ppo_cust": [[91, "module-my_chess.learner.policies.ppo_cust"]], "my_chess.learner.policies.ppo_cust.PPOPolicy": [[92, "my-chess-learner-policies-ppo-cust-ppopolicy"]], "my_chess.learner.policies.ppo_cust.PPOPolicyConfig": [[93, "my-chess-learner-policies-ppo-cust-ppopolicyconfig"]], "my_chess.learner.policies.random": [[94, "module-my_chess.learner.policies.random"]], "my_chess.learner.policies.random.RandomPolicy": [[95, "my-chess-learner-policies-random-randompolicy"]], "my_chess.learner.policies.random.RandomPolicyConfig": [[96, "my-chess-learner-policies-random-randompolicyconfig"]], "my_chess.scripts": [[97, "module-my_chess.scripts"]], "my_chess.scripts.scripts": [[98, "module-my_chess.scripts.scripts"]], "my_chess.scripts.scripts.ArgumentCollector": [[99, "my-chess-scripts-scripts-argumentcollector"]], "my_chess.scripts.scripts.HumanVsBot": [[100, "my-chess-scripts-scripts-humanvsbot"]], "my_chess.scripts.scripts.Script": [[101, "my-chess-scripts-scripts-script"]], "my_chess.scripts.scripts.ScriptChooser": [[102, "my-chess-scripts-scripts-scriptchooser"]], "my_chess.scripts.scripts.Serve": [[103, "my-chess-scripts-scripts-serve"]], "my_chess.scripts.scripts.Test": [[104, "my-chess-scripts-scripts-test"]], "my_chess.scripts.scripts.Train": [[105, "my-chess-scripts-scripts-train"]], "tests": [[106, "module-tests"]], "tests.conftest": [[107, "module-tests.conftest"]], "tests.conftest.all_draws_game_data": [[108, "tests-conftest-all-draws-game-data"]], "tests.conftest.full_data": [[109, "tests-conftest-full-data"]], "tests.conftest.minimal_obs_game_data": [[110, "tests-conftest-minimal-obs-game-data"]], "tests.conftest.short_game_data": [[111, "tests-conftest-short-game-data"]], "tests.test_algorithms": [[112, "module-tests.test_algorithms"]], "tests.test_algorithms.test_measure_accuracy": [[113, "tests-test-algorithms-test-measure-accuracy"]], "tests.test_algorithms.test_measure_precision": [[114, "tests-test-algorithms-test-measure-precision"]], "tests.test_algorithms.test_measure_recall": [[115, "tests-test-algorithms-test-measure-recall"]], "tests.test_datasets": [[116, "module-tests.test_datasets"]], "tests.test_datasets.TestChessData": [[117, "tests-test-datasets-testchessdata"]], "tests.test_models": [[118, "module-tests.test_models"]], "tests.test_models.TestDeepChessAlphaBeta": [[119, "tests-test-models-testdeepchessalphabeta"]], "tests.test_training": [[120, "module-tests.test_training"]], "tests.test_training.test_crossentropyloss": [[121, "tests-test-training-test-crossentropyloss"]], "Welcome to ChessBot\u2019s documentation!": [[122, "welcome-to-project-s-documentation"]], "Indices and tables": [[122, "indices-and-tables"]]}, "indexentries": {"module": [[0, "module-my_chess"], [1, "module-my_chess.learner"], [2, "module-my_chess.learner.algorithms"], [3, "module-my_chess.learner.algorithms.algorithm"], [6, "module-my_chess.learner.algorithms.autoencoder"], [9, "module-my_chess.learner.algorithms.chessevaluation"], [12, "module-my_chess.learner.algorithms.distill"], [15, "module-my_chess.learner.algorithms.loss"], [17, "module-my_chess.learner.algorithms.ppo_cust"], [20, "module-my_chess.learner.algorithms.trainable"], [25, "module-my_chess.learner.algorithms.util"], [31, "module-my_chess.learner.callbacks"], [32, "module-my_chess.learner.callbacks.callbacks"], [34, "module-my_chess.learner.datasets"], [35, "module-my_chess.learner.datasets.chess"], [42, "module-my_chess.learner.datasets.dataset"], [44, "module-my_chess.learner.environments"], [45, "module-my_chess.learner.environments.chess"], [48, "module-my_chess.learner.environments.environment"], [57, "module-my_chess.learner.models"], [58, "module-my_chess.learner.models.Qlearner"], [61, "module-my_chess.learner.models.deepchess"], [72, "module-my_chess.learner.models.model"], [78, "module-my_chess.learner.models.tobenamed"], [84, "module-my_chess.learner.models.transformerchess"], [87, "module-my_chess.learner.policies"], [88, "module-my_chess.learner.policies.policy"], [91, "module-my_chess.learner.policies.ppo_cust"], [94, "module-my_chess.learner.policies.random"], [97, "module-my_chess.scripts"], [98, "module-my_chess.scripts.scripts"], [106, "module-tests"], [107, "module-tests.conftest"], [112, "module-tests.test_algorithms"], [116, "module-tests.test_datasets"], [118, "module-tests.test_models"], [120, "module-tests.test_training"]], "my_chess": [[0, "module-my_chess"]], "my_chess.learner": [[1, "module-my_chess.learner"]], "my_chess.learner.algorithms": [[2, "module-my_chess.learner.algorithms"]], "my_chess.learner.algorithms.algorithm": [[3, "module-my_chess.learner.algorithms.algorithm"]], "algorithm (class in my_chess.learner.algorithms.algorithm)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm"]], "__init__() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.__init__"]], "add_module() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.add_module"]], "add_policy() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.add_policy"]], "cleanup() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.cleanup"]], "compute_actions() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.compute_actions"]], "compute_single_action() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.compute_single_action"]], "default_resource_request() (my_chess.learner.algorithms.algorithm.algorithm class method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.default_resource_request"]], "evaluate() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.evaluate"]], "export_model() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.export_model"]], "export_policy_checkpoint() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.export_policy_checkpoint"]], "export_policy_model() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.export_policy_model"]], "from_checkpoint() (my_chess.learner.algorithms.algorithm.algorithm static method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.from_checkpoint"]], "from_state() (my_chess.learner.algorithms.algorithm.algorithm static method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.from_state"]], "get_auto_filled_metrics() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.get_auto_filled_metrics"]], "get_config() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.get_config"]], "get_default_policy_class() (my_chess.learner.algorithms.algorithm.algorithm class method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.get_default_policy_class"]], "get_module() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.get_module"]], "get_policy() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.get_policy"]], "get_weights() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.get_weights"]], "import_model() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.import_model"]], "import_policy_model_from_h5() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.import_policy_model_from_h5"]], "iteration (my_chess.learner.algorithms.algorithm.algorithm property)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.iteration"]], "load_checkpoint() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.load_checkpoint"]], "log_result() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.log_result"]], "logdir (my_chess.learner.algorithms.algorithm.algorithm property)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.logdir"]], "merge_algorithm_configs() (my_chess.learner.algorithms.algorithm.algorithm class method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.merge_algorithm_configs"]], "remove_policy() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.remove_policy"]], "reset() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.reset"]], "reset_config() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.reset_config"]], "resource_help() (my_chess.learner.algorithms.algorithm.algorithm class method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.resource_help"]], "restore() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.restore"]], "restore_workers() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.restore_workers"]], "save() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.save"]], "save_checkpoint() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.save_checkpoint"]], "set_weights() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.set_weights"]], "setup() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.setup"]], "step() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.step"]], "stop() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.stop"]], "train() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.train"]], "train_buffered() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.train_buffered"]], "training_iteration (my_chess.learner.algorithms.algorithm.algorithm property)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.training_iteration"]], "training_step() (my_chess.learner.algorithms.algorithm.algorithm method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.training_step"]], "trial_id (my_chess.learner.algorithms.algorithm.algorithm property)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.trial_id"]], "trial_name (my_chess.learner.algorithms.algorithm.algorithm property)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.trial_name"]], "trial_resources (my_chess.learner.algorithms.algorithm.algorithm property)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.trial_resources"]], "validate_env() (my_chess.learner.algorithms.algorithm.algorithm static method)": [[4, "my_chess.learner.algorithms.algorithm.Algorithm.validate_env"]], "algorithmconfig (class in my_chess.learner.algorithms.algorithm)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig"]], "__init__() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.__init__"]], "build() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.build"]], "build_learner() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.build_learner"]], "build_learner_group() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.build_learner_group"]], "callbacks() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.callbacks"]], "checkpointing() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.checkpointing"]], "copy() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.copy"]], "debugging() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.debugging"]], "environment() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.environment"]], "evaluation() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.evaluation"]], "experimental() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.experimental"]], "exploration() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.exploration"]], "fault_tolerance() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.fault_tolerance"]], "framework() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.framework"]], "freeze() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.freeze"]], "from_dict() (my_chess.learner.algorithms.algorithm.algorithmconfig class method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.from_dict"]], "get() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.get"]], "get_config_for_module() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.get_config_for_module"]], "get_default_learner_class() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.get_default_learner_class"]], "get_default_rl_module_spec() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.get_default_rl_module_spec"]], "get_evaluation_config_object() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.get_evaluation_config_object"]], "get_marl_module_spec() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.get_marl_module_spec"]], "get_multi_agent_setup() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.get_multi_agent_setup"]], "get_rollout_fragment_length() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.get_rollout_fragment_length"]], "get_torch_compile_worker_config() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.get_torch_compile_worker_config"]], "is_atari (my_chess.learner.algorithms.algorithm.algorithmconfig property)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.is_atari"]], "is_multi_agent() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.is_multi_agent"]], "items() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.items"]], "keys() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.keys"]], "learner_class (my_chess.learner.algorithms.algorithm.algorithmconfig property)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.learner_class"]], "multi_agent() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.multi_agent"]], "offline_data() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.offline_data"]], "overrides() (my_chess.learner.algorithms.algorithm.algorithmconfig class method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.overrides"]], "pop() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.pop"]], "python_environment() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.python_environment"]], "reporting() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.reporting"]], "resources() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.resources"]], "rl_module() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.rl_module"]], "rollouts() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.rollouts"]], "serialize() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.serialize"]], "to_dict() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.to_dict"]], "training() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.training"]], "update_from_dict() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.update_from_dict"]], "validate() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.validate"]], "validate_train_batch_size_vs_rollout_fragment_length() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.validate_train_batch_size_vs_rollout_fragment_length"]], "values() (my_chess.learner.algorithms.algorithm.algorithmconfig method)": [[5, "my_chess.learner.algorithms.algorithm.AlgorithmConfig.values"]], "my_chess.learner.algorithms.autoencoder": [[6, "module-my_chess.learner.algorithms.autoencoder"]], "autoencoder (class in my_chess.learner.algorithms.autoencoder)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder"]], "__init__() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.__init__"]], "cleanup() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.cleanup"]], "default_resource_request() (my_chess.learner.algorithms.autoencoder.autoencoder class method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.default_resource_request"]], "export_model() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.export_model"]], "get_auto_filled_metrics() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.get_auto_filled_metrics"]], "get_config() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.get_config"]], "iteration (my_chess.learner.algorithms.autoencoder.autoencoder property)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.iteration"]], "load_checkpoint() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.load_checkpoint"]], "log_result() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.log_result"]], "logdir (my_chess.learner.algorithms.autoencoder.autoencoder property)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.logdir"]], "reset() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.reset"]], "reset_config() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.reset_config"]], "resource_help() (my_chess.learner.algorithms.autoencoder.autoencoder class method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.resource_help"]], "restore() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.restore"]], "save() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.save"]], "save_checkpoint() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.save_checkpoint"]], "setup() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.setup"]], "step() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.step"]], "stop() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.stop"]], "train() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.train"]], "train_buffered() (my_chess.learner.algorithms.autoencoder.autoencoder method)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.train_buffered"]], "training_iteration (my_chess.learner.algorithms.autoencoder.autoencoder property)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.training_iteration"]], "trial_id (my_chess.learner.algorithms.autoencoder.autoencoder property)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.trial_id"]], "trial_name (my_chess.learner.algorithms.autoencoder.autoencoder property)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.trial_name"]], "trial_resources (my_chess.learner.algorithms.autoencoder.autoencoder property)": [[7, "my_chess.learner.algorithms.autoencoder.AutoEncoder.trial_resources"]], "autoencoderconfig (class in my_chess.learner.algorithms.autoencoder)": [[8, "my_chess.learner.algorithms.autoencoder.AutoEncoderConfig"]], "__init__() (my_chess.learner.algorithms.autoencoder.autoencoderconfig method)": [[8, "my_chess.learner.algorithms.autoencoder.AutoEncoderConfig.__init__"]], "to_dict() (my_chess.learner.algorithms.autoencoder.autoencoderconfig method)": [[8, "my_chess.learner.algorithms.autoencoder.AutoEncoderConfig.to_dict"]], "update() (my_chess.learner.algorithms.autoencoder.autoencoderconfig method)": [[8, "my_chess.learner.algorithms.autoencoder.AutoEncoderConfig.update"]], "my_chess.learner.algorithms.chessevaluation": [[9, "module-my_chess.learner.algorithms.chessevaluation"]], "chessevaluation (class in my_chess.learner.algorithms.chessevaluation)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation"]], "__init__() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.__init__"]], "cleanup() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.cleanup"]], "default_resource_request() (my_chess.learner.algorithms.chessevaluation.chessevaluation class method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.default_resource_request"]], "export_model() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.export_model"]], "get_auto_filled_metrics() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.get_auto_filled_metrics"]], "get_config() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.get_config"]], "iteration (my_chess.learner.algorithms.chessevaluation.chessevaluation property)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.iteration"]], "load_checkpoint() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.load_checkpoint"]], "log_result() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.log_result"]], "logdir (my_chess.learner.algorithms.chessevaluation.chessevaluation property)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.logdir"]], "reset() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.reset"]], "reset_config() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.reset_config"]], "resource_help() (my_chess.learner.algorithms.chessevaluation.chessevaluation class method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.resource_help"]], "restore() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.restore"]], "save() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.save"]], "save_checkpoint() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.save_checkpoint"]], "setup() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.setup"]], "step() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.step"]], "stop() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.stop"]], "train() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.train"]], "train_buffered() (my_chess.learner.algorithms.chessevaluation.chessevaluation method)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.train_buffered"]], "training_iteration (my_chess.learner.algorithms.chessevaluation.chessevaluation property)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.training_iteration"]], "trial_id (my_chess.learner.algorithms.chessevaluation.chessevaluation property)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.trial_id"]], "trial_name (my_chess.learner.algorithms.chessevaluation.chessevaluation property)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.trial_name"]], "trial_resources (my_chess.learner.algorithms.chessevaluation.chessevaluation property)": [[10, "my_chess.learner.algorithms.chessevaluation.ChessEvaluation.trial_resources"]], "chessevaluationconfig (class in my_chess.learner.algorithms.chessevaluation)": [[11, "my_chess.learner.algorithms.chessevaluation.ChessEvaluationConfig"]], "__init__() (my_chess.learner.algorithms.chessevaluation.chessevaluationconfig method)": [[11, "my_chess.learner.algorithms.chessevaluation.ChessEvaluationConfig.__init__"]], "to_dict() (my_chess.learner.algorithms.chessevaluation.chessevaluationconfig method)": [[11, "my_chess.learner.algorithms.chessevaluation.ChessEvaluationConfig.to_dict"]], "update() (my_chess.learner.algorithms.chessevaluation.chessevaluationconfig method)": [[11, "my_chess.learner.algorithms.chessevaluation.ChessEvaluationConfig.update"]], "my_chess.learner.algorithms.distill": [[12, "module-my_chess.learner.algorithms.distill"]], "modeldistill (class in my_chess.learner.algorithms.distill)": [[13, "my_chess.learner.algorithms.distill.ModelDistill"]], "__init__() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.__init__"]], "cleanup() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.cleanup"]], "default_resource_request() (my_chess.learner.algorithms.distill.modeldistill class method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.default_resource_request"]], "export_model() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.export_model"]], "get_auto_filled_metrics() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.get_auto_filled_metrics"]], "get_config() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.get_config"]], "iteration (my_chess.learner.algorithms.distill.modeldistill property)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.iteration"]], "load_checkpoint() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.load_checkpoint"]], "log_result() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.log_result"]], "logdir (my_chess.learner.algorithms.distill.modeldistill property)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.logdir"]], "reset() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.reset"]], "reset_config() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.reset_config"]], "resource_help() (my_chess.learner.algorithms.distill.modeldistill class method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.resource_help"]], "restore() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.restore"]], "save() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.save"]], "save_checkpoint() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.save_checkpoint"]], "setup() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.setup"]], "step() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.step"]], "stop() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.stop"]], "train() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.train"]], "train_buffered() (my_chess.learner.algorithms.distill.modeldistill method)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.train_buffered"]], "training_iteration (my_chess.learner.algorithms.distill.modeldistill property)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.training_iteration"]], "trial_id (my_chess.learner.algorithms.distill.modeldistill property)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.trial_id"]], "trial_name (my_chess.learner.algorithms.distill.modeldistill property)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.trial_name"]], "trial_resources (my_chess.learner.algorithms.distill.modeldistill property)": [[13, "my_chess.learner.algorithms.distill.ModelDistill.trial_resources"]], "modeldistillconfig (class in my_chess.learner.algorithms.distill)": [[14, "my_chess.learner.algorithms.distill.ModelDistillConfig"]], "__init__() (my_chess.learner.algorithms.distill.modeldistillconfig method)": [[14, "my_chess.learner.algorithms.distill.ModelDistillConfig.__init__"]], "to_dict() (my_chess.learner.algorithms.distill.modeldistillconfig method)": [[14, "my_chess.learner.algorithms.distill.ModelDistillConfig.to_dict"]], "update() (my_chess.learner.algorithms.distill.modeldistillconfig method)": [[14, "my_chess.learner.algorithms.distill.ModelDistillConfig.update"]], "my_chess.learner.algorithms.loss": [[15, "module-my_chess.learner.algorithms.loss"]], "crossentropyloss (class in my_chess.learner.algorithms.loss)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss"]], "__init__() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.__init__"]], "add_module() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.add_module"]], "apply() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.apply"]], "bfloat16() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.bfloat16"]], "buffers() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.buffers"]], "children() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.children"]], "cpu() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.cpu"]], "cuda() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.cuda"]], "double() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.double"]], "eval() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.eval"]], "extra_repr() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.extra_repr"]], "float() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.float"]], "forward() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.forward"]], "get_buffer() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.get_buffer"]], "get_extra_state() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.get_extra_state"]], "get_parameter() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.get_parameter"]], "get_submodule() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.get_submodule"]], "half() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.half"]], "ipu() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.ipu"]], "load_state_dict() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.load_state_dict"]], "modules() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.modules"]], "named_buffers() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.named_buffers"]], "named_children() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.named_children"]], "named_modules() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.named_modules"]], "named_parameters() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.named_parameters"]], "parameters() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.parameters"]], "register_backward_hook() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.register_backward_hook"]], "register_buffer() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.register_buffer"]], "register_forward_hook() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.register_module"]], "register_parameter() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.register_parameter"]], "requires_grad_() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.requires_grad_"]], "set_extra_state() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.set_extra_state"]], "share_memory() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.share_memory"]], "state_dict() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.state_dict"]], "to() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.to"]], "to_empty() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.to_empty"]], "train() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.train"]], "type() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.type"]], "xpu() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.xpu"]], "zero_grad() (my_chess.learner.algorithms.loss.crossentropyloss method)": [[16, "my_chess.learner.algorithms.loss.CrossEntropyLoss.zero_grad"]], "my_chess.learner.algorithms.ppo_cust": [[17, "module-my_chess.learner.algorithms.ppo_cust"]], "ppo (class in my_chess.learner.algorithms.ppo_cust)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO"]], "__init__() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.__init__"]], "add_module() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.add_module"]], "add_policy() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.add_policy"]], "cleanup() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.cleanup"]], "compute_actions() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.compute_actions"]], "compute_single_action() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.compute_single_action"]], "default_resource_request() (my_chess.learner.algorithms.ppo_cust.ppo class method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.default_resource_request"]], "evaluate() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.evaluate"]], "export_model() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.export_model"]], "export_policy_checkpoint() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.export_policy_checkpoint"]], "export_policy_model() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.export_policy_model"]], "from_checkpoint() (my_chess.learner.algorithms.ppo_cust.ppo static method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.from_checkpoint"]], "from_state() (my_chess.learner.algorithms.ppo_cust.ppo static method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.from_state"]], "get_auto_filled_metrics() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.get_auto_filled_metrics"]], "get_config() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.get_config"]], "get_default_policy_class() (my_chess.learner.algorithms.ppo_cust.ppo class method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.get_default_policy_class"]], "get_module() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.get_module"]], "get_policy() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.get_policy"]], "get_weights() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.get_weights"]], "import_model() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.import_model"]], "import_policy_model_from_h5() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.import_policy_model_from_h5"]], "iteration (my_chess.learner.algorithms.ppo_cust.ppo property)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.iteration"]], "load_checkpoint() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.load_checkpoint"]], "log_result() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.log_result"]], "logdir (my_chess.learner.algorithms.ppo_cust.ppo property)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.logdir"]], "merge_algorithm_configs() (my_chess.learner.algorithms.ppo_cust.ppo class method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.merge_algorithm_configs"]], "remove_policy() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.remove_policy"]], "reset() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.reset"]], "reset_config() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.reset_config"]], "resource_help() (my_chess.learner.algorithms.ppo_cust.ppo class method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.resource_help"]], "restore() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.restore"]], "restore_workers() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.restore_workers"]], "save() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.save"]], "save_checkpoint() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.save_checkpoint"]], "set_weights() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.set_weights"]], "setup() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.setup"]], "step() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.step"]], "stop() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.stop"]], "train() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.train"]], "train_buffered() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.train_buffered"]], "training_iteration (my_chess.learner.algorithms.ppo_cust.ppo property)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.training_iteration"]], "training_step() (my_chess.learner.algorithms.ppo_cust.ppo method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.training_step"]], "trial_id (my_chess.learner.algorithms.ppo_cust.ppo property)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.trial_id"]], "trial_name (my_chess.learner.algorithms.ppo_cust.ppo property)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.trial_name"]], "trial_resources (my_chess.learner.algorithms.ppo_cust.ppo property)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.trial_resources"]], "validate_env() (my_chess.learner.algorithms.ppo_cust.ppo static method)": [[18, "my_chess.learner.algorithms.ppo_cust.PPO.validate_env"]], "ppoconfig (class in my_chess.learner.algorithms.ppo_cust)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig"]], "__init__() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.__init__"]], "build() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.build"]], "build_learner() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.build_learner"]], "build_learner_group() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.build_learner_group"]], "callbacks() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.callbacks"]], "checkpointing() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.checkpointing"]], "copy() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.copy"]], "debugging() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.debugging"]], "environment() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.environment"]], "evaluation() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.evaluation"]], "experimental() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.experimental"]], "exploration() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.exploration"]], "fault_tolerance() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.fault_tolerance"]], "framework() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.framework"]], "freeze() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.freeze"]], "from_dict() (my_chess.learner.algorithms.ppo_cust.ppoconfig class method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.from_dict"]], "get() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.get"]], "get_config_for_module() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.get_config_for_module"]], "get_default_learner_class() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.get_default_learner_class"]], "get_default_rl_module_spec() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.get_default_rl_module_spec"]], "get_evaluation_config_object() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.get_evaluation_config_object"]], "get_marl_module_spec() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.get_marl_module_spec"]], "get_multi_agent_setup() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.get_multi_agent_setup"]], "get_rollout_fragment_length() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.get_rollout_fragment_length"]], "get_torch_compile_worker_config() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.get_torch_compile_worker_config"]], "is_atari (my_chess.learner.algorithms.ppo_cust.ppoconfig property)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.is_atari"]], "is_multi_agent() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.is_multi_agent"]], "items() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.items"]], "keys() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.keys"]], "learner_class (my_chess.learner.algorithms.ppo_cust.ppoconfig property)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.learner_class"]], "multi_agent() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.multi_agent"]], "offline_data() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.offline_data"]], "overrides() (my_chess.learner.algorithms.ppo_cust.ppoconfig class method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.overrides"]], "pop() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.pop"]], "python_environment() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.python_environment"]], "reporting() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.reporting"]], "resources() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.resources"]], "rl_module() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.rl_module"]], "rollouts() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.rollouts"]], "serialize() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.serialize"]], "to_dict() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.to_dict"]], "training() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.training"]], "update_from_dict() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.update_from_dict"]], "validate() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.validate"]], "validate_train_batch_size_vs_rollout_fragment_length() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.validate_train_batch_size_vs_rollout_fragment_length"]], "values() (my_chess.learner.algorithms.ppo_cust.ppoconfig method)": [[19, "my_chess.learner.algorithms.ppo_cust.PPOConfig.values"]], "my_chess.learner.algorithms.trainable": [[20, "module-my_chess.learner.algorithms.trainable"]], "simplecustombatch (class in my_chess.learner.algorithms.trainable)": [[21, "my_chess.learner.algorithms.trainable.SimpleCustomBatch"]], "__init__() (my_chess.learner.algorithms.trainable.simplecustombatch method)": [[21, "my_chess.learner.algorithms.trainable.SimpleCustomBatch.__init__"]], "trainable (class in my_chess.learner.algorithms.trainable)": [[22, "my_chess.learner.algorithms.trainable.Trainable"]], "__init__() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.__init__"]], "cleanup() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.cleanup"]], "default_resource_request() (my_chess.learner.algorithms.trainable.trainable class method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.default_resource_request"]], "export_model() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.export_model"]], "get_auto_filled_metrics() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.get_auto_filled_metrics"]], "get_config() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.get_config"]], "iteration (my_chess.learner.algorithms.trainable.trainable property)": [[22, "my_chess.learner.algorithms.trainable.Trainable.iteration"]], "load_checkpoint() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.load_checkpoint"]], "log_result() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.log_result"]], "logdir (my_chess.learner.algorithms.trainable.trainable property)": [[22, "my_chess.learner.algorithms.trainable.Trainable.logdir"]], "reset() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.reset"]], "reset_config() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.reset_config"]], "resource_help() (my_chess.learner.algorithms.trainable.trainable class method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.resource_help"]], "restore() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.restore"]], "save() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.save"]], "save_checkpoint() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.save_checkpoint"]], "setup() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.setup"]], "step() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.step"]], "stop() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.stop"]], "train() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.train"]], "train_buffered() (my_chess.learner.algorithms.trainable.trainable method)": [[22, "my_chess.learner.algorithms.trainable.Trainable.train_buffered"]], "training_iteration (my_chess.learner.algorithms.trainable.trainable property)": [[22, "my_chess.learner.algorithms.trainable.Trainable.training_iteration"]], "trial_id (my_chess.learner.algorithms.trainable.trainable property)": [[22, "my_chess.learner.algorithms.trainable.Trainable.trial_id"]], "trial_name (my_chess.learner.algorithms.trainable.trainable property)": [[22, "my_chess.learner.algorithms.trainable.Trainable.trial_name"]], "trial_resources (my_chess.learner.algorithms.trainable.trainable property)": [[22, "my_chess.learner.algorithms.trainable.Trainable.trial_resources"]], "trainableconfig (class in my_chess.learner.algorithms.trainable)": [[23, "my_chess.learner.algorithms.trainable.TrainableConfig"]], "__init__() (my_chess.learner.algorithms.trainable.trainableconfig method)": [[23, "my_chess.learner.algorithms.trainable.TrainableConfig.__init__"]], "to_dict() (my_chess.learner.algorithms.trainable.trainableconfig method)": [[23, "my_chess.learner.algorithms.trainable.TrainableConfig.to_dict"]], "update() (my_chess.learner.algorithms.trainable.trainableconfig method)": [[23, "my_chess.learner.algorithms.trainable.TrainableConfig.update"]], "collate_wrapper() (in module my_chess.learner.algorithms.trainable)": [[24, "my_chess.learner.algorithms.trainable.collate_wrapper"]], "my_chess.learner.algorithms.util": [[25, "module-my_chess.learner.algorithms.util"]], "average() (in module my_chess.learner.algorithms.util)": [[26, "my_chess.learner.algorithms.util.average"]], "determine_sum_dimensions() (in module my_chess.learner.algorithms.util)": [[27, "my_chess.learner.algorithms.util.determine_sum_dimensions"]], "measure_accuracy() (in module my_chess.learner.algorithms.util)": [[28, "my_chess.learner.algorithms.util.measure_accuracy"]], "measure_precision() (in module my_chess.learner.algorithms.util)": [[29, "my_chess.learner.algorithms.util.measure_precision"]], "measure_recall() (in module my_chess.learner.algorithms.util)": [[30, "my_chess.learner.algorithms.util.measure_recall"]], "my_chess.learner.callbacks": [[31, "module-my_chess.learner.callbacks"]], "my_chess.learner.callbacks.callbacks": [[32, "module-my_chess.learner.callbacks.callbacks"]], "selfplaycallback (class in my_chess.learner.callbacks.callbacks)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback"]], "__init__() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.__init__"]], "on_algorithm_init() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_algorithm_init"]], "on_checkpoint_loaded() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_checkpoint_loaded"]], "on_create_policy() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_create_policy"]], "on_environment_created() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_environment_created"]], "on_episode_created() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_episode_created"]], "on_episode_end() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_episode_end"]], "on_episode_start() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_episode_start"]], "on_episode_step() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_episode_step"]], "on_evaluate_end() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_evaluate_end"]], "on_evaluate_start() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_evaluate_start"]], "on_learn_on_batch() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_learn_on_batch"]], "on_postprocess_trajectory() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_postprocess_trajectory"]], "on_sample_end() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_sample_end"]], "on_sub_environment_created() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_sub_environment_created"]], "on_train_result() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_train_result"]], "on_workers_recreated() (my_chess.learner.callbacks.callbacks.selfplaycallback method)": [[33, "my_chess.learner.callbacks.callbacks.SelfPlayCallback.on_workers_recreated"]], "my_chess.learner.datasets": [[34, "module-my_chess.learner.datasets"]], "my_chess.learner.datasets.chess": [[35, "module-my_chess.learner.datasets.chess"]], "chessdata (class in my_chess.learner.datasets.chess)": [[36, "my_chess.learner.datasets.chess.ChessData"]], "__init__() (my_chess.learner.datasets.chess.chessdata method)": [[36, "my_chess.learner.datasets.chess.ChessData.__init__"]], "copy() (my_chess.learner.datasets.chess.chessdata method)": [[36, "my_chess.learner.datasets.chess.ChessData.copy"]], "create_database() (my_chess.learner.datasets.chess.chessdata method)": [[36, "my_chess.learner.datasets.chess.ChessData.create_database"]], "mem_safe_val_and_offset_to_string() (my_chess.learner.datasets.chess.chessdata static method)": [[36, "my_chess.learner.datasets.chess.ChessData.mem_safe_val_and_offset_to_string"]], "pack_sequences() (my_chess.learner.datasets.chess.chessdata static method)": [[36, "my_chess.learner.datasets.chess.ChessData.pack_sequences"]], "sequence_to_string() (my_chess.learner.datasets.chess.chessdata static method)": [[36, "my_chess.learner.datasets.chess.ChessData.sequence_to_string"]], "string_to_sequence() (my_chess.learner.datasets.chess.chessdata static method)": [[36, "my_chess.learner.datasets.chess.ChessData.string_to_sequence"]], "strings_to_mem_safe_val_and_offset() (my_chess.learner.datasets.chess.chessdata static method)": [[36, "my_chess.learner.datasets.chess.ChessData.strings_to_mem_safe_val_and_offset"]], "unpack_sequence() (my_chess.learner.datasets.chess.chessdata static method)": [[36, "my_chess.learner.datasets.chess.ChessData.unpack_sequence"]], "chessdatawinlosspairs (class in my_chess.learner.datasets.chess)": [[37, "my_chess.learner.datasets.chess.ChessDataWinLossPairs"]], "__init__() (my_chess.learner.datasets.chess.chessdatawinlosspairs method)": [[37, "my_chess.learner.datasets.chess.ChessDataWinLossPairs.__init__"]], "copy() (my_chess.learner.datasets.chess.chessdatawinlosspairs method)": [[37, "my_chess.learner.datasets.chess.ChessDataWinLossPairs.copy"]], "create_database() (my_chess.learner.datasets.chess.chessdatawinlosspairs method)": [[37, "my_chess.learner.datasets.chess.ChessDataWinLossPairs.create_database"]], "get_dynamic_random_idx_partners() (my_chess.learner.datasets.chess.chessdatawinlosspairs method)": [[37, "my_chess.learner.datasets.chess.ChessDataWinLossPairs.get_dynamic_random_idx_partners"]], "get_static_random_idx_partners() (my_chess.learner.datasets.chess.chessdatawinlosspairs method)": [[37, "my_chess.learner.datasets.chess.ChessDataWinLossPairs.get_static_random_idx_partners"]], "mem_safe_val_and_offset_to_string() (my_chess.learner.datasets.chess.chessdatawinlosspairs static method)": [[37, "my_chess.learner.datasets.chess.ChessDataWinLossPairs.mem_safe_val_and_offset_to_string"]], "pack_sequences() (my_chess.learner.datasets.chess.chessdatawinlosspairs static method)": [[37, "my_chess.learner.datasets.chess.ChessDataWinLossPairs.pack_sequences"]], "sequence_to_string() (my_chess.learner.datasets.chess.chessdatawinlosspairs static method)": [[37, "my_chess.learner.datasets.chess.ChessDataWinLossPairs.sequence_to_string"]], "string_to_sequence() (my_chess.learner.datasets.chess.chessdatawinlosspairs static method)": [[37, "my_chess.learner.datasets.chess.ChessDataWinLossPairs.string_to_sequence"]], "strings_to_mem_safe_val_and_offset() (my_chess.learner.datasets.chess.chessdatawinlosspairs static method)": [[37, "my_chess.learner.datasets.chess.ChessDataWinLossPairs.strings_to_mem_safe_val_and_offset"]], "unpack_sequence() (my_chess.learner.datasets.chess.chessdatawinlosspairs static method)": [[37, "my_chess.learner.datasets.chess.ChessDataWinLossPairs.unpack_sequence"]], "pgngamesitr (class in my_chess.learner.datasets.chess)": [[38, "my_chess.learner.datasets.chess.PGNGamesItr"]], "__init__() (my_chess.learner.datasets.chess.pgngamesitr method)": [[38, "my_chess.learner.datasets.chess.PGNGamesItr.__init__"]], "systemsemaphore (class in my_chess.learner.datasets.chess)": [[39, "my_chess.learner.datasets.chess.SystemSemaphore"]], "__init__() (my_chess.learner.datasets.chess.systemsemaphore method)": [[39, "my_chess.learner.datasets.chess.SystemSemaphore.__init__"]], "env() (in module my_chess.learner.datasets.chess)": [[40, "my_chess.learner.datasets.chess.env"]], "__init__() (my_chess.learner.datasets.chess.raw_env method)": [[41, "my_chess.learner.datasets.chess.raw_env.__init__"]], "action_space() (my_chess.learner.datasets.chess.raw_env method)": [[41, "my_chess.learner.datasets.chess.raw_env.action_space"]], "agent_iter() (my_chess.learner.datasets.chess.raw_env method)": [[41, "my_chess.learner.datasets.chess.raw_env.agent_iter"]], "close() (my_chess.learner.datasets.chess.raw_env method)": [[41, "my_chess.learner.datasets.chess.raw_env.close"]], "last() (my_chess.learner.datasets.chess.raw_env method)": [[41, "my_chess.learner.datasets.chess.raw_env.last"]], "observation_space() (my_chess.learner.datasets.chess.raw_env method)": [[41, "my_chess.learner.datasets.chess.raw_env.observation_space"]], "observation_to_fen() (my_chess.learner.datasets.chess.raw_env class method)": [[41, "my_chess.learner.datasets.chess.raw_env.observation_to_fen"]], "observe() (my_chess.learner.datasets.chess.raw_env method)": [[41, "my_chess.learner.datasets.chess.raw_env.observe"]], "raw_env (class in my_chess.learner.datasets.chess)": [[41, "my_chess.learner.datasets.chess.raw_env"]], "render() (my_chess.learner.datasets.chess.raw_env method)": [[41, "my_chess.learner.datasets.chess.raw_env.render"]], "reset() (my_chess.learner.datasets.chess.raw_env method)": [[41, "my_chess.learner.datasets.chess.raw_env.reset"]], "state() (my_chess.learner.datasets.chess.raw_env method)": [[41, "my_chess.learner.datasets.chess.raw_env.state"]], "step() (my_chess.learner.datasets.chess.raw_env method)": [[41, "my_chess.learner.datasets.chess.raw_env.step"]], "my_chess.learner.datasets.dataset": [[42, "module-my_chess.learner.datasets.dataset"]], "dataset (class in my_chess.learner.datasets.dataset)": [[43, "my_chess.learner.datasets.dataset.Dataset"]], "__init__() (my_chess.learner.datasets.dataset.dataset method)": [[43, "my_chess.learner.datasets.dataset.Dataset.__init__"]], "copy() (my_chess.learner.datasets.dataset.dataset method)": [[43, "my_chess.learner.datasets.dataset.Dataset.copy"]], "create_database() (my_chess.learner.datasets.dataset.dataset method)": [[43, "my_chess.learner.datasets.dataset.Dataset.create_database"]], "mem_safe_val_and_offset_to_string() (my_chess.learner.datasets.dataset.dataset static method)": [[43, "my_chess.learner.datasets.dataset.Dataset.mem_safe_val_and_offset_to_string"]], "pack_sequences() (my_chess.learner.datasets.dataset.dataset static method)": [[43, "my_chess.learner.datasets.dataset.Dataset.pack_sequences"]], "sequence_to_string() (my_chess.learner.datasets.dataset.dataset static method)": [[43, "my_chess.learner.datasets.dataset.Dataset.sequence_to_string"]], "string_to_sequence() (my_chess.learner.datasets.dataset.dataset static method)": [[43, "my_chess.learner.datasets.dataset.Dataset.string_to_sequence"]], "strings_to_mem_safe_val_and_offset() (my_chess.learner.datasets.dataset.dataset static method)": [[43, "my_chess.learner.datasets.dataset.Dataset.strings_to_mem_safe_val_and_offset"]], "unpack_sequence() (my_chess.learner.datasets.dataset.dataset static method)": [[43, "my_chess.learner.datasets.dataset.Dataset.unpack_sequence"]], "my_chess.learner.environments": [[44, "module-my_chess.learner.environments"]], "my_chess.learner.environments.chess": [[45, "module-my_chess.learner.environments.chess"]], "chess (class in my_chess.learner.environments.chess)": [[46, "my_chess.learner.environments.chess.Chess"]], "__init__() (my_chess.learner.environments.chess.chess method)": [[46, "my_chess.learner.environments.chess.Chess.__init__"]], "action_space_contains() (my_chess.learner.environments.chess.chess method)": [[46, "my_chess.learner.environments.chess.Chess.action_space_contains"]], "action_space_sample() (my_chess.learner.environments.chess.chess method)": [[46, "my_chess.learner.environments.chess.Chess.action_space_sample"]], "close() (my_chess.learner.environments.chess.chess method)": [[46, "my_chess.learner.environments.chess.Chess.close"]], "get_agent_ids() (my_chess.learner.environments.chess.chess method)": [[46, "my_chess.learner.environments.chess.Chess.get_agent_ids"]], "mirror_board_view() (my_chess.learner.environments.chess.chess static method)": [[46, "my_chess.learner.environments.chess.Chess.mirror_board_view"]], "np_random (my_chess.learner.environments.chess.chess property)": [[46, "my_chess.learner.environments.chess.Chess.np_random"]], "observation_space_contains() (my_chess.learner.environments.chess.chess method)": [[46, "my_chess.learner.environments.chess.Chess.observation_space_contains"]], "observation_space_sample() (my_chess.learner.environments.chess.chess method)": [[46, "my_chess.learner.environments.chess.Chess.observation_space_sample"]], "render() (my_chess.learner.environments.chess.chess method)": [[46, "my_chess.learner.environments.chess.Chess.render"]], "reset() (my_chess.learner.environments.chess.chess method)": [[46, "my_chess.learner.environments.chess.Chess.reset"]], "step() (my_chess.learner.environments.chess.chess method)": [[46, "my_chess.learner.environments.chess.Chess.step"]], "to_base_env() (my_chess.learner.environments.chess.chess method)": [[46, "my_chess.learner.environments.chess.Chess.to_base_env"]], "unwrapped (my_chess.learner.environments.chess.chess property)": [[46, "my_chess.learner.environments.chess.Chess.unwrapped"]], "with_agent_groups() (my_chess.learner.environments.chess.chess method)": [[46, "my_chess.learner.environments.chess.Chess.with_agent_groups"]], "chess_env() (in module my_chess.learner.environments.chess)": [[47, "my_chess.learner.environments.chess.chess_env"]], "my_chess.learner.environments.environment": [[48, "module-my_chess.learner.environments.environment"]], "assertoutofboundswrapper (class in my_chess.learner.environments.environment)": [[49, "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper"]], "__init__() (my_chess.learner.environments.environment.assertoutofboundswrapper method)": [[49, "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper.__init__"]], "action_space() (my_chess.learner.environments.environment.assertoutofboundswrapper method)": [[49, "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper.action_space"]], "agent_iter() (my_chess.learner.environments.environment.assertoutofboundswrapper method)": [[49, "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper.agent_iter"]], "close() (my_chess.learner.environments.environment.assertoutofboundswrapper method)": [[49, "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper.close"]], "last() (my_chess.learner.environments.environment.assertoutofboundswrapper method)": [[49, "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper.last"]], "observation_space() (my_chess.learner.environments.environment.assertoutofboundswrapper method)": [[49, "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper.observation_space"]], "observe() (my_chess.learner.environments.environment.assertoutofboundswrapper method)": [[49, "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper.observe"]], "render() (my_chess.learner.environments.environment.assertoutofboundswrapper method)": [[49, "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper.render"]], "reset() (my_chess.learner.environments.environment.assertoutofboundswrapper method)": [[49, "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper.reset"]], "state() (my_chess.learner.environments.environment.assertoutofboundswrapper method)": [[49, "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper.state"]], "step() (my_chess.learner.environments.environment.assertoutofboundswrapper method)": [[49, "my_chess.learner.environments.environment.AssertOutOfBoundsWrapper.step"]], "basewrapper (class in my_chess.learner.environments.environment)": [[50, "my_chess.learner.environments.environment.BaseWrapper"]], "__init__() (my_chess.learner.environments.environment.basewrapper method)": [[50, "my_chess.learner.environments.environment.BaseWrapper.__init__"]], "action_space() (my_chess.learner.environments.environment.basewrapper method)": [[50, "my_chess.learner.environments.environment.BaseWrapper.action_space"]], "agent_iter() (my_chess.learner.environments.environment.basewrapper method)": [[50, "my_chess.learner.environments.environment.BaseWrapper.agent_iter"]], "close() (my_chess.learner.environments.environment.basewrapper method)": [[50, "my_chess.learner.environments.environment.BaseWrapper.close"]], "last() (my_chess.learner.environments.environment.basewrapper method)": [[50, "my_chess.learner.environments.environment.BaseWrapper.last"]], "observation_space() (my_chess.learner.environments.environment.basewrapper method)": [[50, "my_chess.learner.environments.environment.BaseWrapper.observation_space"]], "observe() (my_chess.learner.environments.environment.basewrapper method)": [[50, "my_chess.learner.environments.environment.BaseWrapper.observe"]], "render() (my_chess.learner.environments.environment.basewrapper method)": [[50, "my_chess.learner.environments.environment.BaseWrapper.render"]], "reset() (my_chess.learner.environments.environment.basewrapper method)": [[50, "my_chess.learner.environments.environment.BaseWrapper.reset"]], "state() (my_chess.learner.environments.environment.basewrapper method)": [[50, "my_chess.learner.environments.environment.BaseWrapper.state"]], "step() (my_chess.learner.environments.environment.basewrapper method)": [[50, "my_chess.learner.environments.environment.BaseWrapper.step"]], "clipoutofboundswrapper (class in my_chess.learner.environments.environment)": [[51, "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper"]], "__init__() (my_chess.learner.environments.environment.clipoutofboundswrapper method)": [[51, "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper.__init__"]], "action_space() (my_chess.learner.environments.environment.clipoutofboundswrapper method)": [[51, "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper.action_space"]], "agent_iter() (my_chess.learner.environments.environment.clipoutofboundswrapper method)": [[51, "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper.agent_iter"]], "close() (my_chess.learner.environments.environment.clipoutofboundswrapper method)": [[51, "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper.close"]], "last() (my_chess.learner.environments.environment.clipoutofboundswrapper method)": [[51, "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper.last"]], "observation_space() (my_chess.learner.environments.environment.clipoutofboundswrapper method)": [[51, "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper.observation_space"]], "observe() (my_chess.learner.environments.environment.clipoutofboundswrapper method)": [[51, "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper.observe"]], "render() (my_chess.learner.environments.environment.clipoutofboundswrapper method)": [[51, "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper.render"]], "reset() (my_chess.learner.environments.environment.clipoutofboundswrapper method)": [[51, "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper.reset"]], "state() (my_chess.learner.environments.environment.clipoutofboundswrapper method)": [[51, "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper.state"]], "step() (my_chess.learner.environments.environment.clipoutofboundswrapper method)": [[51, "my_chess.learner.environments.environment.ClipOutOfBoundsWrapper.step"]], "environment (class in my_chess.learner.environments.environment)": [[52, "my_chess.learner.environments.environment.Environment"]], "__init__() (my_chess.learner.environments.environment.environment method)": [[52, "my_chess.learner.environments.environment.Environment.__init__"]], "action_space_contains() (my_chess.learner.environments.environment.environment method)": [[52, "my_chess.learner.environments.environment.Environment.action_space_contains"]], "action_space_sample() (my_chess.learner.environments.environment.environment method)": [[52, "my_chess.learner.environments.environment.Environment.action_space_sample"]], "close() (my_chess.learner.environments.environment.environment method)": [[52, "my_chess.learner.environments.environment.Environment.close"]], "get_agent_ids() (my_chess.learner.environments.environment.environment method)": [[52, "my_chess.learner.environments.environment.Environment.get_agent_ids"]], "np_random (my_chess.learner.environments.environment.environment property)": [[52, "my_chess.learner.environments.environment.Environment.np_random"]], "observation_space_contains() (my_chess.learner.environments.environment.environment method)": [[52, "my_chess.learner.environments.environment.Environment.observation_space_contains"]], "observation_space_sample() (my_chess.learner.environments.environment.environment method)": [[52, "my_chess.learner.environments.environment.Environment.observation_space_sample"]], "render() (my_chess.learner.environments.environment.environment method)": [[52, "my_chess.learner.environments.environment.Environment.render"]], "reset() (my_chess.learner.environments.environment.environment method)": [[52, "my_chess.learner.environments.environment.Environment.reset"]], "step() (my_chess.learner.environments.environment.environment method)": [[52, "my_chess.learner.environments.environment.Environment.step"]], "to_base_env() (my_chess.learner.environments.environment.environment method)": [[52, "my_chess.learner.environments.environment.Environment.to_base_env"]], "unwrapped (my_chess.learner.environments.environment.environment property)": [[52, "my_chess.learner.environments.environment.Environment.unwrapped"]], "with_agent_groups() (my_chess.learner.environments.environment.environment method)": [[52, "my_chess.learner.environments.environment.Environment.with_agent_groups"]], "orderenforcingwrapper (class in my_chess.learner.environments.environment)": [[53, "my_chess.learner.environments.environment.OrderEnforcingWrapper"]], "__init__() (my_chess.learner.environments.environment.orderenforcingwrapper method)": [[53, "my_chess.learner.environments.environment.OrderEnforcingWrapper.__init__"]], "action_space() (my_chess.learner.environments.environment.orderenforcingwrapper method)": [[53, "my_chess.learner.environments.environment.OrderEnforcingWrapper.action_space"]], "agent_iter() (my_chess.learner.environments.environment.orderenforcingwrapper method)": [[53, "my_chess.learner.environments.environment.OrderEnforcingWrapper.agent_iter"]], "close() (my_chess.learner.environments.environment.orderenforcingwrapper method)": [[53, "my_chess.learner.environments.environment.OrderEnforcingWrapper.close"]], "last() (my_chess.learner.environments.environment.orderenforcingwrapper method)": [[53, "my_chess.learner.environments.environment.OrderEnforcingWrapper.last"]], "observation_space() (my_chess.learner.environments.environment.orderenforcingwrapper method)": [[53, "my_chess.learner.environments.environment.OrderEnforcingWrapper.observation_space"]], "observe() (my_chess.learner.environments.environment.orderenforcingwrapper method)": [[53, "my_chess.learner.environments.environment.OrderEnforcingWrapper.observe"]], "render() (my_chess.learner.environments.environment.orderenforcingwrapper method)": [[53, "my_chess.learner.environments.environment.OrderEnforcingWrapper.render"]], "reset() (my_chess.learner.environments.environment.orderenforcingwrapper method)": [[53, "my_chess.learner.environments.environment.OrderEnforcingWrapper.reset"]], "state() (my_chess.learner.environments.environment.orderenforcingwrapper method)": [[53, "my_chess.learner.environments.environment.OrderEnforcingWrapper.state"]], "step() (my_chess.learner.environments.environment.orderenforcingwrapper method)": [[53, "my_chess.learner.environments.environment.OrderEnforcingWrapper.step"]], "pettingzooenv (class in my_chess.learner.environments.environment)": [[54, "my_chess.learner.environments.environment.PettingZooEnv"]], "__init__() (my_chess.learner.environments.environment.pettingzooenv method)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.__init__"]], "action_space_contains() (my_chess.learner.environments.environment.pettingzooenv method)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.action_space_contains"]], "action_space_sample() (my_chess.learner.environments.environment.pettingzooenv method)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.action_space_sample"]], "close() (my_chess.learner.environments.environment.pettingzooenv method)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.close"]], "get_agent_ids() (my_chess.learner.environments.environment.pettingzooenv method)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.get_agent_ids"]], "np_random (my_chess.learner.environments.environment.pettingzooenv property)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.np_random"]], "observation_space_contains() (my_chess.learner.environments.environment.pettingzooenv method)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.observation_space_contains"]], "observation_space_sample() (my_chess.learner.environments.environment.pettingzooenv method)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.observation_space_sample"]], "render() (my_chess.learner.environments.environment.pettingzooenv method)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.render"]], "reset() (my_chess.learner.environments.environment.pettingzooenv method)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.reset"]], "step() (my_chess.learner.environments.environment.pettingzooenv method)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.step"]], "to_base_env() (my_chess.learner.environments.environment.pettingzooenv method)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.to_base_env"]], "unwrapped (my_chess.learner.environments.environment.pettingzooenv property)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.unwrapped"]], "with_agent_groups() (my_chess.learner.environments.environment.pettingzooenv method)": [[54, "my_chess.learner.environments.environment.PettingZooEnv.with_agent_groups"]], "terminateillegalwrapper (class in my_chess.learner.environments.environment)": [[55, "my_chess.learner.environments.environment.TerminateIllegalWrapper"]], "__init__() (my_chess.learner.environments.environment.terminateillegalwrapper method)": [[55, "my_chess.learner.environments.environment.TerminateIllegalWrapper.__init__"]], "action_space() (my_chess.learner.environments.environment.terminateillegalwrapper method)": [[55, "my_chess.learner.environments.environment.TerminateIllegalWrapper.action_space"]], "agent_iter() (my_chess.learner.environments.environment.terminateillegalwrapper method)": [[55, "my_chess.learner.environments.environment.TerminateIllegalWrapper.agent_iter"]], "close() (my_chess.learner.environments.environment.terminateillegalwrapper method)": [[55, "my_chess.learner.environments.environment.TerminateIllegalWrapper.close"]], "last() (my_chess.learner.environments.environment.terminateillegalwrapper method)": [[55, "my_chess.learner.environments.environment.TerminateIllegalWrapper.last"]], "observation_space() (my_chess.learner.environments.environment.terminateillegalwrapper method)": [[55, "my_chess.learner.environments.environment.TerminateIllegalWrapper.observation_space"]], "observe() (my_chess.learner.environments.environment.terminateillegalwrapper method)": [[55, "my_chess.learner.environments.environment.TerminateIllegalWrapper.observe"]], "render() (my_chess.learner.environments.environment.terminateillegalwrapper method)": [[55, "my_chess.learner.environments.environment.TerminateIllegalWrapper.render"]], "reset() (my_chess.learner.environments.environment.terminateillegalwrapper method)": [[55, "my_chess.learner.environments.environment.TerminateIllegalWrapper.reset"]], "state() (my_chess.learner.environments.environment.terminateillegalwrapper method)": [[55, "my_chess.learner.environments.environment.TerminateIllegalWrapper.state"]], "step() (my_chess.learner.environments.environment.terminateillegalwrapper method)": [[55, "my_chess.learner.environments.environment.TerminateIllegalWrapper.step"]], "env_creator() (in module my_chess.learner.environments.environment)": [[56, "my_chess.learner.environments.environment.env_creator"]], "my_chess.learner.models": [[57, "module-my_chess.learner.models"]], "my_chess.learner.models.qlearner": [[58, "module-my_chess.learner.models.Qlearner"]], "qlearner (class in my_chess.learner.models.qlearner)": [[59, "my_chess.learner.models.Qlearner.QLearner"]], "__init__() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.__init__"]], "add_module() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.add_module"]], "apply() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.apply"]], "bfloat16() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.bfloat16"]], "buffers() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.buffers"]], "children() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.children"]], "context() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.context"]], "cpu() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.cpu"]], "cuda() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.cuda"]], "custom_loss() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.custom_loss"]], "double() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.double"]], "eval() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.eval"]], "extra_repr() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.extra_repr"]], "float() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.float"]], "forward() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.forward"]], "get_buffer() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.get_buffer"]], "get_extra_state() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.get_extra_state"]], "get_initial_state() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.get_initial_state"]], "get_parameter() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.get_parameter"]], "get_submodule() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.get_submodule"]], "half() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.half"]], "import_from_h5() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.import_from_h5"]], "ipu() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.ipu"]], "is_time_major() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.is_time_major"]], "last_output() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.last_output"]], "load_state_dict() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.load_state_dict"]], "metrics() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.metrics"]], "modules() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.modules"]], "named_buffers() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.named_buffers"]], "named_children() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.named_children"]], "named_modules() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.named_modules"]], "named_parameters() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.named_parameters"]], "parameters() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.parameters"]], "register_backward_hook() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.register_backward_hook"]], "register_buffer() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.register_buffer"]], "register_forward_hook() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.register_module"]], "register_parameter() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.register_parameter"]], "requires_grad_() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.requires_grad_"]], "set_extra_state() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.set_extra_state"]], "share_memory() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.share_memory"]], "state_dict() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.state_dict"]], "to() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.to"]], "to_empty() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.to_empty"]], "train() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.train"]], "trainable_variables() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.trainable_variables"]], "type() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.type"]], "value_function() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.value_function"]], "variables() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.variables"]], "xpu() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.xpu"]], "zero_grad() (my_chess.learner.models.qlearner.qlearner method)": [[59, "my_chess.learner.models.Qlearner.QLearner.zero_grad"]], "qlearnerconfig (class in my_chess.learner.models.qlearner)": [[60, "my_chess.learner.models.Qlearner.QLearnerConfig"]], "__init__() (my_chess.learner.models.qlearner.qlearnerconfig method)": [[60, "my_chess.learner.models.Qlearner.QLearnerConfig.__init__"]], "my_chess.learner.models.deepchess": [[61, "module-my_chess.learner.models.deepchess"]], "deepchessalphabeta (class in my_chess.learner.models.deepchess)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta"]], "__init__() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.__init__"]], "add_module() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.add_module"]], "apply() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.apply"]], "bfloat16() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.bfloat16"]], "buffers() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.buffers"]], "children() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.children"]], "cpu() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.cpu"]], "cuda() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.cuda"]], "double() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.double"]], "eval() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.eval"]], "extra_repr() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.extra_repr"]], "float() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.float"]], "forward() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.forward"]], "get_buffer() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.get_buffer"]], "get_extra_state() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.get_extra_state"]], "get_parameter() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.get_parameter"]], "get_submodule() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.get_submodule"]], "half() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.half"]], "ipu() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.ipu"]], "load_state_dict() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.load_state_dict"]], "max_value() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.max_value"]], "min_value() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.min_value"]], "modules() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.modules"]], "named_buffers() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.named_buffers"]], "named_children() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.named_children"]], "named_modules() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.named_modules"]], "named_parameters() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.named_parameters"]], "parameters() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.parameters"]], "register_backward_hook() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.register_backward_hook"]], "register_buffer() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.register_buffer"]], "register_forward_hook() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.register_module"]], "register_parameter() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.register_parameter"]], "requires_grad_() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.requires_grad_"]], "set_extra_state() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.set_extra_state"]], "share_memory() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.share_memory"]], "state_dict() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.state_dict"]], "to() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.to"]], "to_empty() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.to_empty"]], "train() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.train"]], "type() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.type"]], "xpu() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.xpu"]], "zero_grad() (my_chess.learner.models.deepchess.deepchessalphabeta method)": [[62, "my_chess.learner.models.deepchess.DeepChessAlphaBeta.zero_grad"]], "deepchessalphabetaconfig (class in my_chess.learner.models.deepchess)": [[63, "my_chess.learner.models.deepchess.DeepChessAlphaBetaConfig"]], "__init__() (my_chess.learner.models.deepchess.deepchessalphabetaconfig method)": [[63, "my_chess.learner.models.deepchess.DeepChessAlphaBetaConfig.__init__"]], "deepchessevaluator (class in my_chess.learner.models.deepchess)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator"]], "__init__() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.__init__"]], "add_module() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.add_module"]], "apply() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.apply"]], "bfloat16() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.bfloat16"]], "buffers() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.buffers"]], "children() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.children"]], "cpu() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.cpu"]], "cuda() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.cuda"]], "double() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.double"]], "eval() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.eval"]], "extra_repr() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.extra_repr"]], "float() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.float"]], "forward() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.forward"]], "get_buffer() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.get_buffer"]], "get_extra_state() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.get_extra_state"]], "get_parameter() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.get_parameter"]], "get_submodule() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.get_submodule"]], "half() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.half"]], "ipu() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.ipu"]], "load_state_dict() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.load_state_dict"]], "modules() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.modules"]], "named_buffers() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.named_buffers"]], "named_children() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.named_children"]], "named_modules() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.named_modules"]], "named_parameters() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.named_parameters"]], "parameters() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.parameters"]], "register_backward_hook() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.register_backward_hook"]], "register_buffer() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.register_buffer"]], "register_forward_hook() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.register_module"]], "register_parameter() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.register_parameter"]], "requires_grad_() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.requires_grad_"]], "set_extra_state() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.set_extra_state"]], "share_memory() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.share_memory"]], "state_dict() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.state_dict"]], "to() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.to"]], "to_empty() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.to_empty"]], "train() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.train"]], "type() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.type"]], "xpu() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.xpu"]], "zero_grad() (my_chess.learner.models.deepchess.deepchessevaluator method)": [[64, "my_chess.learner.models.deepchess.DeepChessEvaluator.zero_grad"]], "deepchessevaluatorconfig (class in my_chess.learner.models.deepchess)": [[65, "my_chess.learner.models.deepchess.DeepChessEvaluatorConfig"]], "__init__() (my_chess.learner.models.deepchess.deepchessevaluatorconfig method)": [[65, "my_chess.learner.models.deepchess.DeepChessEvaluatorConfig.__init__"]], "deepchessfe (class in my_chess.learner.models.deepchess)": [[66, "my_chess.learner.models.deepchess.DeepChessFE"]], "__init__() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.__init__"]], "add_module() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.add_module"]], "apply() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.apply"]], "bfloat16() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.bfloat16"]], "buffers() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.buffers"]], "children() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.children"]], "cpu() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.cpu"]], "cuda() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.cuda"]], "decoder() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.decoder"]], "double() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.double"]], "eval() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.eval"]], "extra_repr() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.extra_repr"]], "float() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.float"]], "forward() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.forward"]], "get_buffer() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.get_buffer"]], "get_extra_state() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.get_extra_state"]], "get_parameter() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.get_parameter"]], "get_submodule() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.get_submodule"]], "half() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.half"]], "ipu() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.ipu"]], "load_state_dict() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.load_state_dict"]], "modules() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.modules"]], "named_buffers() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.named_buffers"]], "named_children() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.named_children"]], "named_modules() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.named_modules"]], "named_parameters() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.named_parameters"]], "parameters() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.parameters"]], "register_backward_hook() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.register_backward_hook"]], "register_buffer() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.register_buffer"]], "register_forward_hook() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.register_module"]], "register_parameter() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.register_parameter"]], "requires_grad_() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.requires_grad_"]], "set_extra_state() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.set_extra_state"]], "share_memory() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.share_memory"]], "state_dict() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.state_dict"]], "to() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.to"]], "to_empty() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.to_empty"]], "train() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.train"]], "type() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.type"]], "xpu() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.xpu"]], "zero_grad() (my_chess.learner.models.deepchess.deepchessfe method)": [[66, "my_chess.learner.models.deepchess.DeepChessFE.zero_grad"]], "deepchessfeconfig (class in my_chess.learner.models.deepchess)": [[67, "my_chess.learner.models.deepchess.DeepChessFEConfig"]], "__init__() (my_chess.learner.models.deepchess.deepchessfeconfig method)": [[67, "my_chess.learner.models.deepchess.DeepChessFEConfig.__init__"]], "deepchessrl (class in my_chess.learner.models.deepchess)": [[68, "my_chess.learner.models.deepchess.DeepChessRL"]], "__init__() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.__init__"]], "add_module() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.add_module"]], "apply() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.apply"]], "bfloat16() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.bfloat16"]], "buffers() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.buffers"]], "children() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.children"]], "context() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.context"]], "cpu() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.cpu"]], "cuda() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.cuda"]], "custom_loss() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.custom_loss"]], "double() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.double"]], "eval() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.eval"]], "extra_repr() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.extra_repr"]], "float() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.float"]], "forward() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.forward"]], "get_buffer() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.get_buffer"]], "get_extra_state() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.get_extra_state"]], "get_initial_state() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.get_initial_state"]], "get_parameter() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.get_parameter"]], "get_submodule() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.get_submodule"]], "half() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.half"]], "import_from_h5() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.import_from_h5"]], "ipu() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.ipu"]], "is_time_major() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.is_time_major"]], "last_output() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.last_output"]], "load_state_dict() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.load_state_dict"]], "metrics() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.metrics"]], "modules() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.modules"]], "named_buffers() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.named_buffers"]], "named_children() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.named_children"]], "named_modules() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.named_modules"]], "named_parameters() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.named_parameters"]], "parameters() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.parameters"]], "register_backward_hook() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.register_backward_hook"]], "register_buffer() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.register_buffer"]], "register_forward_hook() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.register_module"]], "register_parameter() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.register_parameter"]], "requires_grad_() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.requires_grad_"]], "set_extra_state() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.set_extra_state"]], "share_memory() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.share_memory"]], "state_dict() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.state_dict"]], "to() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.to"]], "to_empty() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.to_empty"]], "train() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.train"]], "trainable_variables() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.trainable_variables"]], "type() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.type"]], "value_function() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.value_function"]], "variables() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.variables"]], "xpu() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.xpu"]], "zero_grad() (my_chess.learner.models.deepchess.deepchessrl method)": [[68, "my_chess.learner.models.deepchess.DeepChessRL.zero_grad"]], "deepchessrlconfig (class in my_chess.learner.models.deepchess)": [[69, "my_chess.learner.models.deepchess.DeepChessRLConfig"]], "__init__() (my_chess.learner.models.deepchess.deepchessrlconfig method)": [[69, "my_chess.learner.models.deepchess.DeepChessRLConfig.__init__"]], "nextpositions (class in my_chess.learner.models.deepchess)": [[70, "my_chess.learner.models.deepchess.NextPositions"]], "__init__() (my_chess.learner.models.deepchess.nextpositions method)": [[70, "my_chess.learner.models.deepchess.NextPositions.__init__"]], "nextpositionsgenerator (class in my_chess.learner.models.deepchess)": [[71, "my_chess.learner.models.deepchess.NextPositionsGenerator"]], "__init__() (my_chess.learner.models.deepchess.nextpositionsgenerator method)": [[71, "my_chess.learner.models.deepchess.NextPositionsGenerator.__init__"]], "my_chess.learner.models.model": [[72, "module-my_chess.learner.models.model"]], "model (class in my_chess.learner.models.model)": [[73, "my_chess.learner.models.model.Model"]], "__init__() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.__init__"]], "add_module() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.add_module"]], "apply() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.apply"]], "bfloat16() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.bfloat16"]], "buffers() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.buffers"]], "children() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.children"]], "cpu() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.cpu"]], "cuda() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.cuda"]], "double() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.double"]], "eval() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.eval"]], "extra_repr() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.extra_repr"]], "float() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.float"]], "forward() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.forward"]], "get_buffer() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.get_buffer"]], "get_extra_state() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.get_extra_state"]], "get_parameter() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.get_parameter"]], "get_submodule() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.get_submodule"]], "half() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.half"]], "ipu() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.ipu"]], "load_state_dict() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.load_state_dict"]], "modules() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.modules"]], "named_buffers() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.named_buffers"]], "named_children() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.named_children"]], "named_modules() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.named_modules"]], "named_parameters() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.named_parameters"]], "parameters() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.parameters"]], "register_backward_hook() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.register_backward_hook"]], "register_buffer() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.register_buffer"]], "register_forward_hook() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.register_module"]], "register_parameter() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.register_parameter"]], "requires_grad_() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.requires_grad_"]], "set_extra_state() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.set_extra_state"]], "share_memory() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.share_memory"]], "state_dict() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.state_dict"]], "to() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.to"]], "to_empty() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.to_empty"]], "train() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.train"]], "type() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.type"]], "xpu() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.xpu"]], "zero_grad() (my_chess.learner.models.model.model method)": [[73, "my_chess.learner.models.model.Model.zero_grad"]], "modelautoencodable (class in my_chess.learner.models.model)": [[74, "my_chess.learner.models.model.ModelAutoEncodable"]], "__init__() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.__init__"]], "add_module() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.add_module"]], "apply() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.apply"]], "bfloat16() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.bfloat16"]], "buffers() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.buffers"]], "children() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.children"]], "cpu() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.cpu"]], "cuda() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.cuda"]], "decoder() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.decoder"]], "double() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.double"]], "eval() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.eval"]], "extra_repr() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.extra_repr"]], "float() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.float"]], "forward() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.forward"]], "get_buffer() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.get_buffer"]], "get_extra_state() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.get_extra_state"]], "get_parameter() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.get_parameter"]], "get_submodule() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.get_submodule"]], "half() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.half"]], "ipu() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.ipu"]], "load_state_dict() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.load_state_dict"]], "modules() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.modules"]], "named_buffers() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.named_buffers"]], "named_children() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.named_children"]], "named_modules() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.named_modules"]], "named_parameters() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.named_parameters"]], "parameters() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.parameters"]], "register_backward_hook() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.register_backward_hook"]], "register_buffer() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.register_buffer"]], "register_forward_hook() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.register_module"]], "register_parameter() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.register_parameter"]], "requires_grad_() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.requires_grad_"]], "set_extra_state() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.set_extra_state"]], "share_memory() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.share_memory"]], "state_dict() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.state_dict"]], "to() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.to"]], "to_empty() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.to_empty"]], "train() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.train"]], "type() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.type"]], "xpu() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.xpu"]], "zero_grad() (my_chess.learner.models.model.modelautoencodable method)": [[74, "my_chess.learner.models.model.ModelAutoEncodable.zero_grad"]], "modelconfig (class in my_chess.learner.models.model)": [[75, "my_chess.learner.models.model.ModelConfig"]], "__init__() (my_chess.learner.models.model.modelconfig method)": [[75, "my_chess.learner.models.model.ModelConfig.__init__"]], "modelrllib (class in my_chess.learner.models.model)": [[76, "my_chess.learner.models.model.ModelRLLIB"]], "__init__() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.__init__"]], "add_module() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.add_module"]], "apply() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.apply"]], "bfloat16() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.bfloat16"]], "buffers() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.buffers"]], "children() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.children"]], "context() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.context"]], "cpu() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.cpu"]], "cuda() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.cuda"]], "custom_loss() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.custom_loss"]], "double() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.double"]], "eval() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.eval"]], "extra_repr() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.extra_repr"]], "float() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.float"]], "forward() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.forward"]], "get_buffer() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.get_buffer"]], "get_extra_state() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.get_extra_state"]], "get_initial_state() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.get_initial_state"]], "get_parameter() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.get_parameter"]], "get_submodule() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.get_submodule"]], "half() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.half"]], "import_from_h5() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.import_from_h5"]], "ipu() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.ipu"]], "is_time_major() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.is_time_major"]], "last_output() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.last_output"]], "load_state_dict() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.load_state_dict"]], "metrics() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.metrics"]], "modules() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.modules"]], "named_buffers() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.named_buffers"]], "named_children() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.named_children"]], "named_modules() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.named_modules"]], "named_parameters() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.named_parameters"]], "parameters() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.parameters"]], "register_backward_hook() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.register_backward_hook"]], "register_buffer() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.register_buffer"]], "register_forward_hook() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.register_module"]], "register_parameter() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.register_parameter"]], "requires_grad_() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.requires_grad_"]], "set_extra_state() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.set_extra_state"]], "share_memory() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.share_memory"]], "state_dict() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.state_dict"]], "to() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.to"]], "to_empty() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.to_empty"]], "train() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.train"]], "trainable_variables() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.trainable_variables"]], "type() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.type"]], "value_function() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.value_function"]], "variables() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.variables"]], "xpu() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.xpu"]], "zero_grad() (my_chess.learner.models.model.modelrllib method)": [[76, "my_chess.learner.models.model.ModelRLLIB.zero_grad"]], "modelrrlibconfig (class in my_chess.learner.models.model)": [[77, "my_chess.learner.models.model.ModelRRLIBConfig"]], "__init__() (my_chess.learner.models.model.modelrrlibconfig method)": [[77, "my_chess.learner.models.model.ModelRRLIBConfig.__init__"]], "my_chess.learner.models.tobenamed": [[78, "module-my_chess.learner.models.tobenamed"]], "featureprojector (class in my_chess.learner.models.tobenamed)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector"]], "__init__() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.__init__"]], "add_module() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.add_module"]], "apply() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.apply"]], "bfloat16() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.bfloat16"]], "buffers() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.buffers"]], "children() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.children"]], "cpu() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.cpu"]], "cuda() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.cuda"]], "double() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.double"]], "eval() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.eval"]], "extra_repr() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.extra_repr"]], "float() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.float"]], "forward() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.forward"]], "get_buffer() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.get_buffer"]], "get_extra_state() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.get_extra_state"]], "get_parameter() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.get_parameter"]], "get_submodule() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.get_submodule"]], "half() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.half"]], "ipu() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.ipu"]], "load_state_dict() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.load_state_dict"]], "modules() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.modules"]], "named_buffers() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.named_buffers"]], "named_children() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.named_children"]], "named_modules() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.named_modules"]], "named_parameters() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.named_parameters"]], "parameters() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.parameters"]], "register_backward_hook() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.register_backward_hook"]], "register_buffer() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.register_buffer"]], "register_forward_hook() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.register_module"]], "register_parameter() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.register_parameter"]], "requires_grad_() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.requires_grad_"]], "set_extra_state() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.set_extra_state"]], "share_memory() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.share_memory"]], "state_dict() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.state_dict"]], "to() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.to"]], "to_empty() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.to_empty"]], "train() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.train"]], "type() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.type"]], "xpu() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.xpu"]], "zero_grad() (my_chess.learner.models.tobenamed.featureprojector method)": [[79, "my_chess.learner.models.tobenamed.FeatureProjector.zero_grad"]], "positionalembedder (class in my_chess.learner.models.tobenamed)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder"]], "__init__() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.__init__"]], "add_module() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.add_module"]], "apply() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.apply"]], "bfloat16() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.bfloat16"]], "buffers() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.buffers"]], "children() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.children"]], "cpu() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.cpu"]], "cuda() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.cuda"]], "double() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.double"]], "eval() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.eval"]], "extra_repr() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.extra_repr"]], "float() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.float"]], "forward() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.forward"]], "get_buffer() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.get_buffer"]], "get_extra_state() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.get_extra_state"]], "get_parameter() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.get_parameter"]], "get_submodule() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.get_submodule"]], "half() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.half"]], "ipu() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.ipu"]], "load_state_dict() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.load_state_dict"]], "modules() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.modules"]], "named_buffers() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.named_buffers"]], "named_children() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.named_children"]], "named_modules() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.named_modules"]], "named_parameters() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.named_parameters"]], "parameters() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.parameters"]], "register_backward_hook() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.register_backward_hook"]], "register_buffer() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.register_buffer"]], "register_forward_hook() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.register_module"]], "register_parameter() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.register_parameter"]], "requires_grad_() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.requires_grad_"]], "set_extra_state() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.set_extra_state"]], "share_memory() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.share_memory"]], "state_dict() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.state_dict"]], "to() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.to"]], "to_empty() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.to_empty"]], "train() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.train"]], "type() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.type"]], "xpu() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.xpu"]], "zero_grad() (my_chess.learner.models.tobenamed.positionalembedder method)": [[80, "my_chess.learner.models.tobenamed.PositionalEmbedder.zero_grad"]], "swinfeatureextractor (class in my_chess.learner.models.tobenamed)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor"]], "__init__() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.__init__"]], "add_module() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.add_module"]], "apply() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.apply"]], "bfloat16() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.bfloat16"]], "buffers() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.buffers"]], "children() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.children"]], "cpu() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.cpu"]], "cuda() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.cuda"]], "double() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.double"]], "eval() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.eval"]], "extra_repr() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.extra_repr"]], "float() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.float"]], "forward() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.forward"]], "get_buffer() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.get_buffer"]], "get_extra_state() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.get_extra_state"]], "get_parameter() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.get_parameter"]], "get_submodule() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.get_submodule"]], "half() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.half"]], "ipu() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.ipu"]], "load_state_dict() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.load_state_dict"]], "modules() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.modules"]], "named_buffers() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.named_buffers"]], "named_children() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.named_children"]], "named_modules() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.named_modules"]], "named_parameters() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.named_parameters"]], "parameters() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.parameters"]], "register_backward_hook() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.register_backward_hook"]], "register_buffer() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.register_buffer"]], "register_forward_hook() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.register_module"]], "register_parameter() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.register_parameter"]], "requires_grad_() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.requires_grad_"]], "set_extra_state() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.set_extra_state"]], "share_memory() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.share_memory"]], "state_dict() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.state_dict"]], "to() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.to"]], "to_empty() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.to_empty"]], "train() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.train"]], "type() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.type"]], "xpu() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.xpu"]], "zero_grad() (my_chess.learner.models.tobenamed.swinfeatureextractor method)": [[81, "my_chess.learner.models.tobenamed.SwinFeatureExtractor.zero_grad"]], "tobenamed (class in my_chess.learner.models.tobenamed)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed"]], "__init__() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.__init__"]], "add_module() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.add_module"]], "apply() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.apply"]], "bfloat16() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.bfloat16"]], "buffers() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.buffers"]], "children() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.children"]], "context() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.context"]], "cpu() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.cpu"]], "cuda() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.cuda"]], "custom_loss() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.custom_loss"]], "double() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.double"]], "eval() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.eval"]], "extra_repr() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.extra_repr"]], "float() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.float"]], "forward() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.forward"]], "get_buffer() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.get_buffer"]], "get_extra_state() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.get_extra_state"]], "get_initial_state() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.get_initial_state"]], "get_parameter() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.get_parameter"]], "get_submodule() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.get_submodule"]], "half() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.half"]], "import_from_h5() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.import_from_h5"]], "ipu() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.ipu"]], "is_time_major() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.is_time_major"]], "last_output() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.last_output"]], "load_state_dict() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.load_state_dict"]], "metrics() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.metrics"]], "modules() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.modules"]], "named_buffers() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.named_buffers"]], "named_children() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.named_children"]], "named_modules() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.named_modules"]], "named_parameters() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.named_parameters"]], "parameters() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.parameters"]], "register_backward_hook() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.register_backward_hook"]], "register_buffer() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.register_buffer"]], "register_forward_hook() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.register_module"]], "register_parameter() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.register_parameter"]], "requires_grad_() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.requires_grad_"]], "set_extra_state() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.set_extra_state"]], "share_memory() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.share_memory"]], "state_dict() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.state_dict"]], "to() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.to"]], "to_empty() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.to_empty"]], "train() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.train"]], "trainable_variables() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.trainable_variables"]], "type() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.type"]], "value_function() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.value_function"]], "variables() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.variables"]], "xpu() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.xpu"]], "zero_grad() (my_chess.learner.models.tobenamed.tobenamed method)": [[82, "my_chess.learner.models.tobenamed.ToBeNamed.zero_grad"]], "tobenamedconfig (class in my_chess.learner.models.tobenamed)": [[83, "my_chess.learner.models.tobenamed.ToBeNamedConfig"]], "__init__() (my_chess.learner.models.tobenamed.tobenamedconfig method)": [[83, "my_chess.learner.models.tobenamed.ToBeNamedConfig.__init__"]], "my_chess.learner.models.transformerchess": [[84, "module-my_chess.learner.models.transformerchess"]], "transformerchessfe (class in my_chess.learner.models.transformerchess)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE"]], "__init__() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.__init__"]], "add_module() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.add_module"]], "apply() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.apply"]], "bfloat16() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.bfloat16"]], "buffers() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.buffers"]], "children() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.children"]], "cpu() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.cpu"]], "cuda() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.cuda"]], "decoder() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.decoder"]], "double() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.double"]], "eval() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.eval"]], "extra_repr() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.extra_repr"]], "float() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.float"]], "forward() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.forward"]], "get_buffer() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.get_buffer"]], "get_extra_state() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.get_extra_state"]], "get_parameter() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.get_parameter"]], "get_submodule() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.get_submodule"]], "half() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.half"]], "ipu() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.ipu"]], "load_state_dict() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.load_state_dict"]], "modules() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.modules"]], "named_buffers() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.named_buffers"]], "named_children() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.named_children"]], "named_modules() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.named_modules"]], "named_parameters() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.named_parameters"]], "parameters() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.parameters"]], "register_backward_hook() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.register_backward_hook"]], "register_buffer() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.register_buffer"]], "register_forward_hook() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.register_forward_hook"]], "register_forward_pre_hook() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.register_forward_pre_hook"]], "register_full_backward_hook() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.register_full_backward_hook"]], "register_load_state_dict_post_hook() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.register_load_state_dict_post_hook"]], "register_module() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.register_module"]], "register_parameter() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.register_parameter"]], "requires_grad_() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.requires_grad_"]], "set_extra_state() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.set_extra_state"]], "share_memory() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.share_memory"]], "state_dict() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.state_dict"]], "to() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.to"]], "to_empty() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.to_empty"]], "train() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.train"]], "type() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.type"]], "xpu() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.xpu"]], "zero_grad() (my_chess.learner.models.transformerchess.transformerchessfe method)": [[85, "my_chess.learner.models.transformerchess.TransformerChessFE.zero_grad"]], "transformerchessfeconfig (class in my_chess.learner.models.transformerchess)": [[86, "my_chess.learner.models.transformerchess.TransformerChessFEConfig"]], "__init__() (my_chess.learner.models.transformerchess.transformerchessfeconfig method)": [[86, "my_chess.learner.models.transformerchess.TransformerChessFEConfig.__init__"]], "my_chess.learner.policies": [[87, "module-my_chess.learner.policies"]], "my_chess.learner.policies.policy": [[88, "module-my_chess.learner.policies.policy"]], "policy (class in my_chess.learner.policies.policy)": [[89, "my_chess.learner.policies.policy.Policy"]], "__init__() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.__init__"]], "action_distribution_fn() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.action_distribution_fn"]], "action_sampler_fn() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.action_sampler_fn"]], "apply() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.apply"]], "apply_gradients() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.apply_gradients"]], "compute_actions() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.compute_actions"]], "compute_actions_from_input_dict() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.compute_actions_from_input_dict"]], "compute_gradients() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.compute_gradients"]], "compute_log_likelihoods() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.compute_log_likelihoods"]], "compute_single_action() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.compute_single_action"]], "export_checkpoint() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.export_checkpoint"]], "export_model() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.export_model"]], "extra_action_out() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.extra_action_out"]], "extra_compute_grad_fetches() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.extra_compute_grad_fetches"]], "extra_grad_process() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.extra_grad_process"]], "from_checkpoint() (my_chess.learner.policies.policy.policy static method)": [[89, "my_chess.learner.policies.policy.Policy.from_checkpoint"]], "from_state() (my_chess.learner.policies.policy.policy static method)": [[89, "my_chess.learner.policies.policy.Policy.from_state"]], "get_batch_divisibility_req() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.get_batch_divisibility_req"]], "get_connector_metrics() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.get_connector_metrics"]], "get_exploration_state() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.get_exploration_state"]], "get_host() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.get_host"]], "get_initial_state() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.get_initial_state"]], "get_num_samples_loaded_into_buffer() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.get_num_samples_loaded_into_buffer"]], "get_session() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.get_session"]], "get_state() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.get_state"]], "get_tower_stats() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.get_tower_stats"]], "get_weights() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.get_weights"]], "import_model_from_h5() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.import_model_from_h5"]], "init_view_requirements() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.init_view_requirements"]], "is_recurrent() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.is_recurrent"]], "learn_on_batch() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.learn_on_batch"]], "learn_on_batch_from_replay_buffer() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.learn_on_batch_from_replay_buffer"]], "learn_on_loaded_batch() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.learn_on_loaded_batch"]], "load_batch_into_buffer() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.load_batch_into_buffer"]], "loss() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.loss"]], "make_model() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.make_model"]], "make_model_and_action_dist() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.make_model_and_action_dist"]], "make_rl_module() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.make_rl_module"]], "maybe_add_time_dimension() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.maybe_add_time_dimension"]], "maybe_remove_time_dimension() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.maybe_remove_time_dimension"]], "num_state_tensors() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.num_state_tensors"]], "on_global_var_update() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.on_global_var_update"]], "optimizer() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.optimizer"]], "postprocess_trajectory() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.postprocess_trajectory"]], "reset_connectors() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.reset_connectors"]], "restore_connectors() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.restore_connectors"]], "set_state() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.set_state"]], "set_weights() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.set_weights"]], "stats_fn() (my_chess.learner.policies.policy.policy method)": [[89, "my_chess.learner.policies.policy.Policy.stats_fn"]], "policyconfig (class in my_chess.learner.policies.policy)": [[90, "my_chess.learner.policies.policy.PolicyConfig"]], "__init__() (my_chess.learner.policies.policy.policyconfig method)": [[90, "my_chess.learner.policies.policy.PolicyConfig.__init__"]], "my_chess.learner.policies.ppo_cust": [[91, "module-my_chess.learner.policies.ppo_cust"]], "ppopolicy (class in my_chess.learner.policies.ppo_cust)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy"]], "__init__() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.__init__"]], "action_distribution_fn() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.action_distribution_fn"]], "action_sampler_fn() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.action_sampler_fn"]], "apply() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.apply"]], "apply_gradients() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.apply_gradients"]], "compute_actions() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.compute_actions"]], "compute_actions_from_input_dict() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.compute_actions_from_input_dict"]], "compute_gradients() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.compute_gradients"]], "compute_log_likelihoods() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.compute_log_likelihoods"]], "compute_single_action() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.compute_single_action"]], "export_checkpoint() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.export_checkpoint"]], "export_model() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.export_model"]], "extra_action_out() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.extra_action_out"]], "extra_compute_grad_fetches() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.extra_compute_grad_fetches"]], "extra_grad_process() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.extra_grad_process"]], "from_checkpoint() (my_chess.learner.policies.ppo_cust.ppopolicy static method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.from_checkpoint"]], "from_state() (my_chess.learner.policies.ppo_cust.ppopolicy static method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.from_state"]], "get_batch_divisibility_req() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.get_batch_divisibility_req"]], "get_connector_metrics() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.get_connector_metrics"]], "get_exploration_state() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.get_exploration_state"]], "get_host() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.get_host"]], "get_initial_state() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.get_initial_state"]], "get_num_samples_loaded_into_buffer() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.get_num_samples_loaded_into_buffer"]], "get_session() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.get_session"]], "get_state() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.get_state"]], "get_tower_stats() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.get_tower_stats"]], "get_weights() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.get_weights"]], "import_model_from_h5() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.import_model_from_h5"]], "init_view_requirements() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.init_view_requirements"]], "is_recurrent() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.is_recurrent"]], "learn_on_batch() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.learn_on_batch"]], "learn_on_batch_from_replay_buffer() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.learn_on_batch_from_replay_buffer"]], "learn_on_loaded_batch() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.learn_on_loaded_batch"]], "load_batch_into_buffer() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.load_batch_into_buffer"]], "loss() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.loss"]], "make_model() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.make_model"]], "make_model_and_action_dist() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.make_model_and_action_dist"]], "make_rl_module() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.make_rl_module"]], "maybe_add_time_dimension() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.maybe_add_time_dimension"]], "maybe_remove_time_dimension() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.maybe_remove_time_dimension"]], "num_state_tensors() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.num_state_tensors"]], "on_global_var_update() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.on_global_var_update"]], "optimizer() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.optimizer"]], "postprocess_trajectory() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.postprocess_trajectory"]], "reset_connectors() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.reset_connectors"]], "restore_connectors() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.restore_connectors"]], "set_state() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.set_state"]], "set_weights() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.set_weights"]], "stats_fn() (my_chess.learner.policies.ppo_cust.ppopolicy method)": [[92, "my_chess.learner.policies.ppo_cust.PPOPolicy.stats_fn"]], "ppopolicyconfig (class in my_chess.learner.policies.ppo_cust)": [[93, "my_chess.learner.policies.ppo_cust.PPOPolicyConfig"]], "__init__() (my_chess.learner.policies.ppo_cust.ppopolicyconfig method)": [[93, "my_chess.learner.policies.ppo_cust.PPOPolicyConfig.__init__"]], "my_chess.learner.policies.random": [[94, "module-my_chess.learner.policies.random"]], "randompolicy (class in my_chess.learner.policies.random)": [[95, "my_chess.learner.policies.random.RandomPolicy"]], "__init__() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.__init__"]], "action_distribution_fn() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.action_distribution_fn"]], "action_sampler_fn() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.action_sampler_fn"]], "apply() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.apply"]], "apply_gradients() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.apply_gradients"]], "compute_actions() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.compute_actions"]], "compute_actions_from_input_dict() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.compute_actions_from_input_dict"]], "compute_gradients() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.compute_gradients"]], "compute_log_likelihoods() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.compute_log_likelihoods"]], "compute_single_action() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.compute_single_action"]], "export_checkpoint() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.export_checkpoint"]], "export_model() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.export_model"]], "extra_action_out() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.extra_action_out"]], "extra_compute_grad_fetches() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.extra_compute_grad_fetches"]], "extra_grad_process() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.extra_grad_process"]], "from_checkpoint() (my_chess.learner.policies.random.randompolicy static method)": [[95, "my_chess.learner.policies.random.RandomPolicy.from_checkpoint"]], "from_state() (my_chess.learner.policies.random.randompolicy static method)": [[95, "my_chess.learner.policies.random.RandomPolicy.from_state"]], "get_batch_divisibility_req() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.get_batch_divisibility_req"]], "get_connector_metrics() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.get_connector_metrics"]], "get_exploration_state() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.get_exploration_state"]], "get_host() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.get_host"]], "get_initial_state() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.get_initial_state"]], "get_num_samples_loaded_into_buffer() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.get_num_samples_loaded_into_buffer"]], "get_session() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.get_session"]], "get_state() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.get_state"]], "get_tower_stats() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.get_tower_stats"]], "get_weights() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.get_weights"]], "import_model_from_h5() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.import_model_from_h5"]], "init_view_requirements() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.init_view_requirements"]], "is_recurrent() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.is_recurrent"]], "learn_on_batch() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.learn_on_batch"]], "learn_on_batch_from_replay_buffer() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.learn_on_batch_from_replay_buffer"]], "learn_on_loaded_batch() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.learn_on_loaded_batch"]], "load_batch_into_buffer() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.load_batch_into_buffer"]], "loss() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.loss"]], "make_model() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.make_model"]], "make_model_and_action_dist() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.make_model_and_action_dist"]], "make_rl_module() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.make_rl_module"]], "maybe_add_time_dimension() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.maybe_add_time_dimension"]], "maybe_remove_time_dimension() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.maybe_remove_time_dimension"]], "num_state_tensors() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.num_state_tensors"]], "on_global_var_update() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.on_global_var_update"]], "optimizer() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.optimizer"]], "postprocess_trajectory() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.postprocess_trajectory"]], "reset_connectors() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.reset_connectors"]], "restore_connectors() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.restore_connectors"]], "set_state() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.set_state"]], "set_weights() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.set_weights"]], "stats_fn() (my_chess.learner.policies.random.randompolicy method)": [[95, "my_chess.learner.policies.random.RandomPolicy.stats_fn"]], "randompolicyconfig (class in my_chess.learner.policies.random)": [[96, "my_chess.learner.policies.random.RandomPolicyConfig"]], "__init__() (my_chess.learner.policies.random.randompolicyconfig method)": [[96, "my_chess.learner.policies.random.RandomPolicyConfig.__init__"]], "my_chess.scripts": [[97, "module-my_chess.scripts"]], "my_chess.scripts.scripts": [[98, "module-my_chess.scripts.scripts"]], "argumentcollector (class in my_chess.scripts.scripts)": [[99, "my_chess.scripts.scripts.ArgumentCollector"]], "__init__() (my_chess.scripts.scripts.argumentcollector method)": [[99, "my_chess.scripts.scripts.ArgumentCollector.__init__"]], "collectargs() (my_chess.scripts.scripts.argumentcollector method)": [[99, "my_chess.scripts.scripts.ArgumentCollector.collectArgs"]], "humanvsbot (class in my_chess.scripts.scripts)": [[100, "my_chess.scripts.scripts.HumanVsBot"]], "__init__() (my_chess.scripts.scripts.humanvsbot method)": [[100, "my_chess.scripts.scripts.HumanVsBot.__init__"]], "complete_run() (my_chess.scripts.scripts.humanvsbot method)": [[100, "my_chess.scripts.scripts.HumanVsBot.complete_run"]], "run() (my_chess.scripts.scripts.humanvsbot method)": [[100, "my_chess.scripts.scripts.HumanVsBot.run"]], "script (class in my_chess.scripts.scripts)": [[101, "my_chess.scripts.scripts.Script"]], "__init__() (my_chess.scripts.scripts.script method)": [[101, "my_chess.scripts.scripts.Script.__init__"]], "complete_run() (my_chess.scripts.scripts.script method)": [[101, "my_chess.scripts.scripts.Script.complete_run"]], "scriptchooser (class in my_chess.scripts.scripts)": [[102, "my_chess.scripts.scripts.ScriptChooser"]], "__init__() (my_chess.scripts.scripts.scriptchooser method)": [[102, "my_chess.scripts.scripts.ScriptChooser.__init__"]], "complete_run() (my_chess.scripts.scripts.scriptchooser method)": [[102, "my_chess.scripts.scripts.ScriptChooser.complete_run"]], "run() (my_chess.scripts.scripts.scriptchooser method)": [[102, "my_chess.scripts.scripts.ScriptChooser.run"]], "serve (class in my_chess.scripts.scripts)": [[103, "my_chess.scripts.scripts.Serve"]], "__init__() (my_chess.scripts.scripts.serve method)": [[103, "my_chess.scripts.scripts.Serve.__init__"]], "test (class in my_chess.scripts.scripts)": [[104, "my_chess.scripts.scripts.Test"]], "__init__() (my_chess.scripts.scripts.test method)": [[104, "my_chess.scripts.scripts.Test.__init__"]], "complete_run() (my_chess.scripts.scripts.test method)": [[104, "my_chess.scripts.scripts.Test.complete_run"]], "run() (my_chess.scripts.scripts.test method)": [[104, "my_chess.scripts.scripts.Test.run"]], "train (class in my_chess.scripts.scripts)": [[105, "my_chess.scripts.scripts.Train"]], "__init__() (my_chess.scripts.scripts.train method)": [[105, "my_chess.scripts.scripts.Train.__init__"]], "complete_run() (my_chess.scripts.scripts.train method)": [[105, "my_chess.scripts.scripts.Train.complete_run"]], "run() (my_chess.scripts.scripts.train method)": [[105, "my_chess.scripts.scripts.Train.run"]], "tests": [[106, "module-tests"]], "tests.conftest": [[107, "module-tests.conftest"]], "all_draws_game_data() (in module tests.conftest)": [[108, "tests.conftest.all_draws_game_data"]], "full_data() (in module tests.conftest)": [[109, "tests.conftest.full_data"]], "minimal_obs_game_data() (in module tests.conftest)": [[110, "tests.conftest.minimal_obs_game_data"]], "short_game_data() (in module tests.conftest)": [[111, "tests.conftest.short_game_data"]], "tests.test_algorithms": [[112, "module-tests.test_algorithms"]], "test_measure_accuracy() (in module tests.test_algorithms)": [[113, "tests.test_algorithms.test_measure_accuracy"]], "test_measure_precision() (in module tests.test_algorithms)": [[114, "tests.test_algorithms.test_measure_precision"]], "test_measure_recall() (in module tests.test_algorithms)": [[115, "tests.test_algorithms.test_measure_recall"]], "tests.test_datasets": [[116, "module-tests.test_datasets"]], "testchessdata (class in tests.test_datasets)": [[117, "tests.test_datasets.TestChessData"]], "__init__() (tests.test_datasets.testchessdata method)": [[117, "tests.test_datasets.TestChessData.__init__"]], "test_full_observation_record() (tests.test_datasets.testchessdata method)": [[117, "tests.test_datasets.TestChessData.test_full_observation_record"]], "tests.test_models": [[118, "module-tests.test_models"]], "testdeepchessalphabeta (class in tests.test_models)": [[119, "tests.test_models.TestDeepChessAlphaBeta"]], "testdeepchessalphabeta.dummyevaluator (class in tests.test_models)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator"]], "__init__() (tests.test_models.testdeepchessalphabeta method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.__init__"]], "add_module() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.add_module"]], "apply() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.apply"]], "bfloat16() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.bfloat16"]], "buffers() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.buffers"]], "children() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.children"]], "cpu() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.cpu"]], "cuda() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.cuda"]], "double() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.double"]], "eval() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.eval"]], "extra_repr() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.extra_repr"]], "float() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.float"]], "forward() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.forward"]], "get_buffer() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.get_buffer"]], "get_extra_state() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.get_extra_state"]], "get_parameter() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.get_parameter"]], "get_submodule() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.get_submodule"]], "half() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.half"]], "ipu() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.ipu"]], "load_state_dict() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.load_state_dict"]], "modules() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.modules"]], "named_buffers() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.named_buffers"]], "named_children() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.named_children"]], "named_modules() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.named_modules"]], "named_parameters() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.named_parameters"]], "parameters() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.parameters"]], "register_backward_hook() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.register_backward_hook"]], "register_buffer() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.register_buffer"]], "register_forward_hook() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.register_forward_hook"]], "register_forward_pre_hook() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.register_forward_pre_hook"]], "register_full_backward_hook() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.register_full_backward_hook"]], "register_load_state_dict_post_hook() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.register_load_state_dict_post_hook"]], "register_module() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.register_module"]], "register_parameter() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.register_parameter"]], "requires_grad_() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.requires_grad_"]], "set_extra_state() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.set_extra_state"]], "share_memory() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.share_memory"]], "state_dict() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.state_dict"]], "test_simulate_observation_0() (tests.test_models.testdeepchessalphabeta method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.test_simulate_observation_0"]], "to() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.to"]], "to_empty() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.to_empty"]], "train() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.train"]], "type() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.type"]], "xpu() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.xpu"]], "zero_grad() (tests.test_models.testdeepchessalphabeta.dummyevaluator method)": [[119, "tests.test_models.TestDeepChessAlphaBeta.DummyEvaluator.zero_grad"]], "tests.test_training": [[120, "module-tests.test_training"]], "test_crossentropyloss() (in module tests.test_training)": [[121, "tests.test_training.test_crossentropyloss"]]}})